
cont_servo_test_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002908  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  20002908  20002908  0000a908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  2000290c  2000290c  0000a90c  2**2
                  ALLOC
  3 .stack        00003000  20002b88  20002b88  0000a90c  2**0
                  ALLOC
  4 .comment      00000158  00000000  00000000  0000a90c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  0000aa64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000825  00000000  00000000  0000aed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007419  00000000  00000000  0000b6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d4e  00000000  00000000  00012b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002380  00000000  00000000  00013860  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e3c  00000000  00000000  00015be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000265e  00000000  00000000  00016a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017e2  00000000  00000000  0001907a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000315b7  00000000  00000000  0001a85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0004be13  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000430  00000000  00000000  0004be38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20000d49 	.word	0x20000d49
2000006c:	20000d75 	.word	0x20000d75
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	200018e9 	.word	0x200018e9
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	20001915 	.word	0x20001915
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000879 	.word	0x20000879
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>
20000336:	e7fe      	b.n	20000336 <SPI1_IRQHandler+0x2>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>
20000342:	e7fe      	b.n	20000342 <I2C1_SMBus_IRQHandler+0x2>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20001a9d 	.word	0x20001a9d
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20002908 	.word	0x20002908
20000450:	20002908 	.word	0x20002908
20000454:	20002908 	.word	0x20002908
20000458:	2000290c 	.word	0x2000290c
2000045c:	00000000 	.word	0x00000000
20000460:	2000290c 	.word	0x2000290c
20000464:	20002b88 	.word	0x20002b88
20000468:	200027d9 	.word	0x200027d9
2000046c:	20000ab9 	.word	0x20000ab9

20000470 <__do_global_dtors_aux>:
20000470:	f642 130c 	movw	r3, #10508	; 0x290c
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f642 1008 	movw	r0, #10504	; 0x2908
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <imu_init>:
#define X_GYRO_OFFSET 475

#define Y_ACCL_OFFSET -650

void imu_init()
{
200004a0:	b580      	push	{r7, lr}
200004a2:	af00      	add	r7, sp, #0
	imu_write(0x6B, 0x00);
200004a4:	f04f 006b 	mov.w	r0, #107	; 0x6b
200004a8:	f04f 0100 	mov.w	r1, #0
200004ac:	f000 f844 	bl	20000538 <imu_write>
}
200004b0:	bd80      	pop	{r7, pc}
200004b2:	bf00      	nop

200004b4 <imu_accl_y>:

	return ((receive_lower + (receive_upper<<8)) - X_ACCL_OFFSET);
}

int16_t imu_accl_y()
{
200004b4:	b580      	push	{r7, lr}
200004b6:	b082      	sub	sp, #8
200004b8:	af00      	add	r7, sp, #0
	uint8_t receive_lower = imu_read(YACCL_OUT_LOWER);
200004ba:	f04f 003e 	mov.w	r0, #62	; 0x3e
200004be:	f000 f861 	bl	20000584 <imu_read>
200004c2:	4603      	mov	r3, r0
200004c4:	71bb      	strb	r3, [r7, #6]
	uint8_t receive_upper = imu_read(YACCL_OUT_UPPER);
200004c6:	f04f 003d 	mov.w	r0, #61	; 0x3d
200004ca:	f000 f85b 	bl	20000584 <imu_read>
200004ce:	4603      	mov	r3, r0
200004d0:	71fb      	strb	r3, [r7, #7]

	return ((receive_lower + (receive_upper<<8)) - Y_ACCL_OFFSET);
200004d2:	79ba      	ldrb	r2, [r7, #6]
200004d4:	79fb      	ldrb	r3, [r7, #7]
200004d6:	ea4f 2303 	mov.w	r3, r3, lsl #8
200004da:	b29b      	uxth	r3, r3
200004dc:	4413      	add	r3, r2
200004de:	b29b      	uxth	r3, r3
200004e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
200004e4:	f103 0302 	add.w	r3, r3, #2
200004e8:	b29b      	uxth	r3, r3
200004ea:	b21b      	sxth	r3, r3
}
200004ec:	4618      	mov	r0, r3
200004ee:	f107 0708 	add.w	r7, r7, #8
200004f2:	46bd      	mov	sp, r7
200004f4:	bd80      	pop	{r7, pc}
200004f6:	bf00      	nop

200004f8 <imu_gyro_x>:

	return (receive_lower + (receive_upper<<8));
}

uint16_t imu_gyro_x()
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b082      	sub	sp, #8
200004fc:	af00      	add	r7, sp, #0
	uint8_t receive_lower = imu_read(XGYRO_OUT_LOWER);
200004fe:	f04f 0044 	mov.w	r0, #68	; 0x44
20000502:	f000 f83f 	bl	20000584 <imu_read>
20000506:	4603      	mov	r3, r0
20000508:	71bb      	strb	r3, [r7, #6]
	uint8_t receive_upper = imu_read(XGYRO_OUT_UPPER);
2000050a:	f04f 0043 	mov.w	r0, #67	; 0x43
2000050e:	f000 f839 	bl	20000584 <imu_read>
20000512:	4603      	mov	r3, r0
20000514:	71fb      	strb	r3, [r7, #7]

	return ((receive_lower + (receive_upper<<8)) - X_GYRO_OFFSET);
20000516:	79ba      	ldrb	r2, [r7, #6]
20000518:	79fb      	ldrb	r3, [r7, #7]
2000051a:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000051e:	b29b      	uxth	r3, r3
20000520:	4413      	add	r3, r2
20000522:	b29b      	uxth	r3, r3
20000524:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
20000528:	f1a3 0303 	sub.w	r3, r3, #3
2000052c:	b29b      	uxth	r3, r3
}
2000052e:	4618      	mov	r0, r3
20000530:	f107 0708 	add.w	r7, r7, #8
20000534:	46bd      	mov	sp, r7
20000536:	bd80      	pop	{r7, pc}

20000538 <imu_write>:

	return (receive_lower + (receive_upper<<8));
}

void imu_write(uint8_t reg, uint8_t data)
{
20000538:	b580      	push	{r7, lr}
2000053a:	b086      	sub	sp, #24
2000053c:	af02      	add	r7, sp, #8
2000053e:	4602      	mov	r2, r0
20000540:	460b      	mov	r3, r1
20000542:	71fa      	strb	r2, [r7, #7]
20000544:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit[2];

	transmit[0] = reg;
20000546:	79fb      	ldrb	r3, [r7, #7]
20000548:	733b      	strb	r3, [r7, #12]
	transmit[1] = data;
2000054a:	79bb      	ldrb	r3, [r7, #6]
2000054c:	737b      	strb	r3, [r7, #13]

	MSS_I2C_write
2000054e:	f107 030c 	add.w	r3, r7, #12
20000552:	f04f 0200 	mov.w	r2, #0
20000556:	9200      	str	r2, [sp, #0]
20000558:	f642 3044 	movw	r0, #11076	; 0x2b44
2000055c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000560:	f04f 01d0 	mov.w	r1, #208	; 0xd0
20000564:	461a      	mov	r2, r3
20000566:	f04f 0302 	mov.w	r3, #2
2000056a:	f000 fd3f 	bl	20000fec <MSS_I2C_write>
		IMU_ADDRESS_WRITE,
		transmit,
		sizeof(transmit),
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1);
2000056e:	f642 3044 	movw	r0, #11076	; 0x2b44
20000572:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000576:	f000 fdff 	bl	20001178 <MSS_I2C_wait_complete>
}
2000057a:	f107 0710 	add.w	r7, r7, #16
2000057e:	46bd      	mov	sp, r7
20000580:	bd80      	pop	{r7, pc}
20000582:	bf00      	nop

20000584 <imu_read>:

uint8_t imu_read(uint8_t reg)
{
20000584:	b580      	push	{r7, lr}
20000586:	b086      	sub	sp, #24
20000588:	af02      	add	r7, sp, #8
2000058a:	4603      	mov	r3, r0
2000058c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	MSS_I2C_write
2000058e:	f107 0307 	add.w	r3, r7, #7
20000592:	f04f 0200 	mov.w	r2, #0
20000596:	9200      	str	r2, [sp, #0]
20000598:	f642 3044 	movw	r0, #11076	; 0x2b44
2000059c:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005a0:	f04f 01d0 	mov.w	r1, #208	; 0xd0
200005a4:	461a      	mov	r2, r3
200005a6:	f04f 0301 	mov.w	r3, #1
200005aa:	f000 fd1f 	bl	20000fec <MSS_I2C_write>
		&reg,
		sizeof(reg),
		MSS_I2C_RELEASE_BUS
	);

	MSS_I2C_wait_complete(&g_mss_i2c1);
200005ae:	f642 3044 	movw	r0, #11076	; 0x2b44
200005b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005b6:	f000 fddf 	bl	20001178 <MSS_I2C_wait_complete>

	MSS_I2C_read
200005ba:	f107 030f 	add.w	r3, r7, #15
200005be:	f04f 0200 	mov.w	r2, #0
200005c2:	9200      	str	r2, [sp, #0]
200005c4:	f642 3044 	movw	r0, #11076	; 0x2b44
200005c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005cc:	f04f 01d1 	mov.w	r1, #209	; 0xd1
200005d0:	461a      	mov	r2, r3
200005d2:	f04f 0301 	mov.w	r3, #1
200005d6:	f000 fd6b 	bl	200010b0 <MSS_I2C_read>
			IMU_ADDRESS_READ,
			&data,
			sizeof(data),
			MSS_I2C_RELEASE_BUS
	 );
	MSS_I2C_wait_complete(&g_mss_i2c1);
200005da:	f642 3044 	movw	r0, #11076	; 0x2b44
200005de:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005e2:	f000 fdc9 	bl	20001178 <MSS_I2C_wait_complete>

	return data;
200005e6:	7bfb      	ldrb	r3, [r7, #15]
}
200005e8:	4618      	mov	r0, r3
200005ea:	f107 0710 	add.w	r7, r7, #16
200005ee:	46bd      	mov	sp, r7
200005f0:	bd80      	pop	{r7, pc}
200005f2:	bf00      	nop

200005f4 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200005f4:	b480      	push	{r7}
200005f6:	b083      	sub	sp, #12
200005f8:	af00      	add	r7, sp, #0
200005fa:	4603      	mov	r3, r0
200005fc:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200005fe:	f24e 1300 	movw	r3, #57600	; 0xe100
20000602:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000606:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000060a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000060e:	88f9      	ldrh	r1, [r7, #6]
20000610:	f001 011f 	and.w	r1, r1, #31
20000614:	f04f 0001 	mov.w	r0, #1
20000618:	fa00 f101 	lsl.w	r1, r0, r1
2000061c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000620:	f107 070c 	add.w	r7, r7, #12
20000624:	46bd      	mov	sp, r7
20000626:	bc80      	pop	{r7}
20000628:	4770      	bx	lr
2000062a:	bf00      	nop

2000062c <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
2000062c:	b480      	push	{r7}
2000062e:	b083      	sub	sp, #12
20000630:	af00      	add	r7, sp, #0
20000632:	4603      	mov	r3, r0
20000634:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000636:	f24e 1300 	movw	r3, #57600	; 0xe100
2000063a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000063e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000642:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000646:	88f9      	ldrh	r1, [r7, #6]
20000648:	f001 011f 	and.w	r1, r1, #31
2000064c:	f04f 0001 	mov.w	r0, #1
20000650:	fa00 f101 	lsl.w	r1, r0, r1
20000654:	f102 0220 	add.w	r2, r2, #32
20000658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000065c:	f107 070c 	add.w	r7, r7, #12
20000660:	46bd      	mov	sp, r7
20000662:	bc80      	pop	{r7}
20000664:	4770      	bx	lr
20000666:	bf00      	nop

20000668 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000668:	b480      	push	{r7}
2000066a:	b083      	sub	sp, #12
2000066c:	af00      	add	r7, sp, #0
2000066e:	4603      	mov	r3, r0
20000670:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000672:	f24e 1300 	movw	r3, #57600	; 0xe100
20000676:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000067a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000067e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000682:	88f9      	ldrh	r1, [r7, #6]
20000684:	f001 011f 	and.w	r1, r1, #31
20000688:	f04f 0001 	mov.w	r0, #1
2000068c:	fa00 f101 	lsl.w	r1, r0, r1
20000690:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000698:	f107 070c 	add.w	r7, r7, #12
2000069c:	46bd      	mov	sp, r7
2000069e:	bc80      	pop	{r7}
200006a0:	4770      	bx	lr
200006a2:	bf00      	nop

200006a4 <MSS_TIM1_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE
 */
static __INLINE void MSS_TIM1_init( mss_timer_mode_t mode )
{
200006a4:	b580      	push	{r7, lr}
200006a6:	b082      	sub	sp, #8
200006a8:	af00      	add	r7, sp, #0
200006aa:	4603      	mov	r3, r0
200006ac:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer1_IRQn );             /* Disable timer 1 irq in the Cortex-M3 NVIC */  
200006ae:	f04f 0014 	mov.w	r0, #20
200006b2:	f7ff ffbb 	bl	2000062c <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
200006b6:	f242 0300 	movw	r3, #8192	; 0x2000
200006ba:	f2ce 0304 	movt	r3, #57348	; 0xe004
200006be:	f242 0200 	movw	r2, #8192	; 0x2000
200006c2:	f2ce 0204 	movt	r2, #57348	; 0xe004
200006c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
200006c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200006cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
200006ce:	f245 0300 	movw	r3, #20480	; 0x5000
200006d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
200006d6:	f04f 0200 	mov.w	r2, #0
200006da:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM1ENABLE = 0U;             /* disable timer */
200006dc:	f240 0300 	movw	r3, #0
200006e0:	f2c4 230a 	movt	r3, #16906	; 0x420a
200006e4:	f04f 0200 	mov.w	r2, #0
200006e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    TIMER_BITBAND->TIM1INTEN = 0U;              /* disable interrupt */
200006ec:	f240 0300 	movw	r3, #0
200006f0:	f2c4 230a 	movt	r3, #16906	; 0x420a
200006f4:	f04f 0200 	mov.w	r2, #0
200006f8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TIMER_BITBAND->TIM1MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
200006fc:	f240 0300 	movw	r3, #0
20000700:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000704:	79fa      	ldrb	r2, [r7, #7]
20000706:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    
    TIMER->TIM1_RIS = 1U;                       /* clear timer 1 interrupt */
2000070a:	f245 0300 	movw	r3, #20480	; 0x5000
2000070e:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000712:	f04f 0201 	mov.w	r2, #1
20000716:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );        /* clear timer 1 interrupt within NVIC */
20000718:	f04f 0014 	mov.w	r0, #20
2000071c:	f7ff ffa4 	bl	20000668 <NVIC_ClearPendingIRQ>
}
20000720:	f107 0708 	add.w	r7, r7, #8
20000724:	46bd      	mov	sp, r7
20000726:	bd80      	pop	{r7, pc}

20000728 <MSS_TIM1_start>:
  The MSS_TIM1_start() function enables Timer 1 and starts its down-counter
  decrementing from the load_value specified in previous calls to the
  MSS_TIM1_load_immediate() or MSS_TIM1_load_background() functions.
 */
static __INLINE void MSS_TIM1_start( void )
{
20000728:	b480      	push	{r7}
2000072a:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 1U;    /* enable timer */
2000072c:	f240 0300 	movw	r3, #0
20000730:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000734:	f04f 0201 	mov.w	r2, #1
20000738:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
2000073c:	46bd      	mov	sp, r7
2000073e:	bc80      	pop	{r7}
20000740:	4770      	bx	lr
20000742:	bf00      	nop

20000744 <MSS_TIM1_load_background>:
    Timer 1 down-counter the next time the down-counter reaches zero. The Timer
    1 down-counter will start decrementing from this value after the current
    count expires.
 */
static __INLINE void MSS_TIM1_load_background( uint32_t load_value )
{
20000744:	b480      	push	{r7}
20000746:	b083      	sub	sp, #12
20000748:	af00      	add	r7, sp, #0
2000074a:	6078      	str	r0, [r7, #4]
    TIMER->TIM1_BGLOADVAL = load_value;
2000074c:	f245 0300 	movw	r3, #20480	; 0x5000
20000750:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000754:	687a      	ldr	r2, [r7, #4]
20000756:	609a      	str	r2, [r3, #8]
}
20000758:	f107 070c 	add.w	r7, r7, #12
2000075c:	46bd      	mov	sp, r7
2000075e:	bc80      	pop	{r7}
20000760:	4770      	bx	lr
20000762:	bf00      	nop

20000764 <MSS_TIM1_enable_irq>:
  implementation of the Timer1_IRQHandler() function, that will override the
  default implementation, to suit your application.

 */
static __INLINE void MSS_TIM1_enable_irq( void )
{
20000764:	b580      	push	{r7, lr}
20000766:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1INTEN = 1U;
20000768:	f240 0300 	movw	r3, #0
2000076c:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000770:	f04f 0201 	mov.w	r2, #1
20000774:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC_EnableIRQ( Timer1_IRQn );
20000778:	f04f 0014 	mov.w	r0, #20
2000077c:	f7ff ff3a 	bl	200005f4 <NVIC_EnableIRQ>
}
20000780:	bd80      	pop	{r7, pc}
20000782:	bf00      	nop

20000784 <MSS_TIM1_clear_irq>:
  (ISR) in order to prevent the same interrupt event retriggering a call to the
  ISR.

 */
static __INLINE void MSS_TIM1_clear_irq( void )
{
20000784:	b580      	push	{r7, lr}
20000786:	af00      	add	r7, sp, #0
    TIMER->TIM1_RIS = 1U;
20000788:	f245 0300 	movw	r3, #20480	; 0x5000
2000078c:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000790:	f04f 0201 	mov.w	r2, #1
20000794:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );
20000796:	f04f 0014 	mov.w	r0, #20
2000079a:	f7ff ff65 	bl	20000668 <NVIC_ClearPendingIRQ>
}
2000079e:	bd80      	pop	{r7, pc}

200007a0 <MSS_TIM2_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE 
 */
static __INLINE void MSS_TIM2_init( mss_timer_mode_t mode )
{
200007a0:	b580      	push	{r7, lr}
200007a2:	b082      	sub	sp, #8
200007a4:	af00      	add	r7, sp, #0
200007a6:	4603      	mov	r3, r0
200007a8:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer2_IRQn );             /* Disable timer 2 irq in the Cortex-M3 NVIC */  
200007aa:	f04f 0015 	mov.w	r0, #21
200007ae:	f7ff ff3d 	bl	2000062c <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
200007b2:	f242 0300 	movw	r3, #8192	; 0x2000
200007b6:	f2ce 0304 	movt	r3, #57348	; 0xe004
200007ba:	f242 0200 	movw	r2, #8192	; 0x2000
200007be:	f2ce 0204 	movt	r2, #57348	; 0xe004
200007c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
200007c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200007c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
200007ca:	f245 0300 	movw	r3, #20480	; 0x5000
200007ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
200007d2:	f04f 0200 	mov.w	r2, #0
200007d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM2ENABLE = 0U;             /* disable timer */
200007d8:	f240 0300 	movw	r3, #0
200007dc:	f2c4 230a 	movt	r3, #16906	; 0x420a
200007e0:	f04f 0200 	mov.w	r2, #0
200007e4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    TIMER_BITBAND->TIM2INTEN = 0U;              /* disable interrupt */
200007e8:	f240 0300 	movw	r3, #0
200007ec:	f2c4 230a 	movt	r3, #16906	; 0x420a
200007f0:	f04f 0200 	mov.w	r2, #0
200007f4:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488
    TIMER_BITBAND->TIM2MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
200007f8:	f240 0300 	movw	r3, #0
200007fc:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000800:	79fa      	ldrb	r2, [r7, #7]
20000802:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
    
    TIMER->TIM2_RIS = 1U;                       /* clear timer 2 interrupt */
20000806:	f245 0300 	movw	r3, #20480	; 0x5000
2000080a:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000080e:	f04f 0201 	mov.w	r2, #1
20000812:	629a      	str	r2, [r3, #40]	; 0x28
    NVIC_ClearPendingIRQ( Timer2_IRQn );        /* clear timer 2 interrupt within NVIC */
20000814:	f04f 0015 	mov.w	r0, #21
20000818:	f7ff ff26 	bl	20000668 <NVIC_ClearPendingIRQ>
}
2000081c:	f107 0708 	add.w	r7, r7, #8
20000820:	46bd      	mov	sp, r7
20000822:	bd80      	pop	{r7, pc}

20000824 <MSS_TIM2_start>:
  The MSS_TIM2_start() function enables Timer 2 and  starts its down-counter
  decrementing from the load_value specified in previous calls to the
  MSS_TIM2_load_immediate() or MSS_TIM2_load_background() functions.
 */
static __INLINE void MSS_TIM2_start( void )
{
20000824:	b480      	push	{r7}
20000826:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM2ENABLE = 1U;    /* enable timer */
20000828:	f240 0300 	movw	r3, #0
2000082c:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000830:	f04f 0201 	mov.w	r2, #1
20000834:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
}
20000838:	46bd      	mov	sp, r7
2000083a:	bc80      	pop	{r7}
2000083c:	4770      	bx	lr
2000083e:	bf00      	nop

20000840 <MSS_TIM2_get_current_value>:
/*-------------------------------------------------------------------------*//**
  The MSS_TIM2_get_current_value() returns the current value of the Timer 2
  down-counter.
 */
static __INLINE uint32_t MSS_TIM2_get_current_value( void )
{
20000840:	b480      	push	{r7}
20000842:	af00      	add	r7, sp, #0
    return TIMER->TIM2_VAL;
20000844:	f245 0300 	movw	r3, #20480	; 0x5000
20000848:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000084c:	699b      	ldr	r3, [r3, #24]
}
2000084e:	4618      	mov	r0, r3
20000850:	46bd      	mov	sp, r7
20000852:	bc80      	pop	{r7}
20000854:	4770      	bx	lr
20000856:	bf00      	nop

20000858 <MSS_TIM2_load_immediate>:
  @param load_value
    The load_value parameter specifies the value from which the Timer 2
    down-counter will start decrementing. 
 */
static __INLINE void MSS_TIM2_load_immediate( uint32_t load_value )
{
20000858:	b480      	push	{r7}
2000085a:	b083      	sub	sp, #12
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
    TIMER->TIM2_LOADVAL = load_value;
20000860:	f245 0300 	movw	r3, #20480	; 0x5000
20000864:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000868:	687a      	ldr	r2, [r7, #4]
2000086a:	61da      	str	r2, [r3, #28]
}
2000086c:	f107 070c 	add.w	r7, r7, #12
20000870:	46bd      	mov	sp, r7
20000872:	bc80      	pop	{r7}
20000874:	4770      	bx	lr
20000876:	bf00      	nop

20000878 <Timer1_IRQHandler>:

int16_t X_GYRO;
uint16_t Y_ACCL;

void Timer1_IRQHandler( void )
{
20000878:	b5b0      	push	{r4, r5, r7, lr}
2000087a:	b088      	sub	sp, #32
2000087c:	af00      	add	r7, sp, #0

    //average gyro readings
    static int16_t gyro_avgs[NUMBER_SAMPLES];
    static int index_gyro = 0;

    gyro_avgs[index_gyro] = X_GYRO;
2000087e:	f642 1314 	movw	r3, #10516	; 0x2914
20000882:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000886:	681a      	ldr	r2, [r3, #0]
20000888:	f642 23ae 	movw	r3, #10926	; 0x2aae
2000088c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000890:	8819      	ldrh	r1, [r3, #0]
20000892:	f642 1318 	movw	r3, #10520	; 0x2918
20000896:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000089a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    index_gyro++;
2000089e:	f642 1314 	movw	r3, #10516	; 0x2914
200008a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008a6:	681b      	ldr	r3, [r3, #0]
200008a8:	f103 0201 	add.w	r2, r3, #1
200008ac:	f642 1314 	movw	r3, #10516	; 0x2914
200008b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008b4:	601a      	str	r2, [r3, #0]
    if (index_gyro >= NUMBER_SAMPLES) index_gyro = 0;
200008b6:	f642 1314 	movw	r3, #10516	; 0x2914
200008ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008be:	681b      	ldr	r3, [r3, #0]
200008c0:	2b63      	cmp	r3, #99	; 0x63
200008c2:	dd06      	ble.n	200008d2 <Timer1_IRQHandler+0x5a>
200008c4:	f642 1314 	movw	r3, #10516	; 0x2914
200008c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008cc:	f04f 0200 	mov.w	r2, #0
200008d0:	601a      	str	r2, [r3, #0]

    int32_t total_gyro = 0;
200008d2:	f04f 0300 	mov.w	r3, #0
200008d6:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NUMBER_SAMPLES; ++i) {
200008d8:	f04f 0300 	mov.w	r3, #0
200008dc:	607b      	str	r3, [r7, #4]
200008de:	e00e      	b.n	200008fe <Timer1_IRQHandler+0x86>
        total_gyro += gyro_avgs[i];
200008e0:	687a      	ldr	r2, [r7, #4]
200008e2:	f642 1318 	movw	r3, #10520	; 0x2918
200008e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200008ee:	b21b      	sxth	r3, r3
200008f0:	68ba      	ldr	r2, [r7, #8]
200008f2:	4413      	add	r3, r2
200008f4:	60bb      	str	r3, [r7, #8]

    index_gyro++;
    if (index_gyro >= NUMBER_SAMPLES) index_gyro = 0;

    int32_t total_gyro = 0;
    for (i = 0; i < NUMBER_SAMPLES; ++i) {
200008f6:	687b      	ldr	r3, [r7, #4]
200008f8:	f103 0301 	add.w	r3, r3, #1
200008fc:	607b      	str	r3, [r7, #4]
200008fe:	687b      	ldr	r3, [r7, #4]
20000900:	2b63      	cmp	r3, #99	; 0x63
20000902:	dded      	ble.n	200008e0 <Timer1_IRQHandler+0x68>
        total_gyro += gyro_avgs[i];
    }
    float gyro_avg = total_gyro / NUMBER_SAMPLES;
20000904:	68ba      	ldr	r2, [r7, #8]
20000906:	f248 531f 	movw	r3, #34079	; 0x851f
2000090a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
2000090e:	fb83 1302 	smull	r1, r3, r3, r2
20000912:	ea4f 1163 	mov.w	r1, r3, asr #5
20000916:	ea4f 73e2 	mov.w	r3, r2, asr #31
2000091a:	ebc3 0301 	rsb	r3, r3, r1
2000091e:	4618      	mov	r0, r3
20000920:	f001 fdb6 	bl	20002490 <__aeabi_i2f>
20000924:	4603      	mov	r3, r0
20000926:	60fb      	str	r3, [r7, #12]
    float gyro_angle = (gyro_avg ) / 131;
20000928:	68f8      	ldr	r0, [r7, #12]
2000092a:	495f      	ldr	r1, [pc, #380]	; (20000aa8 <Timer1_IRQHandler+0x230>)
2000092c:	f001 feb8 	bl	200026a0 <__aeabi_fdiv>
20000930:	4603      	mov	r3, r0
20000932:	613b      	str	r3, [r7, #16]

    //average accl readings
    static int16_t accl_avgs[NUMBER_SAMPLES];
    static int index_accl = 0;

    accl_avgs[index_accl] = Y_ACCL;
20000934:	f642 13e0 	movw	r3, #10720	; 0x29e0
20000938:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000093c:	681a      	ldr	r2, [r3, #0]
2000093e:	f642 23ac 	movw	r3, #10924	; 0x2aac
20000942:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000946:	881b      	ldrh	r3, [r3, #0]
20000948:	4619      	mov	r1, r3
2000094a:	f642 13e4 	movw	r3, #10724	; 0x29e4
2000094e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000952:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    index_accl++;
20000956:	f642 13e0 	movw	r3, #10720	; 0x29e0
2000095a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000095e:	681b      	ldr	r3, [r3, #0]
20000960:	f103 0201 	add.w	r2, r3, #1
20000964:	f642 13e0 	movw	r3, #10720	; 0x29e0
20000968:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000096c:	601a      	str	r2, [r3, #0]
    if (index_accl >= NUMBER_SAMPLES) index_accl = 0;
2000096e:	f642 13e0 	movw	r3, #10720	; 0x29e0
20000972:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000976:	681b      	ldr	r3, [r3, #0]
20000978:	2b63      	cmp	r3, #99	; 0x63
2000097a:	dd06      	ble.n	2000098a <Timer1_IRQHandler+0x112>
2000097c:	f642 13e0 	movw	r3, #10720	; 0x29e0
20000980:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000984:	f04f 0200 	mov.w	r2, #0
20000988:	601a      	str	r2, [r3, #0]

    int32_t total_accl = 0;
2000098a:	f04f 0300 	mov.w	r3, #0
2000098e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NUMBER_SAMPLES; ++i) {
20000990:	f04f 0300 	mov.w	r3, #0
20000994:	607b      	str	r3, [r7, #4]
20000996:	e00e      	b.n	200009b6 <Timer1_IRQHandler+0x13e>
        total_accl += accl_avgs[i];
20000998:	687a      	ldr	r2, [r7, #4]
2000099a:	f642 13e4 	movw	r3, #10724	; 0x29e4
2000099e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200009a6:	b21b      	sxth	r3, r3
200009a8:	697a      	ldr	r2, [r7, #20]
200009aa:	4413      	add	r3, r2
200009ac:	617b      	str	r3, [r7, #20]

    index_accl++;
    if (index_accl >= NUMBER_SAMPLES) index_accl = 0;

    int32_t total_accl = 0;
    for (i = 0; i < NUMBER_SAMPLES; ++i) {
200009ae:	687b      	ldr	r3, [r7, #4]
200009b0:	f103 0301 	add.w	r3, r3, #1
200009b4:	607b      	str	r3, [r7, #4]
200009b6:	687b      	ldr	r3, [r7, #4]
200009b8:	2b63      	cmp	r3, #99	; 0x63
200009ba:	dded      	ble.n	20000998 <Timer1_IRQHandler+0x120>
        total_accl += accl_avgs[i];
    }
    float accl_avg = total_accl / NUMBER_SAMPLES;
200009bc:	697a      	ldr	r2, [r7, #20]
200009be:	f248 531f 	movw	r3, #34079	; 0x851f
200009c2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
200009c6:	fb83 1302 	smull	r1, r3, r3, r2
200009ca:	ea4f 1163 	mov.w	r1, r3, asr #5
200009ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
200009d2:	ebc3 0301 	rsb	r3, r3, r1
200009d6:	4618      	mov	r0, r3
200009d8:	f001 fd5a 	bl	20002490 <__aeabi_i2f>
200009dc:	4603      	mov	r3, r0
200009de:	61bb      	str	r3, [r7, #24]
    float accl_angle = (accl_avg * 90) / 16384;
200009e0:	69b8      	ldr	r0, [r7, #24]
200009e2:	4932      	ldr	r1, [pc, #200]	; (20000aac <Timer1_IRQHandler+0x234>)
200009e4:	f001 fda8 	bl	20002538 <__aeabi_fmul>
200009e8:	4603      	mov	r3, r0
200009ea:	4618      	mov	r0, r3
200009ec:	4930      	ldr	r1, [pc, #192]	; (20000ab0 <Timer1_IRQHandler+0x238>)
200009ee:	f001 fe57 	bl	200026a0 <__aeabi_fdiv>
200009f2:	4603      	mov	r3, r0
200009f4:	61fb      	str	r3, [r7, #28]

    //combine accel and gyro


    angle = (0.98) * (angle + gyro_angle * dt) + (0.02) * accl_angle;
200009f6:	f642 1310 	movw	r3, #10512	; 0x2910
200009fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009fe:	681b      	ldr	r3, [r3, #0]
20000a00:	4618      	mov	r0, r3
20000a02:	f001 f9b5 	bl	20001d70 <__aeabi_f2d>
20000a06:	4604      	mov	r4, r0
20000a08:	460d      	mov	r5, r1
20000a0a:	6938      	ldr	r0, [r7, #16]
20000a0c:	f001 f9b0 	bl	20001d70 <__aeabi_f2d>
20000a10:	4602      	mov	r2, r0
20000a12:	460b      	mov	r3, r1
20000a14:	4610      	mov	r0, r2
20000a16:	4619      	mov	r1, r3
20000a18:	a31d      	add	r3, pc, #116	; (adr r3, 20000a90 <Timer1_IRQHandler+0x218>)
20000a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
20000a1e:	f001 f9fb 	bl	20001e18 <__aeabi_dmul>
20000a22:	4602      	mov	r2, r0
20000a24:	460b      	mov	r3, r1
20000a26:	4620      	mov	r0, r4
20000a28:	4629      	mov	r1, r5
20000a2a:	f001 f843 	bl	20001ab4 <__adddf3>
20000a2e:	4602      	mov	r2, r0
20000a30:	460b      	mov	r3, r1
20000a32:	4610      	mov	r0, r2
20000a34:	4619      	mov	r1, r3
20000a36:	a318      	add	r3, pc, #96	; (adr r3, 20000a98 <Timer1_IRQHandler+0x220>)
20000a38:	e9d3 2300 	ldrd	r2, r3, [r3]
20000a3c:	f001 f9ec 	bl	20001e18 <__aeabi_dmul>
20000a40:	4602      	mov	r2, r0
20000a42:	460b      	mov	r3, r1
20000a44:	4614      	mov	r4, r2
20000a46:	461d      	mov	r5, r3
20000a48:	69f8      	ldr	r0, [r7, #28]
20000a4a:	f001 f991 	bl	20001d70 <__aeabi_f2d>
20000a4e:	4602      	mov	r2, r0
20000a50:	460b      	mov	r3, r1
20000a52:	4610      	mov	r0, r2
20000a54:	4619      	mov	r1, r3
20000a56:	a312      	add	r3, pc, #72	; (adr r3, 20000aa0 <Timer1_IRQHandler+0x228>)
20000a58:	e9d3 2300 	ldrd	r2, r3, [r3]
20000a5c:	f001 f9dc 	bl	20001e18 <__aeabi_dmul>
20000a60:	4602      	mov	r2, r0
20000a62:	460b      	mov	r3, r1
20000a64:	4620      	mov	r0, r4
20000a66:	4629      	mov	r1, r5
20000a68:	f001 f824 	bl	20001ab4 <__adddf3>
20000a6c:	4602      	mov	r2, r0
20000a6e:	460b      	mov	r3, r1
20000a70:	4610      	mov	r0, r2
20000a72:	4619      	mov	r1, r3
20000a74:	f001 fc02 	bl	2000227c <__aeabi_d2f>
20000a78:	4602      	mov	r2, r0
20000a7a:	f642 1310 	movw	r3, #10512	; 0x2910
20000a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a82:	601a      	str	r2, [r3, #0]

    //printf("angle! : %f\r\n", angle);

    MSS_TIM1_clear_irq();
20000a84:	f7ff fe7e 	bl	20000784 <MSS_TIM1_clear_irq>
}
20000a88:	f107 0720 	add.w	r7, r7, #32
20000a8c:	46bd      	mov	sp, r7
20000a8e:	bdb0      	pop	{r4, r5, r7, pc}
20000a90:	d2f1a9fc 	.word	0xd2f1a9fc
20000a94:	3f50624d 	.word	0x3f50624d
20000a98:	f5c28f5c 	.word	0xf5c28f5c
20000a9c:	3fef5c28 	.word	0x3fef5c28
20000aa0:	47ae147b 	.word	0x47ae147b
20000aa4:	3f947ae1 	.word	0x3f947ae1
20000aa8:	43030000 	.word	0x43030000
20000aac:	42b40000 	.word	0x42b40000
20000ab0:	46800000 	.word	0x46800000
20000ab4:	f3af 8000 	nop.w

20000ab8 <main>:

int main()
{
20000ab8:	b580      	push	{r7, lr}
20000aba:	b082      	sub	sp, #8
20000abc:	af00      	add	r7, sp, #0
	//uint32_t count;

	MSS_GPIO_init();
20000abe:	f000 ff5d 	bl	2000197c <MSS_GPIO_init>
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE);
20000ac2:	f04f 0000 	mov.w	r0, #0
20000ac6:	f04f 0105 	mov.w	r1, #5
20000aca:	f000 ff8d 	bl	200019e8 <MSS_GPIO_config>


	MSS_I2C_init(&g_mss_i2c1 , IMU_ADDRESS_WRITE, MSS_I2C_PCLK_DIV_256 );
20000ace:	f642 3044 	movw	r0, #11076	; 0x2b44
20000ad2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ad6:	f04f 01d0 	mov.w	r1, #208	; 0xd0
20000ada:	f04f 0200 	mov.w	r2, #0
20000ade:	f000 f9b7 	bl	20000e50 <MSS_I2C_init>
	imu_init();
20000ae2:	f7ff fcdd 	bl	200004a0 <imu_init>

	//one timer tick is 10ns at 100Mhz
	MSS_TIM1_init( MSS_TIMER_PERIODIC_MODE);
20000ae6:	f04f 0000 	mov.w	r0, #0
20000aea:	f7ff fddb 	bl	200006a4 <MSS_TIM1_init>
	MSS_TIM1_enable_irq();
20000aee:	f7ff fe39 	bl	20000764 <MSS_TIM1_enable_irq>
	MSS_TIM1_load_background(100000);
20000af2:	f248 60a0 	movw	r0, #34464	; 0x86a0
20000af6:	f2c0 0001 	movt	r0, #1
20000afa:	f7ff fe23 	bl	20000744 <MSS_TIM1_load_background>
	MSS_TIM1_start();
20000afe:	f7ff fe13 	bl	20000728 <MSS_TIM1_start>

	MSS_TIM2_init( MSS_TIMER_ONE_SHOT_MODE);
20000b02:	f04f 0001 	mov.w	r0, #1
20000b06:	f7ff fe4b 	bl	200007a0 <MSS_TIM2_init>
		//int16_t y_accl = imu_accl_y();
		//int16_t z_accl = imu_accl_z();



	    X_GYRO = imu_gyro_x();
20000b0a:	f7ff fcf5 	bl	200004f8 <imu_gyro_x>
20000b0e:	4603      	mov	r3, r0
20000b10:	461a      	mov	r2, r3
20000b12:	f642 23ae 	movw	r3, #10926	; 0x2aae
20000b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b1a:	801a      	strh	r2, [r3, #0]
	    Y_ACCL = imu_accl_y();
20000b1c:	f7ff fcca 	bl	200004b4 <imu_accl_y>
20000b20:	4603      	mov	r3, r0
20000b22:	b29b      	uxth	r3, r3
20000b24:	b29a      	uxth	r2, r3
20000b26:	f642 23ac 	movw	r3, #10924	; 0x2aac
20000b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b2e:	801a      	strh	r2, [r3, #0]



		//150000 = 1.5ms pulse
		//1.49ms pulse = equilibrium point
		uint32_t pulsewidth = 150000 + (angle/90.0)*100000 ;
20000b30:	f642 1310 	movw	r3, #10512	; 0x2910
20000b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b38:	681b      	ldr	r3, [r3, #0]
20000b3a:	4618      	mov	r0, r3
20000b3c:	f001 f918 	bl	20001d70 <__aeabi_f2d>
20000b40:	4602      	mov	r2, r0
20000b42:	460b      	mov	r3, r1
20000b44:	4610      	mov	r0, r2
20000b46:	4619      	mov	r1, r3
20000b48:	a323      	add	r3, pc, #140	; (adr r3, 20000bd8 <main+0x120>)
20000b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b4e:	f001 fa8d 	bl	2000206c <__aeabi_ddiv>
20000b52:	4602      	mov	r2, r0
20000b54:	460b      	mov	r3, r1
20000b56:	4610      	mov	r0, r2
20000b58:	4619      	mov	r1, r3
20000b5a:	a321      	add	r3, pc, #132	; (adr r3, 20000be0 <main+0x128>)
20000b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b60:	f001 f95a 	bl	20001e18 <__aeabi_dmul>
20000b64:	4602      	mov	r2, r0
20000b66:	460b      	mov	r3, r1
20000b68:	4610      	mov	r0, r2
20000b6a:	4619      	mov	r1, r3
20000b6c:	a31e      	add	r3, pc, #120	; (adr r3, 20000be8 <main+0x130>)
20000b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b72:	f000 ff9f 	bl	20001ab4 <__adddf3>
20000b76:	4602      	mov	r2, r0
20000b78:	460b      	mov	r3, r1
20000b7a:	4610      	mov	r0, r2
20000b7c:	4619      	mov	r1, r3
20000b7e:	f001 fb5d 	bl	2000223c <__aeabi_d2uiz>
20000b82:	4603      	mov	r3, r0
20000b84:	603b      	str	r3, [r7, #0]
		uint32_t period = 2000000;
20000b86:	f248 4380 	movw	r3, #33920	; 0x8480
20000b8a:	f2c0 031e 	movt	r3, #30
20000b8e:	607b      	str	r3, [r7, #4]
		MSS_TIM2_load_immediate(period);
20000b90:	6878      	ldr	r0, [r7, #4]
20000b92:	f7ff fe61 	bl	20000858 <MSS_TIM2_load_immediate>
	    MSS_TIM2_start();
20000b96:	f7ff fe45 	bl	20000824 <MSS_TIM2_start>

	    while (MSS_TIM2_get_current_value() > 0) {
20000b9a:	e015      	b.n	20000bc8 <main+0x110>

	    	if (MSS_TIM2_get_current_value() > (period - pulsewidth))
20000b9c:	f7ff fe50 	bl	20000840 <MSS_TIM2_get_current_value>
20000ba0:	4602      	mov	r2, r0
20000ba2:	6879      	ldr	r1, [r7, #4]
20000ba4:	683b      	ldr	r3, [r7, #0]
20000ba6:	ebc3 0301 	rsb	r3, r3, r1
20000baa:	429a      	cmp	r2, r3
20000bac:	d906      	bls.n	20000bbc <main+0x104>
	    		MSS_GPIO_set_output( MSS_GPIO_0, 1);
20000bae:	f04f 0000 	mov.w	r0, #0
20000bb2:	f04f 0101 	mov.w	r1, #1
20000bb6:	f000 ff35 	bl	20001a24 <MSS_GPIO_set_output>
20000bba:	e005      	b.n	20000bc8 <main+0x110>
	    	else
	    		MSS_GPIO_set_output( MSS_GPIO_0, 0);
20000bbc:	f04f 0000 	mov.w	r0, #0
20000bc0:	f04f 0100 	mov.w	r1, #0
20000bc4:	f000 ff2e 	bl	20001a24 <MSS_GPIO_set_output>
		uint32_t pulsewidth = 150000 + (angle/90.0)*100000 ;
		uint32_t period = 2000000;
		MSS_TIM2_load_immediate(period);
	    MSS_TIM2_start();

	    while (MSS_TIM2_get_current_value() > 0) {
20000bc8:	f7ff fe3a 	bl	20000840 <MSS_TIM2_get_current_value>
20000bcc:	4603      	mov	r3, r0
20000bce:	2b00      	cmp	r3, #0
20000bd0:	d1e4      	bne.n	20000b9c <main+0xe4>
	    	if (MSS_TIM2_get_current_value() > (period - pulsewidth))
	    		MSS_GPIO_set_output( MSS_GPIO_0, 1);
	    	else
	    		MSS_GPIO_set_output( MSS_GPIO_0, 0);
	    }
	}
20000bd2:	e79a      	b.n	20000b0a <main+0x52>
20000bd4:	f3af 8000 	nop.w
20000bd8:	00000000 	.word	0x00000000
20000bdc:	40568000 	.word	0x40568000
20000be0:	00000000 	.word	0x00000000
20000be4:	40f86a00 	.word	0x40f86a00
20000be8:	00000000 	.word	0x00000000
20000bec:	41024f80 	.word	0x41024f80

20000bf0 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000bf0:	b480      	push	{r7}
20000bf2:	b083      	sub	sp, #12
20000bf4:	af00      	add	r7, sp, #0
20000bf6:	4603      	mov	r3, r0
20000bf8:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000bfa:	f24e 1300 	movw	r3, #57600	; 0xe100
20000bfe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000c02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000c06:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000c0a:	88f9      	ldrh	r1, [r7, #6]
20000c0c:	f001 011f 	and.w	r1, r1, #31
20000c10:	f04f 0001 	mov.w	r0, #1
20000c14:	fa00 f101 	lsl.w	r1, r0, r1
20000c18:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000c20:	f107 070c 	add.w	r7, r7, #12
20000c24:	46bd      	mov	sp, r7
20000c26:	bc80      	pop	{r7}
20000c28:	4770      	bx	lr
20000c2a:	bf00      	nop

20000c2c <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20000c2c:	b580      	push	{r7, lr}
20000c2e:	b084      	sub	sp, #16
20000c30:	af00      	add	r7, sp, #0
20000c32:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000c34:	687a      	ldr	r2, [r7, #4]
20000c36:	f642 23d8 	movw	r3, #10968	; 0x2ad8
20000c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c3e:	429a      	cmp	r2, r3
20000c40:	d007      	beq.n	20000c52 <MSS_UART_isr+0x26>
20000c42:	687a      	ldr	r2, [r7, #4]
20000c44:	f642 23b0 	movw	r3, #10928	; 0x2ab0
20000c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c4c:	429a      	cmp	r2, r3
20000c4e:	d000      	beq.n	20000c52 <MSS_UART_isr+0x26>
20000c50:	be00      	bkpt	0x0000

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
20000c52:	687a      	ldr	r2, [r7, #4]
20000c54:	f642 23d8 	movw	r3, #10968	; 0x2ad8
20000c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c5c:	429a      	cmp	r2, r3
20000c5e:	d006      	beq.n	20000c6e <MSS_UART_isr+0x42>
20000c60:	687a      	ldr	r2, [r7, #4]
20000c62:	f642 23b0 	movw	r3, #10928	; 0x2ab0
20000c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c6a:	429a      	cmp	r2, r3
20000c6c:	d167      	bne.n	20000d3e <MSS_UART_isr+0x112>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20000c6e:	687b      	ldr	r3, [r7, #4]
20000c70:	681b      	ldr	r3, [r3, #0]
20000c72:	7a1b      	ldrb	r3, [r3, #8]
20000c74:	b2db      	uxtb	r3, r3
20000c76:	f003 030f 	and.w	r3, r3, #15
20000c7a:	73fb      	strb	r3, [r7, #15]

        switch ( iirf )
20000c7c:	7bfb      	ldrb	r3, [r7, #15]
20000c7e:	2b0c      	cmp	r3, #12
20000c80:	d854      	bhi.n	20000d2c <MSS_UART_isr+0x100>
20000c82:	a201      	add	r2, pc, #4	; (adr r2, 20000c88 <MSS_UART_isr+0x5c>)
20000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000c88:	20000cbd 	.word	0x20000cbd
20000c8c:	20000d2d 	.word	0x20000d2d
20000c90:	20000cd9 	.word	0x20000cd9
20000c94:	20000d2d 	.word	0x20000d2d
20000c98:	20000cf5 	.word	0x20000cf5
20000c9c:	20000d2d 	.word	0x20000d2d
20000ca0:	20000d11 	.word	0x20000d11
20000ca4:	20000d2d 	.word	0x20000d2d
20000ca8:	20000d2d 	.word	0x20000d2d
20000cac:	20000d2d 	.word	0x20000d2d
20000cb0:	20000d2d 	.word	0x20000d2d
20000cb4:	20000d2d 	.word	0x20000d2d
20000cb8:	20000cf5 	.word	0x20000cf5
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
20000cbc:	687b      	ldr	r3, [r7, #4]
20000cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000cc0:	2b00      	cmp	r3, #0
20000cc2:	d100      	bne.n	20000cc6 <MSS_UART_isr+0x9a>
20000cc4:	be00      	bkpt	0x0000
                if( NULL_HANDLER != this_uart->modemsts_handler )
20000cc6:	687b      	ldr	r3, [r7, #4]
20000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000cca:	2b00      	cmp	r3, #0
20000ccc:	d030      	beq.n	20000d30 <MSS_UART_isr+0x104>
                {
                   (*(this_uart->modemsts_handler))( this_uart );
20000cce:	687b      	ldr	r3, [r7, #4]
20000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000cd2:	6878      	ldr	r0, [r7, #4]
20000cd4:	4798      	blx	r3
                }
            }
            break;
20000cd6:	e032      	b.n	20000d3e <MSS_UART_isr+0x112>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20000cd8:	687b      	ldr	r3, [r7, #4]
20000cda:	6a1b      	ldr	r3, [r3, #32]
20000cdc:	2b00      	cmp	r3, #0
20000cde:	d100      	bne.n	20000ce2 <MSS_UART_isr+0xb6>
20000ce0:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->tx_handler )
20000ce2:	687b      	ldr	r3, [r7, #4]
20000ce4:	6a1b      	ldr	r3, [r3, #32]
20000ce6:	2b00      	cmp	r3, #0
20000ce8:	d024      	beq.n	20000d34 <MSS_UART_isr+0x108>
                {
                    (*(this_uart->tx_handler))( this_uart );
20000cea:	687b      	ldr	r3, [r7, #4]
20000cec:	6a1b      	ldr	r3, [r3, #32]
20000cee:	6878      	ldr	r0, [r7, #4]
20000cf0:	4798      	blx	r3
                }
            }
            break;
20000cf2:	e024      	b.n	20000d3e <MSS_UART_isr+0x112>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20000cf4:	687b      	ldr	r3, [r7, #4]
20000cf6:	69db      	ldr	r3, [r3, #28]
20000cf8:	2b00      	cmp	r3, #0
20000cfa:	d100      	bne.n	20000cfe <MSS_UART_isr+0xd2>
20000cfc:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->rx_handler )
20000cfe:	687b      	ldr	r3, [r7, #4]
20000d00:	69db      	ldr	r3, [r3, #28]
20000d02:	2b00      	cmp	r3, #0
20000d04:	d018      	beq.n	20000d38 <MSS_UART_isr+0x10c>
                {
                    (*(this_uart->rx_handler))( this_uart );
20000d06:	687b      	ldr	r3, [r7, #4]
20000d08:	69db      	ldr	r3, [r3, #28]
20000d0a:	6878      	ldr	r0, [r7, #4]
20000d0c:	4798      	blx	r3
                }
            }
            break;
20000d0e:	e016      	b.n	20000d3e <MSS_UART_isr+0x112>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20000d10:	687b      	ldr	r3, [r7, #4]
20000d12:	699b      	ldr	r3, [r3, #24]
20000d14:	2b00      	cmp	r3, #0
20000d16:	d100      	bne.n	20000d1a <MSS_UART_isr+0xee>
20000d18:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->linests_handler )
20000d1a:	687b      	ldr	r3, [r7, #4]
20000d1c:	699b      	ldr	r3, [r3, #24]
20000d1e:	2b00      	cmp	r3, #0
20000d20:	d00c      	beq.n	20000d3c <MSS_UART_isr+0x110>
                {
                   (*(this_uart->linests_handler))( this_uart );
20000d22:	687b      	ldr	r3, [r7, #4]
20000d24:	699b      	ldr	r3, [r3, #24]
20000d26:	6878      	ldr	r0, [r7, #4]
20000d28:	4798      	blx	r3
                }
            }
            break;
20000d2a:	e008      	b.n	20000d3e <MSS_UART_isr+0x112>

            default:
            {
                ASSERT( INVALID_INTERRUPT );
20000d2c:	be00      	bkpt	0x0000
20000d2e:	e006      	b.n	20000d3e <MSS_UART_isr+0x112>
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
                }
            }
            break;
20000d30:	bf00      	nop
20000d32:	e004      	b.n	20000d3e <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
                }
            }
            break;
20000d34:	bf00      	nop
20000d36:	e002      	b.n	20000d3e <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
                }
            }
            break;
20000d38:	bf00      	nop
20000d3a:	e000      	b.n	20000d3e <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
                }
            }
            break;
20000d3c:	bf00      	nop
                ASSERT( INVALID_INTERRUPT );
            }
            break;
        }
    }
}
20000d3e:	f107 0710 	add.w	r7, r7, #16
20000d42:	46bd      	mov	sp, r7
20000d44:	bd80      	pop	{r7, pc}
20000d46:	bf00      	nop

20000d48 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20000d48:	4668      	mov	r0, sp
20000d4a:	f020 0107 	bic.w	r1, r0, #7
20000d4e:	468d      	mov	sp, r1
20000d50:	b589      	push	{r0, r3, r7, lr}
20000d52:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart0 );
20000d54:	f642 20d8 	movw	r0, #10968	; 0x2ad8
20000d58:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000d5c:	f7ff ff66 	bl	20000c2c <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART0_IRQn );
20000d60:	f04f 000a 	mov.w	r0, #10
20000d64:	f7ff ff44 	bl	20000bf0 <NVIC_ClearPendingIRQ>
}
20000d68:	46bd      	mov	sp, r7
20000d6a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20000d6e:	4685      	mov	sp, r0
20000d70:	4770      	bx	lr
20000d72:	bf00      	nop

20000d74 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20000d74:	4668      	mov	r0, sp
20000d76:	f020 0107 	bic.w	r1, r0, #7
20000d7a:	468d      	mov	sp, r1
20000d7c:	b589      	push	{r0, r3, r7, lr}
20000d7e:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart1 );
20000d80:	f642 20b0 	movw	r0, #10928	; 0x2ab0
20000d84:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000d88:	f7ff ff50 	bl	20000c2c <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART1_IRQn );
20000d8c:	f04f 000b 	mov.w	r0, #11
20000d90:	f7ff ff2e 	bl	20000bf0 <NVIC_ClearPendingIRQ>
}
20000d94:	46bd      	mov	sp, r7
20000d96:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20000d9a:	4685      	mov	sp, r0
20000d9c:	4770      	bx	lr
20000d9e:	bf00      	nop

20000da0 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20000da0:	b480      	push	{r7}
20000da2:	b083      	sub	sp, #12
20000da4:	af00      	add	r7, sp, #0
20000da6:	4603      	mov	r3, r0
20000da8:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000daa:	f24e 1300 	movw	r3, #57600	; 0xe100
20000dae:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000db2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000db6:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000dba:	88f9      	ldrh	r1, [r7, #6]
20000dbc:	f001 011f 	and.w	r1, r1, #31
20000dc0:	f04f 0001 	mov.w	r0, #1
20000dc4:	fa00 f101 	lsl.w	r1, r0, r1
20000dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000dcc:	f107 070c 	add.w	r7, r7, #12
20000dd0:	46bd      	mov	sp, r7
20000dd2:	bc80      	pop	{r7}
20000dd4:	4770      	bx	lr
20000dd6:	bf00      	nop

20000dd8 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000dd8:	b480      	push	{r7}
20000dda:	b083      	sub	sp, #12
20000ddc:	af00      	add	r7, sp, #0
20000dde:	4603      	mov	r3, r0
20000de0:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000de2:	f24e 1300 	movw	r3, #57600	; 0xe100
20000de6:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000dea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000dee:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000df2:	88f9      	ldrh	r1, [r7, #6]
20000df4:	f001 011f 	and.w	r1, r1, #31
20000df8:	f04f 0001 	mov.w	r0, #1
20000dfc:	fa00 f101 	lsl.w	r1, r0, r1
20000e00:	f102 0220 	add.w	r2, r2, #32
20000e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000e08:	f107 070c 	add.w	r7, r7, #12
20000e0c:	46bd      	mov	sp, r7
20000e0e:	bc80      	pop	{r7}
20000e10:	4770      	bx	lr
20000e12:	bf00      	nop

20000e14 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000e14:	b480      	push	{r7}
20000e16:	b083      	sub	sp, #12
20000e18:	af00      	add	r7, sp, #0
20000e1a:	4603      	mov	r3, r0
20000e1c:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000e1e:	f24e 1300 	movw	r3, #57600	; 0xe100
20000e22:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000e26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000e2a:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000e2e:	88f9      	ldrh	r1, [r7, #6]
20000e30:	f001 011f 	and.w	r1, r1, #31
20000e34:	f04f 0001 	mov.w	r0, #1
20000e38:	fa00 f101 	lsl.w	r1, r0, r1
20000e3c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000e44:	f107 070c 	add.w	r7, r7, #12
20000e48:	46bd      	mov	sp, r7
20000e4a:	bc80      	pop	{r7}
20000e4c:	4770      	bx	lr
20000e4e:	bf00      	nop

20000e50 <MSS_I2C_init>:
(
	mss_i2c_instance_t * this_i2c,
	uint8_t ser_address,
	mss_i2c_clock_divider_t ser_clock_speed
)
{
20000e50:	b580      	push	{r7, lr}
20000e52:	b084      	sub	sp, #16
20000e54:	af00      	add	r7, sp, #0
20000e56:	6078      	str	r0, [r7, #4]
20000e58:	4613      	mov	r3, r2
20000e5a:	460a      	mov	r2, r1
20000e5c:	70fa      	strb	r2, [r7, #3]
20000e5e:	70bb      	strb	r3, [r7, #2]
    uint_fast16_t clock_speed = ser_clock_speed;
20000e60:	78bb      	ldrb	r3, [r7, #2]
20000e62:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000e64:	687a      	ldr	r2, [r7, #4]
20000e66:	f642 3300 	movw	r3, #11008	; 0x2b00
20000e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e6e:	429a      	cmp	r2, r3
20000e70:	d007      	beq.n	20000e82 <MSS_I2C_init+0x32>
20000e72:	687a      	ldr	r2, [r7, #4]
20000e74:	f642 3344 	movw	r3, #11076	; 0x2b44
20000e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e7c:	429a      	cmp	r2, r3
20000e7e:	d000      	beq.n	20000e82 <MSS_I2C_init+0x32>
20000e80:	be00      	bkpt	0x0000
    
    if ( this_i2c == &g_mss_i2c0 )
20000e82:	687a      	ldr	r2, [r7, #4]
20000e84:	f642 3300 	movw	r3, #11008	; 0x2b00
20000e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e8c:	429a      	cmp	r2, r3
20000e8e:	d12c      	bne.n	20000eea <MSS_I2C_init+0x9a>
    {
        this_i2c->irqn = I2C0_IRQn;
20000e90:	687b      	ldr	r3, [r7, #4]
20000e92:	f04f 020e 	mov.w	r2, #14
20000e96:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
20000e98:	687a      	ldr	r2, [r7, #4]
20000e9a:	f242 0300 	movw	r3, #8192	; 0x2000
20000e9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000ea2:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
20000ea4:	687a      	ldr	r2, [r7, #4]
20000ea6:	f240 0300 	movw	r3, #0
20000eaa:	f2c4 2304 	movt	r3, #16900	; 0x4204
20000eae:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
20000eb0:	f242 0300 	movw	r3, #8192	; 0x2000
20000eb4:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000eb8:	f242 0200 	movw	r2, #8192	; 0x2000
20000ebc:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000ec0:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20000ec6:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
20000ec8:	f04f 000e 	mov.w	r0, #14
20000ecc:	f7ff ffa2 	bl	20000e14 <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
20000ed0:	f242 0300 	movw	r3, #8192	; 0x2000
20000ed4:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000ed8:	f242 0200 	movw	r2, #8192	; 0x2000
20000edc:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000ee0:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20000ee6:	631a      	str	r2, [r3, #48]	; 0x30
20000ee8:	e02b      	b.n	20000f42 <MSS_I2C_init+0xf2>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20000eea:	687b      	ldr	r3, [r7, #4]
20000eec:	f04f 0211 	mov.w	r2, #17
20000ef0:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
20000ef2:	687a      	ldr	r2, [r7, #4]
20000ef4:	f242 0300 	movw	r3, #8192	; 0x2000
20000ef8:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000efc:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20000efe:	687a      	ldr	r2, [r7, #4]
20000f00:	f240 0300 	movw	r3, #0
20000f04:	f2c4 2324 	movt	r3, #16932	; 0x4224
20000f08:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
20000f0a:	f242 0300 	movw	r3, #8192	; 0x2000
20000f0e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000f12:	f242 0200 	movw	r2, #8192	; 0x2000
20000f16:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000f1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000f1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20000f20:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
20000f22:	f04f 0011 	mov.w	r0, #17
20000f26:	f7ff ff75 	bl	20000e14 <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
20000f2a:	f242 0300 	movw	r3, #8192	; 0x2000
20000f2e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000f32:	f242 0200 	movw	r2, #8192	; 0x2000
20000f36:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000f3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000f3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20000f40:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
	this_i2c->transaction = NO_TRANSACTION;
20000f42:	687b      	ldr	r3, [r7, #4]
20000f44:	f04f 0200 	mov.w	r2, #0
20000f48:	721a      	strb	r2, [r3, #8]
	
	this_i2c->ser_address = ser_address;
20000f4a:	78fa      	ldrb	r2, [r7, #3]
20000f4c:	687b      	ldr	r3, [r7, #4]
20000f4e:	601a      	str	r2, [r3, #0]
	
	this_i2c->tx_buffer = 0;
20000f50:	687b      	ldr	r3, [r7, #4]
20000f52:	f04f 0200 	mov.w	r2, #0
20000f56:	61da      	str	r2, [r3, #28]
	this_i2c->tx_size = 0;
20000f58:	687b      	ldr	r3, [r7, #4]
20000f5a:	f04f 0200 	mov.w	r2, #0
20000f5e:	621a      	str	r2, [r3, #32]
	this_i2c->tx_idx = 0;
20000f60:	687b      	ldr	r3, [r7, #4]
20000f62:	f04f 0200 	mov.w	r2, #0
20000f66:	625a      	str	r2, [r3, #36]	; 0x24
	
	this_i2c->rx_buffer = 0;
20000f68:	687b      	ldr	r3, [r7, #4]
20000f6a:	f04f 0200 	mov.w	r2, #0
20000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
	this_i2c->rx_size = 0;
20000f70:	687b      	ldr	r3, [r7, #4]
20000f72:	f04f 0200 	mov.w	r2, #0
20000f76:	631a      	str	r2, [r3, #48]	; 0x30
	this_i2c->rx_idx = 0;
20000f78:	687b      	ldr	r3, [r7, #4]
20000f7a:	f04f 0200 	mov.w	r2, #0
20000f7e:	635a      	str	r2, [r3, #52]	; 0x34
	
    this_i2c->status = MSS_I2C_SUCCESS;
20000f80:	687b      	ldr	r3, [r7, #4]
20000f82:	f04f 0200 	mov.w	r2, #0
20000f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
	this_i2c->random_read_addr = 0;
20000f8a:	687b      	ldr	r3, [r7, #4]
20000f8c:	f04f 0200 	mov.w	r2, #0
20000f90:	60da      	str	r2, [r3, #12]
	
	this_i2c->slave_write_handler = 0;
20000f92:	687b      	ldr	r3, [r7, #4]
20000f94:	f04f 0200 	mov.w	r2, #0
20000f98:	641a      	str	r2, [r3, #64]	; 0x40
	this_i2c->slave_mem_offset_length = 0;
20000f9a:	687b      	ldr	r3, [r7, #4]
20000f9c:	f04f 0200 	mov.w	r2, #0
20000fa0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01; /* set enable bit */
20000fa2:	687b      	ldr	r3, [r7, #4]
20000fa4:	699b      	ldr	r3, [r3, #24]
20000fa6:	f04f 0201 	mov.w	r2, #1
20000faa:	619a      	str	r2, [r3, #24]
    this_i2c->hw_reg_bit->CTRL_CR2 = (clock_speed >> 2) & 0x01;
20000fac:	687b      	ldr	r3, [r7, #4]
20000fae:	699b      	ldr	r3, [r3, #24]
20000fb0:	68fa      	ldr	r2, [r7, #12]
20000fb2:	ea4f 0292 	mov.w	r2, r2, lsr #2
20000fb6:	f002 0201 	and.w	r2, r2, #1
20000fba:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (clock_speed >> 1) & 0x01;
20000fbc:	687b      	ldr	r3, [r7, #4]
20000fbe:	699b      	ldr	r3, [r3, #24]
20000fc0:	68fa      	ldr	r2, [r7, #12]
20000fc2:	ea4f 0252 	mov.w	r2, r2, lsr #1
20000fc6:	f002 0201 	and.w	r2, r2, #1
20000fca:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = clock_speed & 0x01;
20000fcc:	687b      	ldr	r3, [r7, #4]
20000fce:	699b      	ldr	r3, [r3, #24]
20000fd0:	68fa      	ldr	r2, [r7, #12]
20000fd2:	f002 0201 	and.w	r2, r2, #1
20000fd6:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = this_i2c->ser_address;
20000fd8:	687b      	ldr	r3, [r7, #4]
20000fda:	695b      	ldr	r3, [r3, #20]
20000fdc:	687a      	ldr	r2, [r7, #4]
20000fde:	6812      	ldr	r2, [r2, #0]
20000fe0:	b2d2      	uxtb	r2, r2
20000fe2:	731a      	strb	r2, [r3, #12]
}
20000fe4:	f107 0710 	add.w	r7, r7, #16
20000fe8:	46bd      	mov	sp, r7
20000fea:	bd80      	pop	{r7, pc}

20000fec <MSS_I2C_write>:
	uint8_t serial_addr,
	const uint8_t * write_buffer,
	uint16_t write_size,
    uint8_t options
)
{
20000fec:	b580      	push	{r7, lr}
20000fee:	b086      	sub	sp, #24
20000ff0:	af00      	add	r7, sp, #0
20000ff2:	60f8      	str	r0, [r7, #12]
20000ff4:	607a      	str	r2, [r7, #4]
20000ff6:	460a      	mov	r2, r1
20000ff8:	72fa      	strb	r2, [r7, #11]
20000ffa:	807b      	strh	r3, [r7, #2]
    volatile uint8_t stat_ctrl;
    uint8_t serial_interrupt;
    
	uint32_t primask;

    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000ffc:	68fa      	ldr	r2, [r7, #12]
20000ffe:	f642 3300 	movw	r3, #11008	; 0x2b00
20001002:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001006:	429a      	cmp	r2, r3
20001008:	d007      	beq.n	2000101a <MSS_I2C_write+0x2e>
2000100a:	68fa      	ldr	r2, [r7, #12]
2000100c:	f642 3344 	movw	r3, #11076	; 0x2b44
20001010:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001014:	429a      	cmp	r2, r3
20001016:	d000      	beq.n	2000101a <MSS_I2C_write+0x2e>
20001018:	be00      	bkpt	0x0000

	primask = disable_interrupts();
2000101a:	f000 fc4b 	bl	200018b4 <disable_interrupts>
2000101e:	4603      	mov	r3, r0
20001020:	617b      	str	r3, [r7, #20]

	this_i2c->transaction = MASTER_WRITE_TRANSACTION;
20001022:	68fb      	ldr	r3, [r7, #12]
20001024:	f04f 0201 	mov.w	r2, #1
20001028:	721a      	strb	r2, [r3, #8]
	
	this_i2c->target_addr = serial_addr;
2000102a:	7afa      	ldrb	r2, [r7, #11]
2000102c:	68fb      	ldr	r3, [r7, #12]
2000102e:	605a      	str	r2, [r3, #4]
	this_i2c->dir = WRITE_DIR;
20001030:	68fb      	ldr	r3, [r7, #12]
20001032:	f04f 0200 	mov.w	r2, #0
20001036:	629a      	str	r2, [r3, #40]	; 0x28
	this_i2c->tx_buffer = write_buffer;
20001038:	68fb      	ldr	r3, [r7, #12]
2000103a:	687a      	ldr	r2, [r7, #4]
2000103c:	61da      	str	r2, [r3, #28]
	this_i2c->tx_size = write_size;
2000103e:	887a      	ldrh	r2, [r7, #2]
20001040:	68fb      	ldr	r3, [r7, #12]
20001042:	621a      	str	r2, [r3, #32]
	this_i2c->tx_idx = 0;
20001044:	68fb      	ldr	r3, [r7, #12]
20001046:	f04f 0200 	mov.w	r2, #0
2000104a:	625a      	str	r2, [r3, #36]	; 0x24
    
    this_i2c->status = MSS_I2C_IN_PROGRESS;
2000104c:	68fb      	ldr	r3, [r7, #12]
2000104e:	f04f 0201 	mov.w	r2, #1
20001052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    this_i2c->options = options;
20001056:	68fb      	ldr	r3, [r7, #12]
20001058:	f897 2020 	ldrb.w	r2, [r7, #32]
2000105c:	741a      	strb	r2, [r3, #16]

    /* Clear interrupts if required (depends on repeated starts).*/
    serial_interrupt = this_i2c->hw_reg_bit->CTRL_SI;
2000105e:	68fb      	ldr	r3, [r7, #12]
20001060:	699b      	ldr	r3, [r3, #24]
20001062:	68db      	ldr	r3, [r3, #12]
20001064:	74fb      	strb	r3, [r7, #19]
    this_i2c->hw_reg_bit->CTRL_STA = 0x01;
20001066:	68fb      	ldr	r3, [r7, #12]
20001068:	699b      	ldr	r3, [r3, #24]
2000106a:	f04f 0201 	mov.w	r2, #1
2000106e:	615a      	str	r2, [r3, #20]
    
    if ( serial_interrupt != 0 )
20001070:	7cfb      	ldrb	r3, [r7, #19]
20001072:	2b00      	cmp	r3, #0
20001074:	d00a      	beq.n	2000108c <MSS_I2C_write+0xa0>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0x00;
20001076:	68fb      	ldr	r3, [r7, #12]
20001078:	699b      	ldr	r3, [r3, #24]
2000107a:	f04f 0200 	mov.w	r2, #0
2000107e:	60da      	str	r2, [r3, #12]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20001080:	68fb      	ldr	r3, [r7, #12]
20001082:	8a5b      	ldrh	r3, [r3, #18]
20001084:	b21b      	sxth	r3, r3
20001086:	4618      	mov	r0, r3
20001088:	f7ff fec4 	bl	20000e14 <NVIC_ClearPendingIRQ>
    }
    
    stat_ctrl = this_i2c->hw_reg->STATUS;
2000108c:	68fb      	ldr	r3, [r7, #12]
2000108e:	695b      	ldr	r3, [r3, #20]
20001090:	791b      	ldrb	r3, [r3, #4]
20001092:	74bb      	strb	r3, [r7, #18]
    
    NVIC_EnableIRQ( this_i2c->irqn );
20001094:	68fb      	ldr	r3, [r7, #12]
20001096:	8a5b      	ldrh	r3, [r3, #18]
20001098:	b21b      	sxth	r3, r3
2000109a:	4618      	mov	r0, r3
2000109c:	f7ff fe80 	bl	20000da0 <NVIC_EnableIRQ>
    
    restore_interrupts( primask );
200010a0:	6978      	ldr	r0, [r7, #20]
200010a2:	f000 fc15 	bl	200018d0 <restore_interrupts>
}
200010a6:	f107 0718 	add.w	r7, r7, #24
200010aa:	46bd      	mov	sp, r7
200010ac:	bd80      	pop	{r7, pc}
200010ae:	bf00      	nop

200010b0 <MSS_I2C_read>:
	uint8_t serial_addr,
	uint8_t * read_buffer,
	uint16_t read_size,
    uint8_t options
)
{
200010b0:	b580      	push	{r7, lr}
200010b2:	b088      	sub	sp, #32
200010b4:	af00      	add	r7, sp, #0
200010b6:	60f8      	str	r0, [r7, #12]
200010b8:	607a      	str	r2, [r7, #4]
200010ba:	460a      	mov	r2, r1
200010bc:	72fa      	strb	r2, [r7, #11]
200010be:	807b      	strh	r3, [r7, #2]
	uint32_t primask;
	
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200010c0:	68fa      	ldr	r2, [r7, #12]
200010c2:	f642 3300 	movw	r3, #11008	; 0x2b00
200010c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010ca:	429a      	cmp	r2, r3
200010cc:	d007      	beq.n	200010de <MSS_I2C_read+0x2e>
200010ce:	68fa      	ldr	r2, [r7, #12]
200010d0:	f642 3344 	movw	r3, #11076	; 0x2b44
200010d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010d8:	429a      	cmp	r2, r3
200010da:	d000      	beq.n	200010de <MSS_I2C_read+0x2e>
200010dc:	be00      	bkpt	0x0000

	if ( read_size > 0 )
200010de:	887b      	ldrh	r3, [r7, #2]
200010e0:	2b00      	cmp	r3, #0
200010e2:	d045      	beq.n	20001170 <MSS_I2C_read+0xc0>
	{
        volatile uint8_t stat_ctrl;
        uint8_t serial_interrupt;
        
		primask = disable_interrupts();
200010e4:	f000 fbe6 	bl	200018b4 <disable_interrupts>
200010e8:	4603      	mov	r3, r0
200010ea:	61bb      	str	r3, [r7, #24]
		
		this_i2c->transaction = MASTER_READ_TRANSACTION;
200010ec:	68fb      	ldr	r3, [r7, #12]
200010ee:	f04f 0202 	mov.w	r2, #2
200010f2:	721a      	strb	r2, [r3, #8]
		
		this_i2c->target_addr = serial_addr;
200010f4:	7afa      	ldrb	r2, [r7, #11]
200010f6:	68fb      	ldr	r3, [r7, #12]
200010f8:	605a      	str	r2, [r3, #4]
		this_i2c->dir = READ_DIR;
200010fa:	68fb      	ldr	r3, [r7, #12]
200010fc:	f04f 0201 	mov.w	r2, #1
20001100:	629a      	str	r2, [r3, #40]	; 0x28
		this_i2c->rx_buffer = read_buffer;
20001102:	68fb      	ldr	r3, [r7, #12]
20001104:	687a      	ldr	r2, [r7, #4]
20001106:	62da      	str	r2, [r3, #44]	; 0x2c
		this_i2c->rx_size = read_size;
20001108:	887a      	ldrh	r2, [r7, #2]
2000110a:	68fb      	ldr	r3, [r7, #12]
2000110c:	631a      	str	r2, [r3, #48]	; 0x30
		this_i2c->rx_idx = 0;
2000110e:	68fb      	ldr	r3, [r7, #12]
20001110:	f04f 0200 	mov.w	r2, #0
20001114:	635a      	str	r2, [r3, #52]	; 0x34
        
        this_i2c->status = MSS_I2C_IN_PROGRESS;
20001116:	68fb      	ldr	r3, [r7, #12]
20001118:	f04f 0201 	mov.w	r2, #1
2000111c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        this_i2c->options = options;
20001120:	68fb      	ldr	r3, [r7, #12]
20001122:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
20001126:	741a      	strb	r2, [r3, #16]

        /* Clear interrupts if required (depends on repeated starts).*/		
        serial_interrupt = this_i2c->hw_reg_bit->CTRL_SI;
20001128:	68fb      	ldr	r3, [r7, #12]
2000112a:	699b      	ldr	r3, [r3, #24]
2000112c:	68db      	ldr	r3, [r3, #12]
2000112e:	77fb      	strb	r3, [r7, #31]
        this_i2c->hw_reg_bit->CTRL_STA = 0x01;
20001130:	68fb      	ldr	r3, [r7, #12]
20001132:	699b      	ldr	r3, [r3, #24]
20001134:	f04f 0201 	mov.w	r2, #1
20001138:	615a      	str	r2, [r3, #20]
        
        if ( serial_interrupt != 0 )
2000113a:	7ffb      	ldrb	r3, [r7, #31]
2000113c:	2b00      	cmp	r3, #0
2000113e:	d00a      	beq.n	20001156 <MSS_I2C_read+0xa6>
        {
            this_i2c->hw_reg_bit->CTRL_SI = 0x00;
20001140:	68fb      	ldr	r3, [r7, #12]
20001142:	699b      	ldr	r3, [r3, #24]
20001144:	f04f 0200 	mov.w	r2, #0
20001148:	60da      	str	r2, [r3, #12]
            NVIC_ClearPendingIRQ( this_i2c->irqn );
2000114a:	68fb      	ldr	r3, [r7, #12]
2000114c:	8a5b      	ldrh	r3, [r3, #18]
2000114e:	b21b      	sxth	r3, r3
20001150:	4618      	mov	r0, r3
20001152:	f7ff fe5f 	bl	20000e14 <NVIC_ClearPendingIRQ>
        }
        
        stat_ctrl = this_i2c->hw_reg->STATUS;
20001156:	68fb      	ldr	r3, [r7, #12]
20001158:	695b      	ldr	r3, [r3, #20]
2000115a:	791b      	ldrb	r3, [r3, #4]
2000115c:	75fb      	strb	r3, [r7, #23]
        
        NVIC_EnableIRQ( this_i2c->irqn );
2000115e:	68fb      	ldr	r3, [r7, #12]
20001160:	8a5b      	ldrh	r3, [r3, #18]
20001162:	b21b      	sxth	r3, r3
20001164:	4618      	mov	r0, r3
20001166:	f7ff fe1b 	bl	20000da0 <NVIC_EnableIRQ>
        
        restore_interrupts( primask );
2000116a:	69b8      	ldr	r0, [r7, #24]
2000116c:	f000 fbb0 	bl	200018d0 <restore_interrupts>
	}
}
20001170:	f107 0720 	add.w	r7, r7, #32
20001174:	46bd      	mov	sp, r7
20001176:	bd80      	pop	{r7, pc}

20001178 <MSS_I2C_wait_complete>:
 */
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c
)
{
20001178:	b480      	push	{r7}
2000117a:	b083      	sub	sp, #12
2000117c:	af00      	add	r7, sp, #0
2000117e:	6078      	str	r0, [r7, #4]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001180:	687a      	ldr	r2, [r7, #4]
20001182:	f642 3300 	movw	r3, #11008	; 0x2b00
20001186:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000118a:	429a      	cmp	r2, r3
2000118c:	d007      	beq.n	2000119e <MSS_I2C_wait_complete+0x26>
2000118e:	687a      	ldr	r2, [r7, #4]
20001190:	f642 3344 	movw	r3, #11076	; 0x2b44
20001194:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001198:	429a      	cmp	r2, r3
2000119a:	d000      	beq.n	2000119e <MSS_I2C_wait_complete+0x26>
2000119c:	be00      	bkpt	0x0000

    while ( this_i2c->status == MSS_I2C_IN_PROGRESS )
2000119e:	687b      	ldr	r3, [r7, #4]
200011a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
200011a4:	b2db      	uxtb	r3, r3
200011a6:	2b01      	cmp	r3, #1
200011a8:	d0f9      	beq.n	2000119e <MSS_I2C_wait_complete+0x26>
    {
        /* Wait for transaction to compltete.*/
        ;
    }
    return this_i2c->status;
200011aa:	687b      	ldr	r3, [r7, #4]
200011ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
200011b0:	b2db      	uxtb	r3, r3
}
200011b2:	4618      	mov	r0, r3
200011b4:	f107 070c 	add.w	r7, r7, #12
200011b8:	46bd      	mov	sp, r7
200011ba:	bc80      	pop	{r7}
200011bc:	4770      	bx	lr
200011be:	bf00      	nop

200011c0 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
	mss_i2c_instance_t * this_i2c
)
{
200011c0:	b580      	push	{r7, lr}
200011c2:	b084      	sub	sp, #16
200011c4:	af00      	add	r7, sp, #0
200011c6:	6078      	str	r0, [r7, #4]
	volatile uint8_t status;
	uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1;
200011c8:	f04f 0301 	mov.w	r3, #1
200011cc:	73bb      	strb	r3, [r7, #14]

    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200011ce:	687a      	ldr	r2, [r7, #4]
200011d0:	f642 3300 	movw	r3, #11008	; 0x2b00
200011d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011d8:	429a      	cmp	r2, r3
200011da:	d007      	beq.n	200011ec <mss_i2c_isr+0x2c>
200011dc:	687a      	ldr	r2, [r7, #4]
200011de:	f642 3344 	movw	r3, #11076	; 0x2b44
200011e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011e6:	429a      	cmp	r2, r3
200011e8:	d000      	beq.n	200011ec <mss_i2c_isr+0x2c>
200011ea:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
200011ec:	687b      	ldr	r3, [r7, #4]
200011ee:	695b      	ldr	r3, [r3, #20]
200011f0:	791b      	ldrb	r3, [r3, #4]
200011f2:	72fb      	strb	r3, [r7, #11]
    
	switch( status )
200011f4:	7afb      	ldrb	r3, [r7, #11]
200011f6:	b2db      	uxtb	r3, r3
200011f8:	f1a3 0308 	sub.w	r3, r3, #8
200011fc:	2bd0      	cmp	r3, #208	; 0xd0
200011fe:	f200 8348 	bhi.w	20001892 <mss_i2c_isr+0x6d2>
20001202:	a201      	add	r2, pc, #4	; (adr r2, 20001208 <mss_i2c_isr+0x48>)
20001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001208:	2000154d 	.word	0x2000154d
2000120c:	20001893 	.word	0x20001893
20001210:	20001893 	.word	0x20001893
20001214:	20001893 	.word	0x20001893
20001218:	20001893 	.word	0x20001893
2000121c:	20001893 	.word	0x20001893
20001220:	20001893 	.word	0x20001893
20001224:	20001893 	.word	0x20001893
20001228:	2000154d 	.word	0x2000154d
2000122c:	20001893 	.word	0x20001893
20001230:	20001893 	.word	0x20001893
20001234:	20001893 	.word	0x20001893
20001238:	20001893 	.word	0x20001893
2000123c:	20001893 	.word	0x20001893
20001240:	20001893 	.word	0x20001893
20001244:	20001893 	.word	0x20001893
20001248:	2000158d 	.word	0x2000158d
2000124c:	20001893 	.word	0x20001893
20001250:	20001893 	.word	0x20001893
20001254:	20001893 	.word	0x20001893
20001258:	20001893 	.word	0x20001893
2000125c:	20001893 	.word	0x20001893
20001260:	20001893 	.word	0x20001893
20001264:	20001893 	.word	0x20001893
20001268:	200015c3 	.word	0x200015c3
2000126c:	20001893 	.word	0x20001893
20001270:	20001893 	.word	0x20001893
20001274:	20001893 	.word	0x20001893
20001278:	20001893 	.word	0x20001893
2000127c:	20001893 	.word	0x20001893
20001280:	20001893 	.word	0x20001893
20001284:	20001893 	.word	0x20001893
20001288:	200015d9 	.word	0x200015d9
2000128c:	20001893 	.word	0x20001893
20001290:	20001893 	.word	0x20001893
20001294:	20001893 	.word	0x20001893
20001298:	20001893 	.word	0x20001893
2000129c:	20001893 	.word	0x20001893
200012a0:	20001893 	.word	0x20001893
200012a4:	20001893 	.word	0x20001893
200012a8:	20001657 	.word	0x20001657
200012ac:	20001893 	.word	0x20001893
200012b0:	20001893 	.word	0x20001893
200012b4:	20001893 	.word	0x20001893
200012b8:	20001893 	.word	0x20001893
200012bc:	20001893 	.word	0x20001893
200012c0:	20001893 	.word	0x20001893
200012c4:	20001893 	.word	0x20001893
200012c8:	20001581 	.word	0x20001581
200012cc:	20001893 	.word	0x20001893
200012d0:	20001893 	.word	0x20001893
200012d4:	20001893 	.word	0x20001893
200012d8:	20001893 	.word	0x20001893
200012dc:	20001893 	.word	0x20001893
200012e0:	20001893 	.word	0x20001893
200012e4:	20001893 	.word	0x20001893
200012e8:	2000166d 	.word	0x2000166d
200012ec:	20001893 	.word	0x20001893
200012f0:	20001893 	.word	0x20001893
200012f4:	20001893 	.word	0x20001893
200012f8:	20001893 	.word	0x20001893
200012fc:	20001893 	.word	0x20001893
20001300:	20001893 	.word	0x20001893
20001304:	20001893 	.word	0x20001893
20001308:	2000168d 	.word	0x2000168d
2000130c:	20001893 	.word	0x20001893
20001310:	20001893 	.word	0x20001893
20001314:	20001893 	.word	0x20001893
20001318:	20001893 	.word	0x20001893
2000131c:	20001893 	.word	0x20001893
20001320:	20001893 	.word	0x20001893
20001324:	20001893 	.word	0x20001893
20001328:	200016a3 	.word	0x200016a3
2000132c:	20001893 	.word	0x20001893
20001330:	20001893 	.word	0x20001893
20001334:	20001893 	.word	0x20001893
20001338:	20001893 	.word	0x20001893
2000133c:	20001893 	.word	0x20001893
20001340:	20001893 	.word	0x20001893
20001344:	20001893 	.word	0x20001893
20001348:	200016dd 	.word	0x200016dd
2000134c:	20001893 	.word	0x20001893
20001350:	20001893 	.word	0x20001893
20001354:	20001893 	.word	0x20001893
20001358:	20001893 	.word	0x20001893
2000135c:	20001893 	.word	0x20001893
20001360:	20001893 	.word	0x20001893
20001364:	20001893 	.word	0x20001893
20001368:	2000175b 	.word	0x2000175b
2000136c:	20001893 	.word	0x20001893
20001370:	20001893 	.word	0x20001893
20001374:	20001893 	.word	0x20001893
20001378:	20001893 	.word	0x20001893
2000137c:	20001893 	.word	0x20001893
20001380:	20001893 	.word	0x20001893
20001384:	20001893 	.word	0x20001893
20001388:	20001893 	.word	0x20001893
2000138c:	20001893 	.word	0x20001893
20001390:	20001893 	.word	0x20001893
20001394:	20001893 	.word	0x20001893
20001398:	20001893 	.word	0x20001893
2000139c:	20001893 	.word	0x20001893
200013a0:	20001893 	.word	0x20001893
200013a4:	20001893 	.word	0x20001893
200013a8:	20001893 	.word	0x20001893
200013ac:	20001893 	.word	0x20001893
200013b0:	20001893 	.word	0x20001893
200013b4:	20001893 	.word	0x20001893
200013b8:	20001893 	.word	0x20001893
200013bc:	20001893 	.word	0x20001893
200013c0:	20001893 	.word	0x20001893
200013c4:	20001893 	.word	0x20001893
200013c8:	20001893 	.word	0x20001893
200013cc:	20001893 	.word	0x20001893
200013d0:	20001893 	.word	0x20001893
200013d4:	20001893 	.word	0x20001893
200013d8:	20001893 	.word	0x20001893
200013dc:	20001893 	.word	0x20001893
200013e0:	20001893 	.word	0x20001893
200013e4:	20001893 	.word	0x20001893
200013e8:	20001775 	.word	0x20001775
200013ec:	20001893 	.word	0x20001893
200013f0:	20001893 	.word	0x20001893
200013f4:	20001893 	.word	0x20001893
200013f8:	20001893 	.word	0x20001893
200013fc:	20001893 	.word	0x20001893
20001400:	20001893 	.word	0x20001893
20001404:	20001893 	.word	0x20001893
20001408:	20001733 	.word	0x20001733
2000140c:	20001893 	.word	0x20001893
20001410:	20001893 	.word	0x20001893
20001414:	20001893 	.word	0x20001893
20001418:	20001893 	.word	0x20001893
2000141c:	20001893 	.word	0x20001893
20001420:	20001893 	.word	0x20001893
20001424:	20001893 	.word	0x20001893
20001428:	20001775 	.word	0x20001775
2000142c:	20001893 	.word	0x20001893
20001430:	20001893 	.word	0x20001893
20001434:	20001893 	.word	0x20001893
20001438:	20001893 	.word	0x20001893
2000143c:	20001893 	.word	0x20001893
20001440:	20001893 	.word	0x20001893
20001444:	20001893 	.word	0x20001893
20001448:	20001733 	.word	0x20001733
2000144c:	20001893 	.word	0x20001893
20001450:	20001893 	.word	0x20001893
20001454:	20001893 	.word	0x20001893
20001458:	20001893 	.word	0x20001893
2000145c:	20001893 	.word	0x20001893
20001460:	20001893 	.word	0x20001893
20001464:	20001893 	.word	0x20001893
20001468:	200017bf 	.word	0x200017bf
2000146c:	20001893 	.word	0x20001893
20001470:	20001893 	.word	0x20001893
20001474:	20001893 	.word	0x20001893
20001478:	20001893 	.word	0x20001893
2000147c:	20001893 	.word	0x20001893
20001480:	20001893 	.word	0x20001893
20001484:	20001893 	.word	0x20001893
20001488:	2000182d 	.word	0x2000182d
2000148c:	20001893 	.word	0x20001893
20001490:	20001893 	.word	0x20001893
20001494:	20001893 	.word	0x20001893
20001498:	20001893 	.word	0x20001893
2000149c:	20001893 	.word	0x20001893
200014a0:	20001893 	.word	0x20001893
200014a4:	20001893 	.word	0x20001893
200014a8:	2000182d 	.word	0x2000182d
200014ac:	20001893 	.word	0x20001893
200014b0:	20001893 	.word	0x20001893
200014b4:	20001893 	.word	0x20001893
200014b8:	20001893 	.word	0x20001893
200014bc:	20001893 	.word	0x20001893
200014c0:	20001893 	.word	0x20001893
200014c4:	20001893 	.word	0x20001893
200014c8:	2000182d 	.word	0x2000182d
200014cc:	20001893 	.word	0x20001893
200014d0:	20001893 	.word	0x20001893
200014d4:	20001893 	.word	0x20001893
200014d8:	20001893 	.word	0x20001893
200014dc:	20001893 	.word	0x20001893
200014e0:	20001893 	.word	0x20001893
200014e4:	20001893 	.word	0x20001893
200014e8:	20001883 	.word	0x20001883
200014ec:	20001893 	.word	0x20001893
200014f0:	20001893 	.word	0x20001893
200014f4:	20001893 	.word	0x20001893
200014f8:	20001893 	.word	0x20001893
200014fc:	20001893 	.word	0x20001893
20001500:	20001893 	.word	0x20001893
20001504:	20001893 	.word	0x20001893
20001508:	20001893 	.word	0x20001893
2000150c:	20001893 	.word	0x20001893
20001510:	20001893 	.word	0x20001893
20001514:	20001893 	.word	0x20001893
20001518:	20001893 	.word	0x20001893
2000151c:	20001893 	.word	0x20001893
20001520:	20001893 	.word	0x20001893
20001524:	20001893 	.word	0x20001893
20001528:	20001893 	.word	0x20001893
2000152c:	20001893 	.word	0x20001893
20001530:	20001893 	.word	0x20001893
20001534:	20001893 	.word	0x20001893
20001538:	20001893 	.word	0x20001893
2000153c:	20001893 	.word	0x20001893
20001540:	20001893 	.word	0x20001893
20001544:	20001893 	.word	0x20001893
20001548:	20001893 	.word	0x20001893
	{
	    /************** MASTER TRANSMITTER / RECEIVER *******************/
	  
	    case ST_START: /* start has been xmt'd */
	    case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0x0;
2000154c:	687b      	ldr	r3, [r7, #4]
2000154e:	699b      	ldr	r3, [r3, #24]
20001550:	f04f 0200 	mov.w	r2, #0
20001554:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = this_i2c->target_addr;
20001556:	687b      	ldr	r3, [r7, #4]
20001558:	695b      	ldr	r3, [r3, #20]
2000155a:	687a      	ldr	r2, [r7, #4]
2000155c:	6852      	ldr	r2, [r2, #4]
2000155e:	b2d2      	uxtb	r2, r2
20001560:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
20001562:	687b      	ldr	r3, [r7, #4]
20001564:	699b      	ldr	r3, [r3, #24]
20001566:	687a      	ldr	r2, [r7, #4]
20001568:	6a92      	ldr	r2, [r2, #40]	; 0x28
2000156a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            
	    	this_i2c->tx_idx = 0;
2000156e:	687b      	ldr	r3, [r7, #4]
20001570:	f04f 0200 	mov.w	r2, #0
20001574:	625a      	str	r2, [r3, #36]	; 0x24
	    	this_i2c->rx_idx = 0;		
20001576:	687b      	ldr	r3, [r7, #4]
20001578:	f04f 0200 	mov.w	r2, #0
2000157c:	635a      	str	r2, [r3, #52]	; 0x34
	    	break;
2000157e:	e188      	b.n	20001892 <mss_i2c_isr+0x6d2>
	    	
	    case ST_LOST_ARB:
			/* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01;
20001580:	687b      	ldr	r3, [r7, #4]
20001582:	699b      	ldr	r3, [r3, #24]
20001584:	f04f 0201 	mov.w	r2, #1
20001588:	615a      	str	r2, [r3, #20]
			break;
2000158a:	e182      	b.n	20001892 <mss_i2c_isr+0x6d2>
	    	
	    /******************* MASTER TRANSMITTER *************************/
	    case ST_SLAW_ACK:
	    	/* call address has been xmt'd with ACK, time to send data byte and increment index. */
            if ( this_i2c->tx_idx < this_i2c->tx_size )
2000158c:	687b      	ldr	r3, [r7, #4]
2000158e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20001590:	687b      	ldr	r3, [r7, #4]
20001592:	6a1b      	ldr	r3, [r3, #32]
20001594:	429a      	cmp	r2, r3
20001596:	d20d      	bcs.n	200015b4 <mss_i2c_isr+0x3f4>
            {
                /* load data byte */
                this_i2c->hw_reg->DATA = this_i2c->tx_buffer[this_i2c->tx_idx++];
20001598:	687b      	ldr	r3, [r7, #4]
2000159a:	695a      	ldr	r2, [r3, #20]
2000159c:	687b      	ldr	r3, [r7, #4]
2000159e:	69d9      	ldr	r1, [r3, #28]
200015a0:	687b      	ldr	r3, [r7, #4]
200015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200015a4:	4419      	add	r1, r3
200015a6:	7809      	ldrb	r1, [r1, #0]
200015a8:	7211      	strb	r1, [r2, #8]
200015aa:	f103 0201 	add.w	r2, r3, #1
200015ae:	687b      	ldr	r3, [r7, #4]
200015b0:	625a      	str	r2, [r3, #36]	; 0x24
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
            }
	    	break;
200015b2:	e16e      	b.n	20001892 <mss_i2c_isr+0x6d2>
                /* load data byte */
                this_i2c->hw_reg->DATA = this_i2c->tx_buffer[this_i2c->tx_idx++];
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
200015b4:	687b      	ldr	r3, [r7, #4]
200015b6:	8a5b      	ldrh	r3, [r3, #18]
200015b8:	b21b      	sxth	r3, r3
200015ba:	4618      	mov	r0, r3
200015bc:	f7ff fc0c 	bl	20000dd8 <NVIC_DisableIRQ>
            }
	    	break;
200015c0:	e167      	b.n	20001892 <mss_i2c_isr+0x6d2>
	    	
	    case ST_SLAW_NACK:
	    	/* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01;
200015c2:	687b      	ldr	r3, [r7, #4]
200015c4:	699b      	ldr	r3, [r3, #24]
200015c6:	f04f 0201 	mov.w	r2, #1
200015ca:	611a      	str	r2, [r3, #16]
            this_i2c->status = MSS_I2C_FAILED;
200015cc:	687b      	ldr	r3, [r7, #4]
200015ce:	f04f 0202 	mov.w	r2, #2
200015d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
200015d6:	e15c      	b.n	20001892 <mss_i2c_isr+0x6d2>
			
	    case ST_TX_DATA_ACK:
			/* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
			if (this_i2c->tx_idx < this_i2c->tx_size)
200015d8:	687b      	ldr	r3, [r7, #4]
200015da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
200015dc:	687b      	ldr	r3, [r7, #4]
200015de:	6a1b      	ldr	r3, [r3, #32]
200015e0:	429a      	cmp	r2, r3
200015e2:	d20d      	bcs.n	20001600 <mss_i2c_isr+0x440>
			{	
                this_i2c->hw_reg->DATA = this_i2c->tx_buffer[this_i2c->tx_idx++];
200015e4:	687b      	ldr	r3, [r7, #4]
200015e6:	695a      	ldr	r2, [r3, #20]
200015e8:	687b      	ldr	r3, [r7, #4]
200015ea:	69d9      	ldr	r1, [r3, #28]
200015ec:	687b      	ldr	r3, [r7, #4]
200015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200015f0:	4419      	add	r1, r3
200015f2:	7809      	ldrb	r1, [r1, #0]
200015f4:	7211      	strb	r1, [r2, #8]
200015f6:	f103 0201 	add.w	r2, r3, #1
200015fa:	687b      	ldr	r3, [r7, #4]
200015fc:	625a      	str	r2, [r3, #36]	; 0x24
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0;
                }
                this_i2c->status = MSS_I2C_SUCCESS;
			}
			break;
200015fe:	e148      	b.n	20001892 <mss_i2c_isr+0x6d2>
			/* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
			if (this_i2c->tx_idx < this_i2c->tx_size)
			{	
                this_i2c->hw_reg->DATA = this_i2c->tx_buffer[this_i2c->tx_idx++];
			}
			else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20001600:	687b      	ldr	r3, [r7, #4]
20001602:	7a1b      	ldrb	r3, [r3, #8]
20001604:	2b03      	cmp	r3, #3
20001606:	d109      	bne.n	2000161c <mss_i2c_isr+0x45c>
			{
				/* We are finished sending the address offset part of a random read transaction.
				 * It is is time to send a restart in order to change direction. */
				 this_i2c->dir = READ_DIR;
20001608:	687b      	ldr	r3, [r7, #4]
2000160a:	f04f 0201 	mov.w	r2, #1
2000160e:	629a      	str	r2, [r3, #40]	; 0x28
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01;
20001610:	687b      	ldr	r3, [r7, #4]
20001612:	699b      	ldr	r3, [r3, #24]
20001614:	f04f 0201 	mov.w	r2, #1
20001618:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0;
                }
                this_i2c->status = MSS_I2C_SUCCESS;
			}
			break;
2000161a:	e13a      	b.n	20001892 <mss_i2c_isr+0x6d2>
				 this_i2c->dir = READ_DIR;
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01;
			}
			else /* done sending. let's stop */
			{
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS; 
2000161c:	687b      	ldr	r3, [r7, #4]
2000161e:	7c1b      	ldrb	r3, [r3, #16]
20001620:	f003 0301 	and.w	r3, r3, #1
20001624:	737b      	strb	r3, [r7, #13]
                if ( hold_bus == 0 )
20001626:	7b7b      	ldrb	r3, [r7, #13]
20001628:	2b00      	cmp	r3, #0
2000162a:	d105      	bne.n	20001638 <mss_i2c_isr+0x478>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01; /*xmt stop condition */
2000162c:	687b      	ldr	r3, [r7, #4]
2000162e:	699b      	ldr	r3, [r3, #24]
20001630:	f04f 0201 	mov.w	r2, #1
20001634:	611a      	str	r2, [r3, #16]
20001636:	e008      	b.n	2000164a <mss_i2c_isr+0x48a>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
20001638:	687b      	ldr	r3, [r7, #4]
2000163a:	8a5b      	ldrh	r3, [r3, #18]
2000163c:	b21b      	sxth	r3, r3
2000163e:	4618      	mov	r0, r3
20001640:	f7ff fbca 	bl	20000dd8 <NVIC_DisableIRQ>
                    clear_irq = 0;
20001644:	f04f 0300 	mov.w	r3, #0
20001648:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->status = MSS_I2C_SUCCESS;
2000164a:	687b      	ldr	r3, [r7, #4]
2000164c:	f04f 0200 	mov.w	r2, #0
20001650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			}
			break;
20001654:	e11d      	b.n	20001892 <mss_i2c_isr+0x6d2>
            /* data byte SENT, ACK to be received
		     * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01;  
20001656:	687b      	ldr	r3, [r7, #4]
20001658:	699b      	ldr	r3, [r3, #24]
2000165a:	f04f 0201 	mov.w	r2, #1
2000165e:	611a      	str	r2, [r3, #16]
            this_i2c->status = MSS_I2C_FAILED;
20001660:	687b      	ldr	r3, [r7, #4]
20001662:	f04f 0202 	mov.w	r2, #2
20001666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		    break;
2000166a:	e112      	b.n	20001892 <mss_i2c_isr+0x6d2>
	  /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
		case ST_SLAR_ACK: /* SLA+R tx'ed. */
			/* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
			 * the next byte is the last byte of the read transaction.
             */
			if( this_i2c->rx_size > 1 )
2000166c:	687b      	ldr	r3, [r7, #4]
2000166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001670:	2b01      	cmp	r3, #1
20001672:	d905      	bls.n	20001680 <mss_i2c_isr+0x4c0>
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x01;
20001674:	687b      	ldr	r3, [r7, #4]
20001676:	699b      	ldr	r3, [r3, #24]
20001678:	f04f 0201 	mov.w	r2, #1
2000167c:	609a      	str	r2, [r3, #8]
			}
			else
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
			}
			break;
2000167e:	e108      	b.n	20001892 <mss_i2c_isr+0x6d2>
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x01;
			}
			else
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
20001680:	687b      	ldr	r3, [r7, #4]
20001682:	699b      	ldr	r3, [r3, #24]
20001684:	f04f 0200 	mov.w	r2, #0
20001688:	609a      	str	r2, [r3, #8]
			}
			break;
2000168a:	e102      	b.n	20001892 <mss_i2c_isr+0x6d2>
			
		case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01;
2000168c:	687b      	ldr	r3, [r7, #4]
2000168e:	699b      	ldr	r3, [r3, #24]
20001690:	f04f 0201 	mov.w	r2, #1
20001694:	611a      	str	r2, [r3, #16]
            this_i2c->status = MSS_I2C_FAILED;
20001696:	687b      	ldr	r3, [r7, #4]
20001698:	f04f 0202 	mov.w	r2, #2
2000169c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
200016a0:	e0f7      	b.n	20001892 <mss_i2c_isr+0x6d2>
	      
		case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
			/* First, get the data */
            this_i2c->rx_buffer[this_i2c->rx_idx++] = this_i2c->hw_reg->DATA;
200016a2:	687b      	ldr	r3, [r7, #4]
200016a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200016a6:	687b      	ldr	r3, [r7, #4]
200016a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200016aa:	441a      	add	r2, r3
200016ac:	6879      	ldr	r1, [r7, #4]
200016ae:	6949      	ldr	r1, [r1, #20]
200016b0:	7a09      	ldrb	r1, [r1, #8]
200016b2:	b2c9      	uxtb	r1, r1
200016b4:	7011      	strb	r1, [r2, #0]
200016b6:	f103 0201 	add.w	r2, r3, #1
200016ba:	687b      	ldr	r3, [r7, #4]
200016bc:	635a      	str	r2, [r3, #52]	; 0x34

			if( this_i2c->rx_idx >= this_i2c->rx_size - 1)
200016be:	687b      	ldr	r3, [r7, #4]
200016c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200016c2:	687b      	ldr	r3, [r7, #4]
200016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200016c6:	f103 33ff 	add.w	r3, r3, #4294967295
200016ca:	429a      	cmp	r2, r3
200016cc:	f0c0 80de 	bcc.w	2000188c <mss_i2c_isr+0x6cc>
			{
				/* If we're at the second last byte, let's set AA to 0 so
				 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
200016d0:	687b      	ldr	r3, [r7, #4]
200016d2:	699b      	ldr	r3, [r3, #24]
200016d4:	f04f 0200 	mov.w	r2, #0
200016d8:	609a      	str	r2, [r3, #8]
			}
			break;
200016da:	e0da      	b.n	20001892 <mss_i2c_isr+0x6d2>
			
	    case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->rx_buffer[this_i2c->rx_idx++] = this_i2c->hw_reg->DATA;
200016dc:	687b      	ldr	r3, [r7, #4]
200016de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200016e0:	687b      	ldr	r3, [r7, #4]
200016e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200016e4:	441a      	add	r2, r3
200016e6:	6879      	ldr	r1, [r7, #4]
200016e8:	6949      	ldr	r1, [r1, #20]
200016ea:	7a09      	ldrb	r1, [r1, #8]
200016ec:	b2c9      	uxtb	r1, r1
200016ee:	7011      	strb	r1, [r2, #0]
200016f0:	f103 0201 	add.w	r2, r3, #1
200016f4:	687b      	ldr	r3, [r7, #4]
200016f6:	635a      	str	r2, [r3, #52]	; 0x34
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
200016f8:	687b      	ldr	r3, [r7, #4]
200016fa:	7c1b      	ldrb	r3, [r3, #16]
200016fc:	f003 0301 	and.w	r3, r3, #1
20001700:	737b      	strb	r3, [r7, #13]
            if ( hold_bus == 0 )
20001702:	7b7b      	ldrb	r3, [r7, #13]
20001704:	2b00      	cmp	r3, #0
20001706:	d105      	bne.n	20001714 <mss_i2c_isr+0x554>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01;  /*xmt stop condition */
20001708:	687b      	ldr	r3, [r7, #4]
2000170a:	699b      	ldr	r3, [r3, #24]
2000170c:	f04f 0201 	mov.w	r2, #1
20001710:	611a      	str	r2, [r3, #16]
20001712:	e008      	b.n	20001726 <mss_i2c_isr+0x566>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20001714:	687b      	ldr	r3, [r7, #4]
20001716:	8a5b      	ldrh	r3, [r3, #18]
20001718:	b21b      	sxth	r3, r3
2000171a:	4618      	mov	r0, r3
2000171c:	f7ff fb5c 	bl	20000dd8 <NVIC_DisableIRQ>
                clear_irq = 0;
20001720:	f04f 0300 	mov.w	r3, #0
20001724:	73bb      	strb	r3, [r7, #14]
            }
          
            this_i2c->status = MSS_I2C_SUCCESS;
20001726:	687b      	ldr	r3, [r7, #4]
20001728:	f04f 0200 	mov.w	r2, #0
2000172c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            break;
20001730:	e0af      	b.n	20001892 <mss_i2c_isr+0x6d2>
		
		/******************** SLAVE RECEIVER **************************/
		case ST_GCA_NACK: /* NACK after, GCA addressing */
		case ST_SLA_NACK: /* Get Data, but also re-enable AA (assert ack) bit for future transmissions */
			if ( this_i2c->rx_buffer != 0 )
20001732:	687b      	ldr	r3, [r7, #4]
20001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001736:	2b00      	cmp	r3, #0
20001738:	d009      	beq.n	2000174e <mss_i2c_isr+0x58e>
			{
                this_i2c->rx_buffer[this_i2c->rx_idx] = this_i2c->hw_reg->DATA;
2000173a:	687b      	ldr	r3, [r7, #4]
2000173c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000173e:	687b      	ldr	r3, [r7, #4]
20001740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001742:	4413      	add	r3, r2
20001744:	687a      	ldr	r2, [r7, #4]
20001746:	6952      	ldr	r2, [r2, #20]
20001748:	7a12      	ldrb	r2, [r2, #8]
2000174a:	b2d2      	uxtb	r2, r2
2000174c:	701a      	strb	r2, [r3, #0]
			}
            this_i2c->hw_reg_bit->CTRL_AA = 0x01;
2000174e:	687b      	ldr	r3, [r7, #4]
20001750:	699b      	ldr	r3, [r3, #24]
20001752:	f04f 0201 	mov.w	r2, #1
20001756:	609a      	str	r2, [r3, #8]
			break;
20001758:	e09b      	b.n	20001892 <mss_i2c_isr+0x6d2>
			
		case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */
			this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
2000175a:	687b      	ldr	r3, [r7, #4]
2000175c:	f04f 0204 	mov.w	r2, #4
20001760:	721a      	strb	r2, [r3, #8]
			this_i2c->rx_idx = 0;
20001762:	687b      	ldr	r3, [r7, #4]
20001764:	f04f 0200 	mov.w	r2, #0
20001768:	635a      	str	r2, [r3, #52]	; 0x34
			this_i2c->random_read_addr = 0;
2000176a:	687b      	ldr	r3, [r7, #4]
2000176c:	f04f 0200 	mov.w	r2, #0
20001770:	60da      	str	r2, [r3, #12]
#ifndef INCLUDE_SLA_IN_RX_PAYLOAD
			/* Only break from this case if the slave address must NOT be included at the
			 * beginning of the received write data. */
			break;
20001772:	e08e      	b.n	20001892 <mss_i2c_isr+0x6d2>
#endif			
		case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
		case ST_RDATA: /* DATA received; must clear DATA register */
			if (this_i2c->rx_idx >= this_i2c->rx_size - 2)
20001774:	687b      	ldr	r3, [r7, #4]
20001776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20001778:	687b      	ldr	r3, [r7, #4]
2000177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000177c:	f1a3 0302 	sub.w	r3, r3, #2
20001780:	429a      	cmp	r2, r3
20001782:	d304      	bcc.n	2000178e <mss_i2c_isr+0x5ce>
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;   /* send a NACK when done (next reception) */
20001784:	687b      	ldr	r3, [r7, #4]
20001786:	699b      	ldr	r3, [r3, #24]
20001788:	f04f 0200 	mov.w	r2, #0
2000178c:	609a      	str	r2, [r3, #8]
			}
            data = this_i2c->hw_reg->DATA;
2000178e:	687b      	ldr	r3, [r7, #4]
20001790:	695b      	ldr	r3, [r3, #20]
20001792:	7a1b      	ldrb	r3, [r3, #8]
20001794:	733b      	strb	r3, [r7, #12]
			this_i2c->rx_buffer[this_i2c->rx_idx++] = data;
20001796:	687b      	ldr	r3, [r7, #4]
20001798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000179a:	687b      	ldr	r3, [r7, #4]
2000179c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000179e:	441a      	add	r2, r3
200017a0:	7b39      	ldrb	r1, [r7, #12]
200017a2:	7011      	strb	r1, [r2, #0]
200017a4:	f103 0201 	add.w	r2, r3, #1
200017a8:	687b      	ldr	r3, [r7, #4]
200017aa:	635a      	str	r2, [r3, #52]	; 0x34
			this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
200017ac:	687b      	ldr	r3, [r7, #4]
200017ae:	68db      	ldr	r3, [r3, #12]
200017b0:	ea4f 2203 	mov.w	r2, r3, lsl #8
200017b4:	7b3b      	ldrb	r3, [r7, #12]
200017b6:	441a      	add	r2, r3
200017b8:	687b      	ldr	r3, [r7, #4]
200017ba:	60da      	str	r2, [r3, #12]

			break;
200017bc:	e069      	b.n	20001892 <mss_i2c_isr+0x6d2>
			/* STOP or repeated START occured. */
			/* We cannot be sure if the transaction has actually completed as
			 * this hardware state reports that either a STOP or repeated START
			 * condition has occured. We assume that this is a repeated START
			 * if the transaction was a write from the master to this point.*/
			if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
200017be:	687b      	ldr	r3, [r7, #4]
200017c0:	7a1b      	ldrb	r3, [r3, #8]
200017c2:	2b04      	cmp	r3, #4
200017c4:	d12c      	bne.n	20001820 <mss_i2c_isr+0x660>
			{
				if ( this_i2c->rx_idx == this_i2c->slave_mem_offset_length )
200017c6:	687b      	ldr	r3, [r7, #4]
200017c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200017ca:	687b      	ldr	r3, [r7, #4]
200017cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200017ce:	429a      	cmp	r2, r3
200017d0:	d108      	bne.n	200017e4 <mss_i2c_isr+0x624>
				{
					this_i2c->transaction = RANDOM_READ_SLAVE_TRANSACTION;
200017d2:	687b      	ldr	r3, [r7, #4]
200017d4:	f04f 0206 	mov.w	r2, #6
200017d8:	721a      	strb	r2, [r3, #8]
					this_i2c->tx_idx = this_i2c->random_read_addr;
200017da:	687b      	ldr	r3, [r7, #4]
200017dc:	68da      	ldr	r2, [r3, #12]
200017de:	687b      	ldr	r3, [r7, #4]
200017e0:	625a      	str	r2, [r3, #36]	; 0x24
200017e2:	e01d      	b.n	20001820 <mss_i2c_isr+0x660>
				}
				else
				{
					/* Call the slave's write transaction handler if it exists. */
					if ( this_i2c->slave_write_handler != 0 )
200017e4:	687b      	ldr	r3, [r7, #4]
200017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200017e8:	2b00      	cmp	r3, #0
200017ea:	d019      	beq.n	20001820 <mss_i2c_isr+0x660>
					{
						mss_i2c_slave_handler_ret_t h_ret;
						h_ret = this_i2c->slave_write_handler( this_i2c->rx_buffer, (uint16_t)this_i2c->rx_idx );
200017ec:	687b      	ldr	r3, [r7, #4]
200017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200017f0:	687a      	ldr	r2, [r7, #4]
200017f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
200017f4:	687a      	ldr	r2, [r7, #4]
200017f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
200017f8:	b292      	uxth	r2, r2
200017fa:	4608      	mov	r0, r1
200017fc:	4611      	mov	r1, r2
200017fe:	4798      	blx	r3
20001800:	4603      	mov	r3, r0
20001802:	73fb      	strb	r3, [r7, #15]
						if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20001804:	7bfb      	ldrb	r3, [r7, #15]
20001806:	2b00      	cmp	r3, #0
20001808:	d105      	bne.n	20001816 <mss_i2c_isr+0x656>
						{
                            this_i2c->hw_reg_bit->CTRL_AA = 0x01;
2000180a:	687b      	ldr	r3, [r7, #4]
2000180c:	699b      	ldr	r3, [r3, #24]
2000180e:	f04f 0201 	mov.w	r2, #1
20001812:	609a      	str	r2, [r3, #8]
20001814:	e004      	b.n	20001820 <mss_i2c_isr+0x660>
						}
						else
						{
                            this_i2c->hw_reg_bit->CTRL_AA = 0x00;
20001816:	687b      	ldr	r3, [r7, #4]
20001818:	699b      	ldr	r3, [r3, #24]
2000181a:	f04f 0200 	mov.w	r2, #0
2000181e:	609a      	str	r2, [r3, #8]
						}
					}
				}
			}
			/* Mark any previous master write transaction as complete. */
            this_i2c->status = MSS_I2C_SUCCESS;
20001820:	687b      	ldr	r3, [r7, #4]
20001822:	f04f 0200 	mov.w	r2, #0
20001826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
2000182a:	e032      	b.n	20001892 <mss_i2c_isr+0x6d2>
			
		/****************** SLAVE TRANSMITTER **************************/
		case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
		case ST_SLARW_LA: /* Arbitration lost, and: */
		case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
2000182c:	7afb      	ldrb	r3, [r7, #11]
2000182e:	b2db      	uxtb	r3, r3
20001830:	2ba8      	cmp	r3, #168	; 0xa8
20001832:	d107      	bne.n	20001844 <mss_i2c_isr+0x684>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20001834:	687b      	ldr	r3, [r7, #4]
20001836:	f04f 0205 	mov.w	r2, #5
2000183a:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0;
2000183c:	687b      	ldr	r3, [r7, #4]
2000183e:	f04f 0200 	mov.w	r2, #0
20001842:	60da      	str	r2, [r3, #12]
            }
			/* Load the data, and determine if it is the last one */
            this_i2c->hw_reg->DATA = this_i2c->tx_buffer[this_i2c->tx_idx++];
20001844:	687b      	ldr	r3, [r7, #4]
20001846:	695a      	ldr	r2, [r3, #20]
20001848:	687b      	ldr	r3, [r7, #4]
2000184a:	69d9      	ldr	r1, [r3, #28]
2000184c:	687b      	ldr	r3, [r7, #4]
2000184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001850:	4419      	add	r1, r3
20001852:	7809      	ldrb	r1, [r1, #0]
20001854:	7211      	strb	r1, [r2, #8]
20001856:	f103 0201 	add.w	r2, r3, #1
2000185a:	687b      	ldr	r3, [r7, #4]
2000185c:	625a      	str	r2, [r3, #36]	; 0x24
			if (this_i2c->tx_idx >= this_i2c->tx_size - 1) /* last byte? */
2000185e:	687b      	ldr	r3, [r7, #4]
20001860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20001862:	687b      	ldr	r3, [r7, #4]
20001864:	6a1b      	ldr	r3, [r3, #32]
20001866:	f103 33ff 	add.w	r3, r3, #4294967295
2000186a:	429a      	cmp	r2, r3
2000186c:	d310      	bcc.n	20001890 <mss_i2c_isr+0x6d0>
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
2000186e:	687b      	ldr	r3, [r7, #4]
20001870:	699b      	ldr	r3, [r3, #24]
20001872:	f04f 0200 	mov.w	r2, #0
20001876:	609a      	str	r2, [r3, #8]
				/* Next read transaction will result in slave's transmit buffer
				 * being sent from the first byte. */
				this_i2c->tx_idx = 0;
20001878:	687b      	ldr	r3, [r7, #4]
2000187a:	f04f 0200 	mov.w	r2, #0
2000187e:	625a      	str	r2, [r3, #36]	; 0x24
			}
			break;
20001880:	e007      	b.n	20001892 <mss_i2c_isr+0x6d2>
		
		case ST_SLAVE_RNACK:	/* Data byte has been transmitted; not-ACK has been received. */
			/* We assume that the transaction will be stopped by the master.
			 * Reset tx_idx so that a subsequent read will result in the slave's
			 * transmit buffer being sent from the first byte. */
			this_i2c->tx_idx = 0;
20001882:	687b      	ldr	r3, [r7, #4]
20001884:	f04f 0200 	mov.w	r2, #0
20001888:	625a      	str	r2, [r3, #36]	; 0x24
2000188a:	e002      	b.n	20001892 <mss_i2c_isr+0x6d2>
			{
				/* If we're at the second last byte, let's set AA to 0 so
				 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
			}
			break;
2000188c:	bf00      	nop
2000188e:	e000      	b.n	20001892 <mss_i2c_isr+0x6d2>
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
				/* Next read transaction will result in slave's transmit buffer
				 * being sent from the first byte. */
				this_i2c->tx_idx = 0;
			}
			break;
20001890:	bf00      	nop
		default:
			/* do nothing */
			break;
	}
	
    if ( clear_irq )
20001892:	7bbb      	ldrb	r3, [r7, #14]
20001894:	2b00      	cmp	r3, #0
20001896:	d004      	beq.n	200018a2 <mss_i2c_isr+0x6e2>
    {
    	/* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0x00;
20001898:	687b      	ldr	r3, [r7, #4]
2000189a:	699b      	ldr	r3, [r3, #24]
2000189c:	f04f 0200 	mov.w	r2, #0
200018a0:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
200018a2:	687b      	ldr	r3, [r7, #4]
200018a4:	695b      	ldr	r3, [r3, #20]
200018a6:	791b      	ldrb	r3, [r3, #4]
200018a8:	72fb      	strb	r3, [r7, #11]
}
200018aa:	f107 0710 	add.w	r7, r7, #16
200018ae:	46bd      	mov	sp, r7
200018b0:	bd80      	pop	{r7, pc}
200018b2:	bf00      	nop

200018b4 <disable_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
uint32_t disable_interrupts( void )
{
200018b4:	b580      	push	{r7, lr}
200018b6:	b082      	sub	sp, #8
200018b8:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
200018ba:	f000 f8d3 	bl	20001a64 <__get_PRIMASK>
200018be:	4603      	mov	r3, r0
200018c0:	607b      	str	r3, [r7, #4]
    return primask;
200018c2:	687b      	ldr	r3, [r7, #4]
}
200018c4:	4618      	mov	r0, r3
200018c6:	f107 0708 	add.w	r7, r7, #8
200018ca:	46bd      	mov	sp, r7
200018cc:	bd80      	pop	{r7, pc}
200018ce:	bf00      	nop

200018d0 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
void restore_interrupts( uint32_t primask )
{
200018d0:	b580      	push	{r7, lr}
200018d2:	b082      	sub	sp, #8
200018d4:	af00      	add	r7, sp, #0
200018d6:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
200018d8:	6878      	ldr	r0, [r7, #4]
200018da:	f000 f8d3 	bl	20001a84 <__set_PRIMASK>
}
200018de:	f107 0708 	add.w	r7, r7, #8
200018e2:	46bd      	mov	sp, r7
200018e4:	bd80      	pop	{r7, pc}
200018e6:	bf00      	nop

200018e8 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
200018e8:	4668      	mov	r0, sp
200018ea:	f020 0107 	bic.w	r1, r0, #7
200018ee:	468d      	mov	sp, r1
200018f0:	b589      	push	{r0, r3, r7, lr}
200018f2:	af00      	add	r7, sp, #0
	mss_i2c_isr( &g_mss_i2c0 );
200018f4:	f642 3000 	movw	r0, #11008	; 0x2b00
200018f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200018fc:	f7ff fc60 	bl	200011c0 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
20001900:	f04f 000e 	mov.w	r0, #14
20001904:	f7ff fa86 	bl	20000e14 <NVIC_ClearPendingIRQ>
}
20001908:	46bd      	mov	sp, r7
2000190a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000190e:	4685      	mov	sp, r0
20001910:	4770      	bx	lr
20001912:	bf00      	nop

20001914 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20001914:	4668      	mov	r0, sp
20001916:	f020 0107 	bic.w	r1, r0, #7
2000191a:	468d      	mov	sp, r1
2000191c:	b589      	push	{r0, r3, r7, lr}
2000191e:	af00      	add	r7, sp, #0
	mss_i2c_isr( &g_mss_i2c1 );
20001920:	f642 3044 	movw	r0, #11076	; 0x2b44
20001924:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001928:	f7ff fc4a 	bl	200011c0 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
2000192c:	f04f 0011 	mov.w	r0, #17
20001930:	f7ff fa70 	bl	20000e14 <NVIC_ClearPendingIRQ>
}
20001934:	46bd      	mov	sp, r7
20001936:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000193a:	4685      	mov	sp, r0
2000193c:	4770      	bx	lr
2000193e:	bf00      	nop

20001940 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001940:	b480      	push	{r7}
20001942:	b083      	sub	sp, #12
20001944:	af00      	add	r7, sp, #0
20001946:	4603      	mov	r3, r0
20001948:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000194a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000194e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001952:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001956:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000195a:	88f9      	ldrh	r1, [r7, #6]
2000195c:	f001 011f 	and.w	r1, r1, #31
20001960:	f04f 0001 	mov.w	r0, #1
20001964:	fa00 f101 	lsl.w	r1, r0, r1
20001968:	f102 0260 	add.w	r2, r2, #96	; 0x60
2000196c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001970:	f107 070c 	add.w	r7, r7, #12
20001974:	46bd      	mov	sp, r7
20001976:	bc80      	pop	{r7}
20001978:	4770      	bx	lr
2000197a:	bf00      	nop

2000197c <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
2000197c:	b580      	push	{r7, lr}
2000197e:	b082      	sub	sp, #8
20001980:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20001982:	f242 0300 	movw	r3, #8192	; 0x2000
20001986:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000198a:	f242 0200 	movw	r2, #8192	; 0x2000
2000198e:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001992:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20001998:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
2000199a:	f04f 0300 	mov.w	r3, #0
2000199e:	607b      	str	r3, [r7, #4]
200019a0:	e00e      	b.n	200019c0 <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
200019a2:	687a      	ldr	r2, [r7, #4]
200019a4:	f642 03a8 	movw	r3, #10408	; 0x28a8
200019a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200019ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200019b0:	b21b      	sxth	r3, r3
200019b2:	4618      	mov	r0, r3
200019b4:	f7ff ffc4 	bl	20001940 <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200019b8:	687b      	ldr	r3, [r7, #4]
200019ba:	f103 0301 	add.w	r3, r3, #1
200019be:	607b      	str	r3, [r7, #4]
200019c0:	687b      	ldr	r3, [r7, #4]
200019c2:	2b1f      	cmp	r3, #31
200019c4:	d9ed      	bls.n	200019a2 <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
200019c6:	f242 0300 	movw	r3, #8192	; 0x2000
200019ca:	f2ce 0304 	movt	r3, #57348	; 0xe004
200019ce:	f242 0200 	movw	r2, #8192	; 0x2000
200019d2:	f2ce 0204 	movt	r2, #57348	; 0xe004
200019d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
200019d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
200019dc:	631a      	str	r2, [r3, #48]	; 0x30
}
200019de:	f107 0708 	add.w	r7, r7, #8
200019e2:	46bd      	mov	sp, r7
200019e4:	bd80      	pop	{r7, pc}
200019e6:	bf00      	nop

200019e8 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
200019e8:	b480      	push	{r7}
200019ea:	b085      	sub	sp, #20
200019ec:	af00      	add	r7, sp, #0
200019ee:	4603      	mov	r3, r0
200019f0:	6039      	str	r1, [r7, #0]
200019f2:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
200019f4:	79fb      	ldrb	r3, [r7, #7]
200019f6:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200019f8:	68fb      	ldr	r3, [r7, #12]
200019fa:	2b1f      	cmp	r3, #31
200019fc:	d900      	bls.n	20001a00 <MSS_GPIO_config+0x18>
200019fe:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
20001a00:	68fb      	ldr	r3, [r7, #12]
20001a02:	2b1f      	cmp	r3, #31
20001a04:	d808      	bhi.n	20001a18 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20001a06:	68fa      	ldr	r2, [r7, #12]
20001a08:	f642 0328 	movw	r3, #10280	; 0x2828
20001a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001a14:	683a      	ldr	r2, [r7, #0]
20001a16:	601a      	str	r2, [r3, #0]
    }
}
20001a18:	f107 0714 	add.w	r7, r7, #20
20001a1c:	46bd      	mov	sp, r7
20001a1e:	bc80      	pop	{r7}
20001a20:	4770      	bx	lr
20001a22:	bf00      	nop

20001a24 <MSS_GPIO_set_output>:
void MSS_GPIO_set_output
(
    mss_gpio_id_t       port_id,
    uint8_t             value
)
{
20001a24:	b480      	push	{r7}
20001a26:	b085      	sub	sp, #20
20001a28:	af00      	add	r7, sp, #0
20001a2a:	4602      	mov	r2, r0
20001a2c:	460b      	mov	r3, r1
20001a2e:	71fa      	strb	r2, [r7, #7]
20001a30:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_idx = (uint32_t)port_id;
20001a32:	79fb      	ldrb	r3, [r7, #7]
20001a34:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001a36:	68fb      	ldr	r3, [r7, #12]
20001a38:	2b1f      	cmp	r3, #31
20001a3a:	d900      	bls.n	20001a3e <MSS_GPIO_set_output+0x1a>
20001a3c:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20001a3e:	68fb      	ldr	r3, [r7, #12]
20001a40:	2b1f      	cmp	r3, #31
20001a42:	d809      	bhi.n	20001a58 <MSS_GPIO_set_output+0x34>
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
20001a44:	f240 0300 	movw	r3, #0
20001a48:	f2c4 2326 	movt	r3, #16934	; 0x4226
20001a4c:	68fa      	ldr	r2, [r7, #12]
20001a4e:	79b9      	ldrb	r1, [r7, #6]
20001a50:	f502 6288 	add.w	r2, r2, #1088	; 0x440
20001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
20001a58:	f107 0714 	add.w	r7, r7, #20
20001a5c:	46bd      	mov	sp, r7
20001a5e:	bc80      	pop	{r7}
20001a60:	4770      	bx	lr
20001a62:	bf00      	nop

20001a64 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
20001a64:	b480      	push	{r7}
20001a66:	b083      	sub	sp, #12
20001a68:	af00      	add	r7, sp, #0
  uint32_t result=0;
20001a6a:	f04f 0300 	mov.w	r3, #0
20001a6e:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20001a70:	f3ef 8310 	mrs	r3, PRIMASK
20001a74:	607b      	str	r3, [r7, #4]
  return(result);
20001a76:	687b      	ldr	r3, [r7, #4]
}
20001a78:	4618      	mov	r0, r3
20001a7a:	f107 070c 	add.w	r7, r7, #12
20001a7e:	46bd      	mov	sp, r7
20001a80:	bc80      	pop	{r7}
20001a82:	4770      	bx	lr

20001a84 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
20001a84:	b480      	push	{r7}
20001a86:	b083      	sub	sp, #12
20001a88:	af00      	add	r7, sp, #0
20001a8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
20001a8c:	687b      	ldr	r3, [r7, #4]
20001a8e:	f383 8810 	msr	PRIMASK, r3
}
20001a92:	f107 070c 	add.w	r7, r7, #12
20001a96:	46bd      	mov	sp, r7
20001a98:	bc80      	pop	{r7}
20001a9a:	4770      	bx	lr

20001a9c <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20001a9c:	b480      	push	{r7}
20001a9e:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20001aa0:	46bd      	mov	sp, r7
20001aa2:	bc80      	pop	{r7}
20001aa4:	4770      	bx	lr
20001aa6:	bf00      	nop

20001aa8 <__aeabi_drsub>:
20001aa8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20001aac:	e002      	b.n	20001ab4 <__adddf3>
20001aae:	bf00      	nop

20001ab0 <__aeabi_dsub>:
20001ab0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20001ab4 <__adddf3>:
20001ab4:	b530      	push	{r4, r5, lr}
20001ab6:	ea4f 0441 	mov.w	r4, r1, lsl #1
20001aba:	ea4f 0543 	mov.w	r5, r3, lsl #1
20001abe:	ea94 0f05 	teq	r4, r5
20001ac2:	bf08      	it	eq
20001ac4:	ea90 0f02 	teqeq	r0, r2
20001ac8:	bf1f      	itttt	ne
20001aca:	ea54 0c00 	orrsne.w	ip, r4, r0
20001ace:	ea55 0c02 	orrsne.w	ip, r5, r2
20001ad2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
20001ad6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20001ada:	f000 80e2 	beq.w	20001ca2 <__adddf3+0x1ee>
20001ade:	ea4f 5454 	mov.w	r4, r4, lsr #21
20001ae2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
20001ae6:	bfb8      	it	lt
20001ae8:	426d      	neglt	r5, r5
20001aea:	dd0c      	ble.n	20001b06 <__adddf3+0x52>
20001aec:	442c      	add	r4, r5
20001aee:	ea80 0202 	eor.w	r2, r0, r2
20001af2:	ea81 0303 	eor.w	r3, r1, r3
20001af6:	ea82 0000 	eor.w	r0, r2, r0
20001afa:	ea83 0101 	eor.w	r1, r3, r1
20001afe:	ea80 0202 	eor.w	r2, r0, r2
20001b02:	ea81 0303 	eor.w	r3, r1, r3
20001b06:	2d36      	cmp	r5, #54	; 0x36
20001b08:	bf88      	it	hi
20001b0a:	bd30      	pophi	{r4, r5, pc}
20001b0c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20001b10:	ea4f 3101 	mov.w	r1, r1, lsl #12
20001b14:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20001b18:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20001b1c:	d002      	beq.n	20001b24 <__adddf3+0x70>
20001b1e:	4240      	negs	r0, r0
20001b20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20001b24:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20001b28:	ea4f 3303 	mov.w	r3, r3, lsl #12
20001b2c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
20001b30:	d002      	beq.n	20001b38 <__adddf3+0x84>
20001b32:	4252      	negs	r2, r2
20001b34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20001b38:	ea94 0f05 	teq	r4, r5
20001b3c:	f000 80a7 	beq.w	20001c8e <__adddf3+0x1da>
20001b40:	f1a4 0401 	sub.w	r4, r4, #1
20001b44:	f1d5 0e20 	rsbs	lr, r5, #32
20001b48:	db0d      	blt.n	20001b66 <__adddf3+0xb2>
20001b4a:	fa02 fc0e 	lsl.w	ip, r2, lr
20001b4e:	fa22 f205 	lsr.w	r2, r2, r5
20001b52:	1880      	adds	r0, r0, r2
20001b54:	f141 0100 	adc.w	r1, r1, #0
20001b58:	fa03 f20e 	lsl.w	r2, r3, lr
20001b5c:	1880      	adds	r0, r0, r2
20001b5e:	fa43 f305 	asr.w	r3, r3, r5
20001b62:	4159      	adcs	r1, r3
20001b64:	e00e      	b.n	20001b84 <__adddf3+0xd0>
20001b66:	f1a5 0520 	sub.w	r5, r5, #32
20001b6a:	f10e 0e20 	add.w	lr, lr, #32
20001b6e:	2a01      	cmp	r2, #1
20001b70:	fa03 fc0e 	lsl.w	ip, r3, lr
20001b74:	bf28      	it	cs
20001b76:	f04c 0c02 	orrcs.w	ip, ip, #2
20001b7a:	fa43 f305 	asr.w	r3, r3, r5
20001b7e:	18c0      	adds	r0, r0, r3
20001b80:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
20001b84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001b88:	d507      	bpl.n	20001b9a <__adddf3+0xe6>
20001b8a:	f04f 0e00 	mov.w	lr, #0
20001b8e:	f1dc 0c00 	rsbs	ip, ip, #0
20001b92:	eb7e 0000 	sbcs.w	r0, lr, r0
20001b96:	eb6e 0101 	sbc.w	r1, lr, r1
20001b9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20001b9e:	d31b      	bcc.n	20001bd8 <__adddf3+0x124>
20001ba0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20001ba4:	d30c      	bcc.n	20001bc0 <__adddf3+0x10c>
20001ba6:	0849      	lsrs	r1, r1, #1
20001ba8:	ea5f 0030 	movs.w	r0, r0, rrx
20001bac:	ea4f 0c3c 	mov.w	ip, ip, rrx
20001bb0:	f104 0401 	add.w	r4, r4, #1
20001bb4:	ea4f 5244 	mov.w	r2, r4, lsl #21
20001bb8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20001bbc:	f080 809a 	bcs.w	20001cf4 <__adddf3+0x240>
20001bc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20001bc4:	bf08      	it	eq
20001bc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20001bca:	f150 0000 	adcs.w	r0, r0, #0
20001bce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20001bd2:	ea41 0105 	orr.w	r1, r1, r5
20001bd6:	bd30      	pop	{r4, r5, pc}
20001bd8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20001bdc:	4140      	adcs	r0, r0
20001bde:	eb41 0101 	adc.w	r1, r1, r1
20001be2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20001be6:	f1a4 0401 	sub.w	r4, r4, #1
20001bea:	d1e9      	bne.n	20001bc0 <__adddf3+0x10c>
20001bec:	f091 0f00 	teq	r1, #0
20001bf0:	bf04      	itt	eq
20001bf2:	4601      	moveq	r1, r0
20001bf4:	2000      	moveq	r0, #0
20001bf6:	fab1 f381 	clz	r3, r1
20001bfa:	bf08      	it	eq
20001bfc:	3320      	addeq	r3, #32
20001bfe:	f1a3 030b 	sub.w	r3, r3, #11
20001c02:	f1b3 0220 	subs.w	r2, r3, #32
20001c06:	da0c      	bge.n	20001c22 <__adddf3+0x16e>
20001c08:	320c      	adds	r2, #12
20001c0a:	dd08      	ble.n	20001c1e <__adddf3+0x16a>
20001c0c:	f102 0c14 	add.w	ip, r2, #20
20001c10:	f1c2 020c 	rsb	r2, r2, #12
20001c14:	fa01 f00c 	lsl.w	r0, r1, ip
20001c18:	fa21 f102 	lsr.w	r1, r1, r2
20001c1c:	e00c      	b.n	20001c38 <__adddf3+0x184>
20001c1e:	f102 0214 	add.w	r2, r2, #20
20001c22:	bfd8      	it	le
20001c24:	f1c2 0c20 	rsble	ip, r2, #32
20001c28:	fa01 f102 	lsl.w	r1, r1, r2
20001c2c:	fa20 fc0c 	lsr.w	ip, r0, ip
20001c30:	bfdc      	itt	le
20001c32:	ea41 010c 	orrle.w	r1, r1, ip
20001c36:	4090      	lslle	r0, r2
20001c38:	1ae4      	subs	r4, r4, r3
20001c3a:	bfa2      	ittt	ge
20001c3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
20001c40:	4329      	orrge	r1, r5
20001c42:	bd30      	popge	{r4, r5, pc}
20001c44:	ea6f 0404 	mvn.w	r4, r4
20001c48:	3c1f      	subs	r4, #31
20001c4a:	da1c      	bge.n	20001c86 <__adddf3+0x1d2>
20001c4c:	340c      	adds	r4, #12
20001c4e:	dc0e      	bgt.n	20001c6e <__adddf3+0x1ba>
20001c50:	f104 0414 	add.w	r4, r4, #20
20001c54:	f1c4 0220 	rsb	r2, r4, #32
20001c58:	fa20 f004 	lsr.w	r0, r0, r4
20001c5c:	fa01 f302 	lsl.w	r3, r1, r2
20001c60:	ea40 0003 	orr.w	r0, r0, r3
20001c64:	fa21 f304 	lsr.w	r3, r1, r4
20001c68:	ea45 0103 	orr.w	r1, r5, r3
20001c6c:	bd30      	pop	{r4, r5, pc}
20001c6e:	f1c4 040c 	rsb	r4, r4, #12
20001c72:	f1c4 0220 	rsb	r2, r4, #32
20001c76:	fa20 f002 	lsr.w	r0, r0, r2
20001c7a:	fa01 f304 	lsl.w	r3, r1, r4
20001c7e:	ea40 0003 	orr.w	r0, r0, r3
20001c82:	4629      	mov	r1, r5
20001c84:	bd30      	pop	{r4, r5, pc}
20001c86:	fa21 f004 	lsr.w	r0, r1, r4
20001c8a:	4629      	mov	r1, r5
20001c8c:	bd30      	pop	{r4, r5, pc}
20001c8e:	f094 0f00 	teq	r4, #0
20001c92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
20001c96:	bf06      	itte	eq
20001c98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20001c9c:	3401      	addeq	r4, #1
20001c9e:	3d01      	subne	r5, #1
20001ca0:	e74e      	b.n	20001b40 <__adddf3+0x8c>
20001ca2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20001ca6:	bf18      	it	ne
20001ca8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20001cac:	d029      	beq.n	20001d02 <__adddf3+0x24e>
20001cae:	ea94 0f05 	teq	r4, r5
20001cb2:	bf08      	it	eq
20001cb4:	ea90 0f02 	teqeq	r0, r2
20001cb8:	d005      	beq.n	20001cc6 <__adddf3+0x212>
20001cba:	ea54 0c00 	orrs.w	ip, r4, r0
20001cbe:	bf04      	itt	eq
20001cc0:	4619      	moveq	r1, r3
20001cc2:	4610      	moveq	r0, r2
20001cc4:	bd30      	pop	{r4, r5, pc}
20001cc6:	ea91 0f03 	teq	r1, r3
20001cca:	bf1e      	ittt	ne
20001ccc:	2100      	movne	r1, #0
20001cce:	2000      	movne	r0, #0
20001cd0:	bd30      	popne	{r4, r5, pc}
20001cd2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
20001cd6:	d105      	bne.n	20001ce4 <__adddf3+0x230>
20001cd8:	0040      	lsls	r0, r0, #1
20001cda:	4149      	adcs	r1, r1
20001cdc:	bf28      	it	cs
20001cde:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
20001ce2:	bd30      	pop	{r4, r5, pc}
20001ce4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20001ce8:	bf3c      	itt	cc
20001cea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
20001cee:	bd30      	popcc	{r4, r5, pc}
20001cf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001cf4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20001cf8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20001cfc:	f04f 0000 	mov.w	r0, #0
20001d00:	bd30      	pop	{r4, r5, pc}
20001d02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20001d06:	bf1a      	itte	ne
20001d08:	4619      	movne	r1, r3
20001d0a:	4610      	movne	r0, r2
20001d0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
20001d10:	bf1c      	itt	ne
20001d12:	460b      	movne	r3, r1
20001d14:	4602      	movne	r2, r0
20001d16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20001d1a:	bf06      	itte	eq
20001d1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
20001d20:	ea91 0f03 	teqeq	r1, r3
20001d24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20001d28:	bd30      	pop	{r4, r5, pc}
20001d2a:	bf00      	nop

20001d2c <__aeabi_ui2d>:
20001d2c:	f090 0f00 	teq	r0, #0
20001d30:	bf04      	itt	eq
20001d32:	2100      	moveq	r1, #0
20001d34:	4770      	bxeq	lr
20001d36:	b530      	push	{r4, r5, lr}
20001d38:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001d3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001d40:	f04f 0500 	mov.w	r5, #0
20001d44:	f04f 0100 	mov.w	r1, #0
20001d48:	e750      	b.n	20001bec <__adddf3+0x138>
20001d4a:	bf00      	nop

20001d4c <__aeabi_i2d>:
20001d4c:	f090 0f00 	teq	r0, #0
20001d50:	bf04      	itt	eq
20001d52:	2100      	moveq	r1, #0
20001d54:	4770      	bxeq	lr
20001d56:	b530      	push	{r4, r5, lr}
20001d58:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001d5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001d60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
20001d64:	bf48      	it	mi
20001d66:	4240      	negmi	r0, r0
20001d68:	f04f 0100 	mov.w	r1, #0
20001d6c:	e73e      	b.n	20001bec <__adddf3+0x138>
20001d6e:	bf00      	nop

20001d70 <__aeabi_f2d>:
20001d70:	0042      	lsls	r2, r0, #1
20001d72:	ea4f 01e2 	mov.w	r1, r2, asr #3
20001d76:	ea4f 0131 	mov.w	r1, r1, rrx
20001d7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
20001d7e:	bf1f      	itttt	ne
20001d80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
20001d84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20001d88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
20001d8c:	4770      	bxne	lr
20001d8e:	f092 0f00 	teq	r2, #0
20001d92:	bf14      	ite	ne
20001d94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20001d98:	4770      	bxeq	lr
20001d9a:	b530      	push	{r4, r5, lr}
20001d9c:	f44f 7460 	mov.w	r4, #896	; 0x380
20001da0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001da4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20001da8:	e720      	b.n	20001bec <__adddf3+0x138>
20001daa:	bf00      	nop

20001dac <__aeabi_ul2d>:
20001dac:	ea50 0201 	orrs.w	r2, r0, r1
20001db0:	bf08      	it	eq
20001db2:	4770      	bxeq	lr
20001db4:	b530      	push	{r4, r5, lr}
20001db6:	f04f 0500 	mov.w	r5, #0
20001dba:	e00a      	b.n	20001dd2 <__aeabi_l2d+0x16>

20001dbc <__aeabi_l2d>:
20001dbc:	ea50 0201 	orrs.w	r2, r0, r1
20001dc0:	bf08      	it	eq
20001dc2:	4770      	bxeq	lr
20001dc4:	b530      	push	{r4, r5, lr}
20001dc6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
20001dca:	d502      	bpl.n	20001dd2 <__aeabi_l2d+0x16>
20001dcc:	4240      	negs	r0, r0
20001dce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20001dd2:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001dd6:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001dda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
20001dde:	f43f aedc 	beq.w	20001b9a <__adddf3+0xe6>
20001de2:	f04f 0203 	mov.w	r2, #3
20001de6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20001dea:	bf18      	it	ne
20001dec:	3203      	addne	r2, #3
20001dee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20001df2:	bf18      	it	ne
20001df4:	3203      	addne	r2, #3
20001df6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
20001dfa:	f1c2 0320 	rsb	r3, r2, #32
20001dfe:	fa00 fc03 	lsl.w	ip, r0, r3
20001e02:	fa20 f002 	lsr.w	r0, r0, r2
20001e06:	fa01 fe03 	lsl.w	lr, r1, r3
20001e0a:	ea40 000e 	orr.w	r0, r0, lr
20001e0e:	fa21 f102 	lsr.w	r1, r1, r2
20001e12:	4414      	add	r4, r2
20001e14:	e6c1      	b.n	20001b9a <__adddf3+0xe6>
20001e16:	bf00      	nop

20001e18 <__aeabi_dmul>:
20001e18:	b570      	push	{r4, r5, r6, lr}
20001e1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
20001e1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20001e22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20001e26:	bf1d      	ittte	ne
20001e28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20001e2c:	ea94 0f0c 	teqne	r4, ip
20001e30:	ea95 0f0c 	teqne	r5, ip
20001e34:	f000 f8de 	bleq	20001ff4 <__aeabi_dmul+0x1dc>
20001e38:	442c      	add	r4, r5
20001e3a:	ea81 0603 	eor.w	r6, r1, r3
20001e3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
20001e42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
20001e46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
20001e4a:	bf18      	it	ne
20001e4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
20001e50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20001e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20001e58:	d038      	beq.n	20001ecc <__aeabi_dmul+0xb4>
20001e5a:	fba0 ce02 	umull	ip, lr, r0, r2
20001e5e:	f04f 0500 	mov.w	r5, #0
20001e62:	fbe1 e502 	umlal	lr, r5, r1, r2
20001e66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
20001e6a:	fbe0 e503 	umlal	lr, r5, r0, r3
20001e6e:	f04f 0600 	mov.w	r6, #0
20001e72:	fbe1 5603 	umlal	r5, r6, r1, r3
20001e76:	f09c 0f00 	teq	ip, #0
20001e7a:	bf18      	it	ne
20001e7c:	f04e 0e01 	orrne.w	lr, lr, #1
20001e80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
20001e84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
20001e88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
20001e8c:	d204      	bcs.n	20001e98 <__aeabi_dmul+0x80>
20001e8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
20001e92:	416d      	adcs	r5, r5
20001e94:	eb46 0606 	adc.w	r6, r6, r6
20001e98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
20001e9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
20001ea0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20001ea4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20001ea8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
20001eac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20001eb0:	bf88      	it	hi
20001eb2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20001eb6:	d81e      	bhi.n	20001ef6 <__aeabi_dmul+0xde>
20001eb8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
20001ebc:	bf08      	it	eq
20001ebe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
20001ec2:	f150 0000 	adcs.w	r0, r0, #0
20001ec6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20001eca:	bd70      	pop	{r4, r5, r6, pc}
20001ecc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
20001ed0:	ea46 0101 	orr.w	r1, r6, r1
20001ed4:	ea40 0002 	orr.w	r0, r0, r2
20001ed8:	ea81 0103 	eor.w	r1, r1, r3
20001edc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
20001ee0:	bfc2      	ittt	gt
20001ee2:	ebd4 050c 	rsbsgt	r5, r4, ip
20001ee6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20001eea:	bd70      	popgt	{r4, r5, r6, pc}
20001eec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20001ef0:	f04f 0e00 	mov.w	lr, #0
20001ef4:	3c01      	subs	r4, #1
20001ef6:	f300 80ab 	bgt.w	20002050 <__aeabi_dmul+0x238>
20001efa:	f114 0f36 	cmn.w	r4, #54	; 0x36
20001efe:	bfde      	ittt	le
20001f00:	2000      	movle	r0, #0
20001f02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
20001f06:	bd70      	pople	{r4, r5, r6, pc}
20001f08:	f1c4 0400 	rsb	r4, r4, #0
20001f0c:	3c20      	subs	r4, #32
20001f0e:	da35      	bge.n	20001f7c <__aeabi_dmul+0x164>
20001f10:	340c      	adds	r4, #12
20001f12:	dc1b      	bgt.n	20001f4c <__aeabi_dmul+0x134>
20001f14:	f104 0414 	add.w	r4, r4, #20
20001f18:	f1c4 0520 	rsb	r5, r4, #32
20001f1c:	fa00 f305 	lsl.w	r3, r0, r5
20001f20:	fa20 f004 	lsr.w	r0, r0, r4
20001f24:	fa01 f205 	lsl.w	r2, r1, r5
20001f28:	ea40 0002 	orr.w	r0, r0, r2
20001f2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
20001f30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20001f34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20001f38:	fa21 f604 	lsr.w	r6, r1, r4
20001f3c:	eb42 0106 	adc.w	r1, r2, r6
20001f40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20001f44:	bf08      	it	eq
20001f46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20001f4a:	bd70      	pop	{r4, r5, r6, pc}
20001f4c:	f1c4 040c 	rsb	r4, r4, #12
20001f50:	f1c4 0520 	rsb	r5, r4, #32
20001f54:	fa00 f304 	lsl.w	r3, r0, r4
20001f58:	fa20 f005 	lsr.w	r0, r0, r5
20001f5c:	fa01 f204 	lsl.w	r2, r1, r4
20001f60:	ea40 0002 	orr.w	r0, r0, r2
20001f64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20001f68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20001f6c:	f141 0100 	adc.w	r1, r1, #0
20001f70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20001f74:	bf08      	it	eq
20001f76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20001f7a:	bd70      	pop	{r4, r5, r6, pc}
20001f7c:	f1c4 0520 	rsb	r5, r4, #32
20001f80:	fa00 f205 	lsl.w	r2, r0, r5
20001f84:	ea4e 0e02 	orr.w	lr, lr, r2
20001f88:	fa20 f304 	lsr.w	r3, r0, r4
20001f8c:	fa01 f205 	lsl.w	r2, r1, r5
20001f90:	ea43 0302 	orr.w	r3, r3, r2
20001f94:	fa21 f004 	lsr.w	r0, r1, r4
20001f98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20001f9c:	fa21 f204 	lsr.w	r2, r1, r4
20001fa0:	ea20 0002 	bic.w	r0, r0, r2
20001fa4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
20001fa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20001fac:	bf08      	it	eq
20001fae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20001fb2:	bd70      	pop	{r4, r5, r6, pc}
20001fb4:	f094 0f00 	teq	r4, #0
20001fb8:	d10f      	bne.n	20001fda <__aeabi_dmul+0x1c2>
20001fba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
20001fbe:	0040      	lsls	r0, r0, #1
20001fc0:	eb41 0101 	adc.w	r1, r1, r1
20001fc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20001fc8:	bf08      	it	eq
20001fca:	3c01      	subeq	r4, #1
20001fcc:	d0f7      	beq.n	20001fbe <__aeabi_dmul+0x1a6>
20001fce:	ea41 0106 	orr.w	r1, r1, r6
20001fd2:	f095 0f00 	teq	r5, #0
20001fd6:	bf18      	it	ne
20001fd8:	4770      	bxne	lr
20001fda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
20001fde:	0052      	lsls	r2, r2, #1
20001fe0:	eb43 0303 	adc.w	r3, r3, r3
20001fe4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20001fe8:	bf08      	it	eq
20001fea:	3d01      	subeq	r5, #1
20001fec:	d0f7      	beq.n	20001fde <__aeabi_dmul+0x1c6>
20001fee:	ea43 0306 	orr.w	r3, r3, r6
20001ff2:	4770      	bx	lr
20001ff4:	ea94 0f0c 	teq	r4, ip
20001ff8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20001ffc:	bf18      	it	ne
20001ffe:	ea95 0f0c 	teqne	r5, ip
20002002:	d00c      	beq.n	2000201e <__aeabi_dmul+0x206>
20002004:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002008:	bf18      	it	ne
2000200a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
2000200e:	d1d1      	bne.n	20001fb4 <__aeabi_dmul+0x19c>
20002010:	ea81 0103 	eor.w	r1, r1, r3
20002014:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002018:	f04f 0000 	mov.w	r0, #0
2000201c:	bd70      	pop	{r4, r5, r6, pc}
2000201e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002022:	bf06      	itte	eq
20002024:	4610      	moveq	r0, r2
20002026:	4619      	moveq	r1, r3
20002028:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
2000202c:	d019      	beq.n	20002062 <__aeabi_dmul+0x24a>
2000202e:	ea94 0f0c 	teq	r4, ip
20002032:	d102      	bne.n	2000203a <__aeabi_dmul+0x222>
20002034:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
20002038:	d113      	bne.n	20002062 <__aeabi_dmul+0x24a>
2000203a:	ea95 0f0c 	teq	r5, ip
2000203e:	d105      	bne.n	2000204c <__aeabi_dmul+0x234>
20002040:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
20002044:	bf1c      	itt	ne
20002046:	4610      	movne	r0, r2
20002048:	4619      	movne	r1, r3
2000204a:	d10a      	bne.n	20002062 <__aeabi_dmul+0x24a>
2000204c:	ea81 0103 	eor.w	r1, r1, r3
20002050:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002054:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20002058:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2000205c:	f04f 0000 	mov.w	r0, #0
20002060:	bd70      	pop	{r4, r5, r6, pc}
20002062:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20002066:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
2000206a:	bd70      	pop	{r4, r5, r6, pc}

2000206c <__aeabi_ddiv>:
2000206c:	b570      	push	{r4, r5, r6, lr}
2000206e:	f04f 0cff 	mov.w	ip, #255	; 0xff
20002072:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20002076:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
2000207a:	bf1d      	ittte	ne
2000207c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20002080:	ea94 0f0c 	teqne	r4, ip
20002084:	ea95 0f0c 	teqne	r5, ip
20002088:	f000 f8a7 	bleq	200021da <__aeabi_ddiv+0x16e>
2000208c:	eba4 0405 	sub.w	r4, r4, r5
20002090:	ea81 0e03 	eor.w	lr, r1, r3
20002094:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002098:	ea4f 3101 	mov.w	r1, r1, lsl #12
2000209c:	f000 8088 	beq.w	200021b0 <__aeabi_ddiv+0x144>
200020a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
200020a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
200020a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
200020ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
200020b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
200020b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
200020b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
200020bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
200020c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
200020c4:	429d      	cmp	r5, r3
200020c6:	bf08      	it	eq
200020c8:	4296      	cmpeq	r6, r2
200020ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
200020ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
200020d2:	d202      	bcs.n	200020da <__aeabi_ddiv+0x6e>
200020d4:	085b      	lsrs	r3, r3, #1
200020d6:	ea4f 0232 	mov.w	r2, r2, rrx
200020da:	1ab6      	subs	r6, r6, r2
200020dc:	eb65 0503 	sbc.w	r5, r5, r3
200020e0:	085b      	lsrs	r3, r3, #1
200020e2:	ea4f 0232 	mov.w	r2, r2, rrx
200020e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
200020ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
200020ee:	ebb6 0e02 	subs.w	lr, r6, r2
200020f2:	eb75 0e03 	sbcs.w	lr, r5, r3
200020f6:	bf22      	ittt	cs
200020f8:	1ab6      	subcs	r6, r6, r2
200020fa:	4675      	movcs	r5, lr
200020fc:	ea40 000c 	orrcs.w	r0, r0, ip
20002100:	085b      	lsrs	r3, r3, #1
20002102:	ea4f 0232 	mov.w	r2, r2, rrx
20002106:	ebb6 0e02 	subs.w	lr, r6, r2
2000210a:	eb75 0e03 	sbcs.w	lr, r5, r3
2000210e:	bf22      	ittt	cs
20002110:	1ab6      	subcs	r6, r6, r2
20002112:	4675      	movcs	r5, lr
20002114:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20002118:	085b      	lsrs	r3, r3, #1
2000211a:	ea4f 0232 	mov.w	r2, r2, rrx
2000211e:	ebb6 0e02 	subs.w	lr, r6, r2
20002122:	eb75 0e03 	sbcs.w	lr, r5, r3
20002126:	bf22      	ittt	cs
20002128:	1ab6      	subcs	r6, r6, r2
2000212a:	4675      	movcs	r5, lr
2000212c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20002130:	085b      	lsrs	r3, r3, #1
20002132:	ea4f 0232 	mov.w	r2, r2, rrx
20002136:	ebb6 0e02 	subs.w	lr, r6, r2
2000213a:	eb75 0e03 	sbcs.w	lr, r5, r3
2000213e:	bf22      	ittt	cs
20002140:	1ab6      	subcs	r6, r6, r2
20002142:	4675      	movcs	r5, lr
20002144:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20002148:	ea55 0e06 	orrs.w	lr, r5, r6
2000214c:	d018      	beq.n	20002180 <__aeabi_ddiv+0x114>
2000214e:	ea4f 1505 	mov.w	r5, r5, lsl #4
20002152:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
20002156:	ea4f 1606 	mov.w	r6, r6, lsl #4
2000215a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000215e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
20002162:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20002166:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
2000216a:	d1c0      	bne.n	200020ee <__aeabi_ddiv+0x82>
2000216c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002170:	d10b      	bne.n	2000218a <__aeabi_ddiv+0x11e>
20002172:	ea41 0100 	orr.w	r1, r1, r0
20002176:	f04f 0000 	mov.w	r0, #0
2000217a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
2000217e:	e7b6      	b.n	200020ee <__aeabi_ddiv+0x82>
20002180:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002184:	bf04      	itt	eq
20002186:	4301      	orreq	r1, r0
20002188:	2000      	moveq	r0, #0
2000218a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
2000218e:	bf88      	it	hi
20002190:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20002194:	f63f aeaf 	bhi.w	20001ef6 <__aeabi_dmul+0xde>
20002198:	ebb5 0c03 	subs.w	ip, r5, r3
2000219c:	bf04      	itt	eq
2000219e:	ebb6 0c02 	subseq.w	ip, r6, r2
200021a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
200021a6:	f150 0000 	adcs.w	r0, r0, #0
200021aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
200021ae:	bd70      	pop	{r4, r5, r6, pc}
200021b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
200021b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
200021b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
200021bc:	bfc2      	ittt	gt
200021be:	ebd4 050c 	rsbsgt	r5, r4, ip
200021c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
200021c6:	bd70      	popgt	{r4, r5, r6, pc}
200021c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200021cc:	f04f 0e00 	mov.w	lr, #0
200021d0:	3c01      	subs	r4, #1
200021d2:	e690      	b.n	20001ef6 <__aeabi_dmul+0xde>
200021d4:	ea45 0e06 	orr.w	lr, r5, r6
200021d8:	e68d      	b.n	20001ef6 <__aeabi_dmul+0xde>
200021da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
200021de:	ea94 0f0c 	teq	r4, ip
200021e2:	bf08      	it	eq
200021e4:	ea95 0f0c 	teqeq	r5, ip
200021e8:	f43f af3b 	beq.w	20002062 <__aeabi_dmul+0x24a>
200021ec:	ea94 0f0c 	teq	r4, ip
200021f0:	d10a      	bne.n	20002208 <__aeabi_ddiv+0x19c>
200021f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
200021f6:	f47f af34 	bne.w	20002062 <__aeabi_dmul+0x24a>
200021fa:	ea95 0f0c 	teq	r5, ip
200021fe:	f47f af25 	bne.w	2000204c <__aeabi_dmul+0x234>
20002202:	4610      	mov	r0, r2
20002204:	4619      	mov	r1, r3
20002206:	e72c      	b.n	20002062 <__aeabi_dmul+0x24a>
20002208:	ea95 0f0c 	teq	r5, ip
2000220c:	d106      	bne.n	2000221c <__aeabi_ddiv+0x1b0>
2000220e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002212:	f43f aefd 	beq.w	20002010 <__aeabi_dmul+0x1f8>
20002216:	4610      	mov	r0, r2
20002218:	4619      	mov	r1, r3
2000221a:	e722      	b.n	20002062 <__aeabi_dmul+0x24a>
2000221c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002220:	bf18      	it	ne
20002222:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20002226:	f47f aec5 	bne.w	20001fb4 <__aeabi_dmul+0x19c>
2000222a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
2000222e:	f47f af0d 	bne.w	2000204c <__aeabi_dmul+0x234>
20002232:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
20002236:	f47f aeeb 	bne.w	20002010 <__aeabi_dmul+0x1f8>
2000223a:	e712      	b.n	20002062 <__aeabi_dmul+0x24a>

2000223c <__aeabi_d2uiz>:
2000223c:	004a      	lsls	r2, r1, #1
2000223e:	d211      	bcs.n	20002264 <__aeabi_d2uiz+0x28>
20002240:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
20002244:	d211      	bcs.n	2000226a <__aeabi_d2uiz+0x2e>
20002246:	d50d      	bpl.n	20002264 <__aeabi_d2uiz+0x28>
20002248:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
2000224c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
20002250:	d40e      	bmi.n	20002270 <__aeabi_d2uiz+0x34>
20002252:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20002256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2000225a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
2000225e:	fa23 f002 	lsr.w	r0, r3, r2
20002262:	4770      	bx	lr
20002264:	f04f 0000 	mov.w	r0, #0
20002268:	4770      	bx	lr
2000226a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
2000226e:	d102      	bne.n	20002276 <__aeabi_d2uiz+0x3a>
20002270:	f04f 30ff 	mov.w	r0, #4294967295
20002274:	4770      	bx	lr
20002276:	f04f 0000 	mov.w	r0, #0
2000227a:	4770      	bx	lr

2000227c <__aeabi_d2f>:
2000227c:	ea4f 0241 	mov.w	r2, r1, lsl #1
20002280:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
20002284:	bf24      	itt	cs
20002286:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
2000228a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
2000228e:	d90d      	bls.n	200022ac <__aeabi_d2f+0x30>
20002290:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20002294:	ea4f 02c0 	mov.w	r2, r0, lsl #3
20002298:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
2000229c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
200022a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
200022a4:	bf08      	it	eq
200022a6:	f020 0001 	biceq.w	r0, r0, #1
200022aa:	4770      	bx	lr
200022ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
200022b0:	d121      	bne.n	200022f6 <__aeabi_d2f+0x7a>
200022b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
200022b6:	bfbc      	itt	lt
200022b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
200022bc:	4770      	bxlt	lr
200022be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200022c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
200022c6:	f1c2 0218 	rsb	r2, r2, #24
200022ca:	f1c2 0c20 	rsb	ip, r2, #32
200022ce:	fa10 f30c 	lsls.w	r3, r0, ip
200022d2:	fa20 f002 	lsr.w	r0, r0, r2
200022d6:	bf18      	it	ne
200022d8:	f040 0001 	orrne.w	r0, r0, #1
200022dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
200022e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
200022e4:	fa03 fc0c 	lsl.w	ip, r3, ip
200022e8:	ea40 000c 	orr.w	r0, r0, ip
200022ec:	fa23 f302 	lsr.w	r3, r3, r2
200022f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
200022f4:	e7cc      	b.n	20002290 <__aeabi_d2f+0x14>
200022f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
200022fa:	d107      	bne.n	2000230c <__aeabi_d2f+0x90>
200022fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
20002300:	bf1e      	ittt	ne
20002302:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
20002306:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
2000230a:	4770      	bxne	lr
2000230c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
20002310:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20002314:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002318:	4770      	bx	lr
2000231a:	bf00      	nop

2000231c <__aeabi_frsub>:
2000231c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
20002320:	e002      	b.n	20002328 <__addsf3>
20002322:	bf00      	nop

20002324 <__aeabi_fsub>:
20002324:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

20002328 <__addsf3>:
20002328:	0042      	lsls	r2, r0, #1
2000232a:	bf1f      	itttt	ne
2000232c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
20002330:	ea92 0f03 	teqne	r2, r3
20002334:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
20002338:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
2000233c:	d06a      	beq.n	20002414 <__addsf3+0xec>
2000233e:	ea4f 6212 	mov.w	r2, r2, lsr #24
20002342:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
20002346:	bfc1      	itttt	gt
20002348:	18d2      	addgt	r2, r2, r3
2000234a:	4041      	eorgt	r1, r0
2000234c:	4048      	eorgt	r0, r1
2000234e:	4041      	eorgt	r1, r0
20002350:	bfb8      	it	lt
20002352:	425b      	neglt	r3, r3
20002354:	2b19      	cmp	r3, #25
20002356:	bf88      	it	hi
20002358:	4770      	bxhi	lr
2000235a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
2000235e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002362:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
20002366:	bf18      	it	ne
20002368:	4240      	negne	r0, r0
2000236a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
2000236e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
20002372:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
20002376:	bf18      	it	ne
20002378:	4249      	negne	r1, r1
2000237a:	ea92 0f03 	teq	r2, r3
2000237e:	d03f      	beq.n	20002400 <__addsf3+0xd8>
20002380:	f1a2 0201 	sub.w	r2, r2, #1
20002384:	fa41 fc03 	asr.w	ip, r1, r3
20002388:	eb10 000c 	adds.w	r0, r0, ip
2000238c:	f1c3 0320 	rsb	r3, r3, #32
20002390:	fa01 f103 	lsl.w	r1, r1, r3
20002394:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
20002398:	d502      	bpl.n	200023a0 <__addsf3+0x78>
2000239a:	4249      	negs	r1, r1
2000239c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
200023a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
200023a4:	d313      	bcc.n	200023ce <__addsf3+0xa6>
200023a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
200023aa:	d306      	bcc.n	200023ba <__addsf3+0x92>
200023ac:	0840      	lsrs	r0, r0, #1
200023ae:	ea4f 0131 	mov.w	r1, r1, rrx
200023b2:	f102 0201 	add.w	r2, r2, #1
200023b6:	2afe      	cmp	r2, #254	; 0xfe
200023b8:	d251      	bcs.n	2000245e <__addsf3+0x136>
200023ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
200023be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
200023c2:	bf08      	it	eq
200023c4:	f020 0001 	biceq.w	r0, r0, #1
200023c8:	ea40 0003 	orr.w	r0, r0, r3
200023cc:	4770      	bx	lr
200023ce:	0049      	lsls	r1, r1, #1
200023d0:	eb40 0000 	adc.w	r0, r0, r0
200023d4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
200023d8:	f1a2 0201 	sub.w	r2, r2, #1
200023dc:	d1ed      	bne.n	200023ba <__addsf3+0x92>
200023de:	fab0 fc80 	clz	ip, r0
200023e2:	f1ac 0c08 	sub.w	ip, ip, #8
200023e6:	ebb2 020c 	subs.w	r2, r2, ip
200023ea:	fa00 f00c 	lsl.w	r0, r0, ip
200023ee:	bfaa      	itet	ge
200023f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
200023f4:	4252      	neglt	r2, r2
200023f6:	4318      	orrge	r0, r3
200023f8:	bfbc      	itt	lt
200023fa:	40d0      	lsrlt	r0, r2
200023fc:	4318      	orrlt	r0, r3
200023fe:	4770      	bx	lr
20002400:	f092 0f00 	teq	r2, #0
20002404:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
20002408:	bf06      	itte	eq
2000240a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
2000240e:	3201      	addeq	r2, #1
20002410:	3b01      	subne	r3, #1
20002412:	e7b5      	b.n	20002380 <__addsf3+0x58>
20002414:	ea4f 0341 	mov.w	r3, r1, lsl #1
20002418:	ea7f 6c22 	mvns.w	ip, r2, asr #24
2000241c:	bf18      	it	ne
2000241e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20002422:	d021      	beq.n	20002468 <__addsf3+0x140>
20002424:	ea92 0f03 	teq	r2, r3
20002428:	d004      	beq.n	20002434 <__addsf3+0x10c>
2000242a:	f092 0f00 	teq	r2, #0
2000242e:	bf08      	it	eq
20002430:	4608      	moveq	r0, r1
20002432:	4770      	bx	lr
20002434:	ea90 0f01 	teq	r0, r1
20002438:	bf1c      	itt	ne
2000243a:	2000      	movne	r0, #0
2000243c:	4770      	bxne	lr
2000243e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
20002442:	d104      	bne.n	2000244e <__addsf3+0x126>
20002444:	0040      	lsls	r0, r0, #1
20002446:	bf28      	it	cs
20002448:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
2000244c:	4770      	bx	lr
2000244e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
20002452:	bf3c      	itt	cc
20002454:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
20002458:	4770      	bxcc	lr
2000245a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
2000245e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
20002462:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002466:	4770      	bx	lr
20002468:	ea7f 6222 	mvns.w	r2, r2, asr #24
2000246c:	bf16      	itet	ne
2000246e:	4608      	movne	r0, r1
20002470:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
20002474:	4601      	movne	r1, r0
20002476:	0242      	lsls	r2, r0, #9
20002478:	bf06      	itte	eq
2000247a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
2000247e:	ea90 0f01 	teqeq	r0, r1
20002482:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
20002486:	4770      	bx	lr

20002488 <__aeabi_ui2f>:
20002488:	f04f 0300 	mov.w	r3, #0
2000248c:	e004      	b.n	20002498 <__aeabi_i2f+0x8>
2000248e:	bf00      	nop

20002490 <__aeabi_i2f>:
20002490:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
20002494:	bf48      	it	mi
20002496:	4240      	negmi	r0, r0
20002498:	ea5f 0c00 	movs.w	ip, r0
2000249c:	bf08      	it	eq
2000249e:	4770      	bxeq	lr
200024a0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
200024a4:	4601      	mov	r1, r0
200024a6:	f04f 0000 	mov.w	r0, #0
200024aa:	e01c      	b.n	200024e6 <__aeabi_l2f+0x2a>

200024ac <__aeabi_ul2f>:
200024ac:	ea50 0201 	orrs.w	r2, r0, r1
200024b0:	bf08      	it	eq
200024b2:	4770      	bxeq	lr
200024b4:	f04f 0300 	mov.w	r3, #0
200024b8:	e00a      	b.n	200024d0 <__aeabi_l2f+0x14>
200024ba:	bf00      	nop

200024bc <__aeabi_l2f>:
200024bc:	ea50 0201 	orrs.w	r2, r0, r1
200024c0:	bf08      	it	eq
200024c2:	4770      	bxeq	lr
200024c4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
200024c8:	d502      	bpl.n	200024d0 <__aeabi_l2f+0x14>
200024ca:	4240      	negs	r0, r0
200024cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200024d0:	ea5f 0c01 	movs.w	ip, r1
200024d4:	bf02      	ittt	eq
200024d6:	4684      	moveq	ip, r0
200024d8:	4601      	moveq	r1, r0
200024da:	2000      	moveq	r0, #0
200024dc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
200024e0:	bf08      	it	eq
200024e2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
200024e6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
200024ea:	fabc f28c 	clz	r2, ip
200024ee:	3a08      	subs	r2, #8
200024f0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
200024f4:	db10      	blt.n	20002518 <__aeabi_l2f+0x5c>
200024f6:	fa01 fc02 	lsl.w	ip, r1, r2
200024fa:	4463      	add	r3, ip
200024fc:	fa00 fc02 	lsl.w	ip, r0, r2
20002500:	f1c2 0220 	rsb	r2, r2, #32
20002504:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20002508:	fa20 f202 	lsr.w	r2, r0, r2
2000250c:	eb43 0002 	adc.w	r0, r3, r2
20002510:	bf08      	it	eq
20002512:	f020 0001 	biceq.w	r0, r0, #1
20002516:	4770      	bx	lr
20002518:	f102 0220 	add.w	r2, r2, #32
2000251c:	fa01 fc02 	lsl.w	ip, r1, r2
20002520:	f1c2 0220 	rsb	r2, r2, #32
20002524:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
20002528:	fa21 f202 	lsr.w	r2, r1, r2
2000252c:	eb43 0002 	adc.w	r0, r3, r2
20002530:	bf08      	it	eq
20002532:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20002536:	4770      	bx	lr

20002538 <__aeabi_fmul>:
20002538:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000253c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20002540:	bf1e      	ittt	ne
20002542:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20002546:	ea92 0f0c 	teqne	r2, ip
2000254a:	ea93 0f0c 	teqne	r3, ip
2000254e:	d06f      	beq.n	20002630 <__aeabi_fmul+0xf8>
20002550:	441a      	add	r2, r3
20002552:	ea80 0c01 	eor.w	ip, r0, r1
20002556:	0240      	lsls	r0, r0, #9
20002558:	bf18      	it	ne
2000255a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
2000255e:	d01e      	beq.n	2000259e <__aeabi_fmul+0x66>
20002560:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20002564:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
20002568:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
2000256c:	fba0 3101 	umull	r3, r1, r0, r1
20002570:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20002574:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
20002578:	bf3e      	ittt	cc
2000257a:	0049      	lslcc	r1, r1, #1
2000257c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
20002580:	005b      	lslcc	r3, r3, #1
20002582:	ea40 0001 	orr.w	r0, r0, r1
20002586:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
2000258a:	2afd      	cmp	r2, #253	; 0xfd
2000258c:	d81d      	bhi.n	200025ca <__aeabi_fmul+0x92>
2000258e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
20002592:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002596:	bf08      	it	eq
20002598:	f020 0001 	biceq.w	r0, r0, #1
2000259c:	4770      	bx	lr
2000259e:	f090 0f00 	teq	r0, #0
200025a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
200025a6:	bf08      	it	eq
200025a8:	0249      	lsleq	r1, r1, #9
200025aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
200025ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
200025b2:	3a7f      	subs	r2, #127	; 0x7f
200025b4:	bfc2      	ittt	gt
200025b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
200025ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
200025be:	4770      	bxgt	lr
200025c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200025c4:	f04f 0300 	mov.w	r3, #0
200025c8:	3a01      	subs	r2, #1
200025ca:	dc5d      	bgt.n	20002688 <__aeabi_fmul+0x150>
200025cc:	f112 0f19 	cmn.w	r2, #25
200025d0:	bfdc      	itt	le
200025d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
200025d6:	4770      	bxle	lr
200025d8:	f1c2 0200 	rsb	r2, r2, #0
200025dc:	0041      	lsls	r1, r0, #1
200025de:	fa21 f102 	lsr.w	r1, r1, r2
200025e2:	f1c2 0220 	rsb	r2, r2, #32
200025e6:	fa00 fc02 	lsl.w	ip, r0, r2
200025ea:	ea5f 0031 	movs.w	r0, r1, rrx
200025ee:	f140 0000 	adc.w	r0, r0, #0
200025f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
200025f6:	bf08      	it	eq
200025f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
200025fc:	4770      	bx	lr
200025fe:	f092 0f00 	teq	r2, #0
20002602:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20002606:	bf02      	ittt	eq
20002608:	0040      	lsleq	r0, r0, #1
2000260a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
2000260e:	3a01      	subeq	r2, #1
20002610:	d0f9      	beq.n	20002606 <__aeabi_fmul+0xce>
20002612:	ea40 000c 	orr.w	r0, r0, ip
20002616:	f093 0f00 	teq	r3, #0
2000261a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
2000261e:	bf02      	ittt	eq
20002620:	0049      	lsleq	r1, r1, #1
20002622:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20002626:	3b01      	subeq	r3, #1
20002628:	d0f9      	beq.n	2000261e <__aeabi_fmul+0xe6>
2000262a:	ea41 010c 	orr.w	r1, r1, ip
2000262e:	e78f      	b.n	20002550 <__aeabi_fmul+0x18>
20002630:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20002634:	ea92 0f0c 	teq	r2, ip
20002638:	bf18      	it	ne
2000263a:	ea93 0f0c 	teqne	r3, ip
2000263e:	d00a      	beq.n	20002656 <__aeabi_fmul+0x11e>
20002640:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20002644:	bf18      	it	ne
20002646:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
2000264a:	d1d8      	bne.n	200025fe <__aeabi_fmul+0xc6>
2000264c:	ea80 0001 	eor.w	r0, r0, r1
20002650:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20002654:	4770      	bx	lr
20002656:	f090 0f00 	teq	r0, #0
2000265a:	bf17      	itett	ne
2000265c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
20002660:	4608      	moveq	r0, r1
20002662:	f091 0f00 	teqne	r1, #0
20002666:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
2000266a:	d014      	beq.n	20002696 <__aeabi_fmul+0x15e>
2000266c:	ea92 0f0c 	teq	r2, ip
20002670:	d101      	bne.n	20002676 <__aeabi_fmul+0x13e>
20002672:	0242      	lsls	r2, r0, #9
20002674:	d10f      	bne.n	20002696 <__aeabi_fmul+0x15e>
20002676:	ea93 0f0c 	teq	r3, ip
2000267a:	d103      	bne.n	20002684 <__aeabi_fmul+0x14c>
2000267c:	024b      	lsls	r3, r1, #9
2000267e:	bf18      	it	ne
20002680:	4608      	movne	r0, r1
20002682:	d108      	bne.n	20002696 <__aeabi_fmul+0x15e>
20002684:	ea80 0001 	eor.w	r0, r0, r1
20002688:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
2000268c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20002690:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002694:	4770      	bx	lr
20002696:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
2000269a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
2000269e:	4770      	bx	lr

200026a0 <__aeabi_fdiv>:
200026a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
200026a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
200026a8:	bf1e      	ittt	ne
200026aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
200026ae:	ea92 0f0c 	teqne	r2, ip
200026b2:	ea93 0f0c 	teqne	r3, ip
200026b6:	d069      	beq.n	2000278c <__aeabi_fdiv+0xec>
200026b8:	eba2 0203 	sub.w	r2, r2, r3
200026bc:	ea80 0c01 	eor.w	ip, r0, r1
200026c0:	0249      	lsls	r1, r1, #9
200026c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
200026c6:	d037      	beq.n	20002738 <__aeabi_fdiv+0x98>
200026c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
200026cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
200026d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
200026d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
200026d8:	428b      	cmp	r3, r1
200026da:	bf38      	it	cc
200026dc:	005b      	lslcc	r3, r3, #1
200026de:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
200026e2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
200026e6:	428b      	cmp	r3, r1
200026e8:	bf24      	itt	cs
200026ea:	1a5b      	subcs	r3, r3, r1
200026ec:	ea40 000c 	orrcs.w	r0, r0, ip
200026f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
200026f4:	bf24      	itt	cs
200026f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
200026fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
200026fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
20002702:	bf24      	itt	cs
20002704:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
20002708:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
2000270c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
20002710:	bf24      	itt	cs
20002712:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
20002716:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
2000271a:	011b      	lsls	r3, r3, #4
2000271c:	bf18      	it	ne
2000271e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
20002722:	d1e0      	bne.n	200026e6 <__aeabi_fdiv+0x46>
20002724:	2afd      	cmp	r2, #253	; 0xfd
20002726:	f63f af50 	bhi.w	200025ca <__aeabi_fmul+0x92>
2000272a:	428b      	cmp	r3, r1
2000272c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002730:	bf08      	it	eq
20002732:	f020 0001 	biceq.w	r0, r0, #1
20002736:	4770      	bx	lr
20002738:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
2000273c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20002740:	327f      	adds	r2, #127	; 0x7f
20002742:	bfc2      	ittt	gt
20002744:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20002748:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
2000274c:	4770      	bxgt	lr
2000274e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002752:	f04f 0300 	mov.w	r3, #0
20002756:	3a01      	subs	r2, #1
20002758:	e737      	b.n	200025ca <__aeabi_fmul+0x92>
2000275a:	f092 0f00 	teq	r2, #0
2000275e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20002762:	bf02      	ittt	eq
20002764:	0040      	lsleq	r0, r0, #1
20002766:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
2000276a:	3a01      	subeq	r2, #1
2000276c:	d0f9      	beq.n	20002762 <__aeabi_fdiv+0xc2>
2000276e:	ea40 000c 	orr.w	r0, r0, ip
20002772:	f093 0f00 	teq	r3, #0
20002776:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
2000277a:	bf02      	ittt	eq
2000277c:	0049      	lsleq	r1, r1, #1
2000277e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20002782:	3b01      	subeq	r3, #1
20002784:	d0f9      	beq.n	2000277a <__aeabi_fdiv+0xda>
20002786:	ea41 010c 	orr.w	r1, r1, ip
2000278a:	e795      	b.n	200026b8 <__aeabi_fdiv+0x18>
2000278c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20002790:	ea92 0f0c 	teq	r2, ip
20002794:	d108      	bne.n	200027a8 <__aeabi_fdiv+0x108>
20002796:	0242      	lsls	r2, r0, #9
20002798:	f47f af7d 	bne.w	20002696 <__aeabi_fmul+0x15e>
2000279c:	ea93 0f0c 	teq	r3, ip
200027a0:	f47f af70 	bne.w	20002684 <__aeabi_fmul+0x14c>
200027a4:	4608      	mov	r0, r1
200027a6:	e776      	b.n	20002696 <__aeabi_fmul+0x15e>
200027a8:	ea93 0f0c 	teq	r3, ip
200027ac:	d104      	bne.n	200027b8 <__aeabi_fdiv+0x118>
200027ae:	024b      	lsls	r3, r1, #9
200027b0:	f43f af4c 	beq.w	2000264c <__aeabi_fmul+0x114>
200027b4:	4608      	mov	r0, r1
200027b6:	e76e      	b.n	20002696 <__aeabi_fmul+0x15e>
200027b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
200027bc:	bf18      	it	ne
200027be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
200027c2:	d1ca      	bne.n	2000275a <__aeabi_fdiv+0xba>
200027c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
200027c8:	f47f af5c 	bne.w	20002684 <__aeabi_fmul+0x14c>
200027cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
200027d0:	f47f af3c 	bne.w	2000264c <__aeabi_fmul+0x114>
200027d4:	e75f      	b.n	20002696 <__aeabi_fmul+0x15e>
200027d6:	bf00      	nop

200027d8 <__libc_init_array>:
200027d8:	b570      	push	{r4, r5, r6, lr}
200027da:	f642 1600 	movw	r6, #10496	; 0x2900
200027de:	f642 1500 	movw	r5, #10496	; 0x2900
200027e2:	f2c2 0600 	movt	r6, #8192	; 0x2000
200027e6:	f2c2 0500 	movt	r5, #8192	; 0x2000
200027ea:	1b76      	subs	r6, r6, r5
200027ec:	10b6      	asrs	r6, r6, #2
200027ee:	d006      	beq.n	200027fe <__libc_init_array+0x26>
200027f0:	2400      	movs	r4, #0
200027f2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200027f6:	3401      	adds	r4, #1
200027f8:	4798      	blx	r3
200027fa:	42a6      	cmp	r6, r4
200027fc:	d8f9      	bhi.n	200027f2 <__libc_init_array+0x1a>
200027fe:	f642 1500 	movw	r5, #10496	; 0x2900
20002802:	f642 1604 	movw	r6, #10500	; 0x2904
20002806:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000280a:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000280e:	1b76      	subs	r6, r6, r5
20002810:	f000 f86a 	bl	200028e8 <_init>
20002814:	10b6      	asrs	r6, r6, #2
20002816:	d006      	beq.n	20002826 <__libc_init_array+0x4e>
20002818:	2400      	movs	r4, #0
2000281a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000281e:	3401      	adds	r4, #1
20002820:	4798      	blx	r3
20002822:	42a6      	cmp	r6, r4
20002824:	d8f9      	bhi.n	2000281a <__libc_init_array+0x42>
20002826:	bd70      	pop	{r4, r5, r6, pc}

20002828 <g_config_reg_lut>:
20002828:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
20002838:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
20002848:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
20002858:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20002868:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20002878:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20002888:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20002898:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

200028a8 <g_gpio_irqn_lut>:
200028a8:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
200028b8:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
200028c8:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
200028d8:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

200028e8 <_init>:
200028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200028ea:	bf00      	nop
200028ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
200028ee:	bc08      	pop	{r3}
200028f0:	469e      	mov	lr, r3
200028f2:	4770      	bx	lr

200028f4 <_fini>:
200028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200028f6:	bf00      	nop
200028f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
200028fa:	bc08      	pop	{r3}
200028fc:	469e      	mov	lr, r3
200028fe:	4770      	bx	lr

20002900 <__frame_dummy_init_array_entry>:
20002900:	0485 2000                                   ... 

20002904 <__do_global_dtors_aux_fini_array_entry>:
20002904:	0471 2000                                   q.. 
