
cont_servo_test_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029a0  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  200029a0  200029a0  0000a9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  200029a4  200029a4  0000a9a4  2**2
                  ALLOC
  3 .stack        00003000  20002c20  20002c20  0000a9a4  2**0
                  ALLOC
  4 .comment      00000158  00000000  00000000  0000a9a4  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  0000aafc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000825  00000000  00000000  0000af6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007427  00000000  00000000  0000b791  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d4e  00000000  00000000  00012bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000238b  00000000  00000000  00013906  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e3c  00000000  00000000  00015c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002674  00000000  00000000  00016ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017e2  00000000  00000000  00019144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000315b7  00000000  00000000  0001a926  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0004bedd  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000430  00000000  00000000  0004bf02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20000de1 	.word	0x20000de1
2000006c:	20000e0d 	.word	0x20000e0d
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20001981 	.word	0x20001981
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	200019ad 	.word	0x200019ad
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000879 	.word	0x20000879
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>
20000336:	e7fe      	b.n	20000336 <SPI1_IRQHandler+0x2>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>
20000342:	e7fe      	b.n	20000342 <I2C1_SMBus_IRQHandler+0x2>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20001b35 	.word	0x20001b35
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	200029a0 	.word	0x200029a0
20000450:	200029a0 	.word	0x200029a0
20000454:	200029a0 	.word	0x200029a0
20000458:	200029a4 	.word	0x200029a4
2000045c:	00000000 	.word	0x00000000
20000460:	200029a4 	.word	0x200029a4
20000464:	20002c20 	.word	0x20002c20
20000468:	20002871 	.word	0x20002871
2000046c:	20000ab9 	.word	0x20000ab9

20000470 <__do_global_dtors_aux>:
20000470:	f642 13a4 	movw	r3, #10660	; 0x29a4
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f642 10a0 	movw	r0, #10656	; 0x29a0
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <imu_init>:
#define X_GYRO_OFFSET 475

#define Y_ACCL_OFFSET -650

void imu_init()
{
200004a0:	b580      	push	{r7, lr}
200004a2:	af00      	add	r7, sp, #0
	imu_write(0x6B, 0x00);
200004a4:	f04f 006b 	mov.w	r0, #107	; 0x6b
200004a8:	f04f 0100 	mov.w	r1, #0
200004ac:	f000 f844 	bl	20000538 <imu_write>
}
200004b0:	bd80      	pop	{r7, pc}
200004b2:	bf00      	nop

200004b4 <imu_accl_y>:

	return ((receive_lower + (receive_upper<<8)) - X_ACCL_OFFSET);
}

int16_t imu_accl_y()
{
200004b4:	b580      	push	{r7, lr}
200004b6:	b082      	sub	sp, #8
200004b8:	af00      	add	r7, sp, #0
	uint8_t receive_lower = imu_read(YACCL_OUT_LOWER);
200004ba:	f04f 003e 	mov.w	r0, #62	; 0x3e
200004be:	f000 f861 	bl	20000584 <imu_read>
200004c2:	4603      	mov	r3, r0
200004c4:	71bb      	strb	r3, [r7, #6]
	uint8_t receive_upper = imu_read(YACCL_OUT_UPPER);
200004c6:	f04f 003d 	mov.w	r0, #61	; 0x3d
200004ca:	f000 f85b 	bl	20000584 <imu_read>
200004ce:	4603      	mov	r3, r0
200004d0:	71fb      	strb	r3, [r7, #7]

	return ((receive_lower + (receive_upper<<8)) - Y_ACCL_OFFSET);
200004d2:	79ba      	ldrb	r2, [r7, #6]
200004d4:	79fb      	ldrb	r3, [r7, #7]
200004d6:	ea4f 2303 	mov.w	r3, r3, lsl #8
200004da:	b29b      	uxth	r3, r3
200004dc:	4413      	add	r3, r2
200004de:	b29b      	uxth	r3, r3
200004e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
200004e4:	f103 0302 	add.w	r3, r3, #2
200004e8:	b29b      	uxth	r3, r3
200004ea:	b21b      	sxth	r3, r3
}
200004ec:	4618      	mov	r0, r3
200004ee:	f107 0708 	add.w	r7, r7, #8
200004f2:	46bd      	mov	sp, r7
200004f4:	bd80      	pop	{r7, pc}
200004f6:	bf00      	nop

200004f8 <imu_gyro_x>:

	return (receive_lower + (receive_upper<<8));
}

uint16_t imu_gyro_x()
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b082      	sub	sp, #8
200004fc:	af00      	add	r7, sp, #0
	uint8_t receive_lower = imu_read(XGYRO_OUT_LOWER);
200004fe:	f04f 0044 	mov.w	r0, #68	; 0x44
20000502:	f000 f83f 	bl	20000584 <imu_read>
20000506:	4603      	mov	r3, r0
20000508:	71bb      	strb	r3, [r7, #6]
	uint8_t receive_upper = imu_read(XGYRO_OUT_UPPER);
2000050a:	f04f 0043 	mov.w	r0, #67	; 0x43
2000050e:	f000 f839 	bl	20000584 <imu_read>
20000512:	4603      	mov	r3, r0
20000514:	71fb      	strb	r3, [r7, #7]

	return ((receive_lower + (receive_upper<<8)) - X_GYRO_OFFSET);
20000516:	79ba      	ldrb	r2, [r7, #6]
20000518:	79fb      	ldrb	r3, [r7, #7]
2000051a:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000051e:	b29b      	uxth	r3, r3
20000520:	4413      	add	r3, r2
20000522:	b29b      	uxth	r3, r3
20000524:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
20000528:	f1a3 0303 	sub.w	r3, r3, #3
2000052c:	b29b      	uxth	r3, r3
}
2000052e:	4618      	mov	r0, r3
20000530:	f107 0708 	add.w	r7, r7, #8
20000534:	46bd      	mov	sp, r7
20000536:	bd80      	pop	{r7, pc}

20000538 <imu_write>:

	return (receive_lower + (receive_upper<<8));
}

void imu_write(uint8_t reg, uint8_t data)
{
20000538:	b580      	push	{r7, lr}
2000053a:	b086      	sub	sp, #24
2000053c:	af02      	add	r7, sp, #8
2000053e:	4602      	mov	r2, r0
20000540:	460b      	mov	r3, r1
20000542:	71fa      	strb	r2, [r7, #7]
20000544:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit[2];

	transmit[0] = reg;
20000546:	79fb      	ldrb	r3, [r7, #7]
20000548:	733b      	strb	r3, [r7, #12]
	transmit[1] = data;
2000054a:	79bb      	ldrb	r3, [r7, #6]
2000054c:	737b      	strb	r3, [r7, #13]

	MSS_I2C_write
2000054e:	f107 030c 	add.w	r3, r7, #12
20000552:	f04f 0200 	mov.w	r2, #0
20000556:	9200      	str	r2, [sp, #0]
20000558:	f642 30dc 	movw	r0, #11228	; 0x2bdc
2000055c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000560:	f04f 01d0 	mov.w	r1, #208	; 0xd0
20000564:	461a      	mov	r2, r3
20000566:	f04f 0302 	mov.w	r3, #2
2000056a:	f000 fd8b 	bl	20001084 <MSS_I2C_write>
		IMU_ADDRESS_WRITE,
		transmit,
		sizeof(transmit),
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1);
2000056e:	f642 30dc 	movw	r0, #11228	; 0x2bdc
20000572:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000576:	f000 fe4b 	bl	20001210 <MSS_I2C_wait_complete>
}
2000057a:	f107 0710 	add.w	r7, r7, #16
2000057e:	46bd      	mov	sp, r7
20000580:	bd80      	pop	{r7, pc}
20000582:	bf00      	nop

20000584 <imu_read>:

uint8_t imu_read(uint8_t reg)
{
20000584:	b580      	push	{r7, lr}
20000586:	b086      	sub	sp, #24
20000588:	af02      	add	r7, sp, #8
2000058a:	4603      	mov	r3, r0
2000058c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	MSS_I2C_write
2000058e:	f107 0307 	add.w	r3, r7, #7
20000592:	f04f 0200 	mov.w	r2, #0
20000596:	9200      	str	r2, [sp, #0]
20000598:	f642 30dc 	movw	r0, #11228	; 0x2bdc
2000059c:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005a0:	f04f 01d0 	mov.w	r1, #208	; 0xd0
200005a4:	461a      	mov	r2, r3
200005a6:	f04f 0301 	mov.w	r3, #1
200005aa:	f000 fd6b 	bl	20001084 <MSS_I2C_write>
		&reg,
		sizeof(reg),
		MSS_I2C_RELEASE_BUS
	);

	MSS_I2C_wait_complete(&g_mss_i2c1);
200005ae:	f642 30dc 	movw	r0, #11228	; 0x2bdc
200005b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005b6:	f000 fe2b 	bl	20001210 <MSS_I2C_wait_complete>

	MSS_I2C_read
200005ba:	f107 030f 	add.w	r3, r7, #15
200005be:	f04f 0200 	mov.w	r2, #0
200005c2:	9200      	str	r2, [sp, #0]
200005c4:	f642 30dc 	movw	r0, #11228	; 0x2bdc
200005c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005cc:	f04f 01d1 	mov.w	r1, #209	; 0xd1
200005d0:	461a      	mov	r2, r3
200005d2:	f04f 0301 	mov.w	r3, #1
200005d6:	f000 fdb7 	bl	20001148 <MSS_I2C_read>
			IMU_ADDRESS_READ,
			&data,
			sizeof(data),
			MSS_I2C_RELEASE_BUS
	 );
	MSS_I2C_wait_complete(&g_mss_i2c1);
200005da:	f642 30dc 	movw	r0, #11228	; 0x2bdc
200005de:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005e2:	f000 fe15 	bl	20001210 <MSS_I2C_wait_complete>

	return data;
200005e6:	7bfb      	ldrb	r3, [r7, #15]
}
200005e8:	4618      	mov	r0, r3
200005ea:	f107 0710 	add.w	r7, r7, #16
200005ee:	46bd      	mov	sp, r7
200005f0:	bd80      	pop	{r7, pc}
200005f2:	bf00      	nop

200005f4 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200005f4:	b480      	push	{r7}
200005f6:	b083      	sub	sp, #12
200005f8:	af00      	add	r7, sp, #0
200005fa:	4603      	mov	r3, r0
200005fc:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200005fe:	f24e 1300 	movw	r3, #57600	; 0xe100
20000602:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000606:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000060a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000060e:	88f9      	ldrh	r1, [r7, #6]
20000610:	f001 011f 	and.w	r1, r1, #31
20000614:	f04f 0001 	mov.w	r0, #1
20000618:	fa00 f101 	lsl.w	r1, r0, r1
2000061c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000620:	f107 070c 	add.w	r7, r7, #12
20000624:	46bd      	mov	sp, r7
20000626:	bc80      	pop	{r7}
20000628:	4770      	bx	lr
2000062a:	bf00      	nop

2000062c <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
2000062c:	b480      	push	{r7}
2000062e:	b083      	sub	sp, #12
20000630:	af00      	add	r7, sp, #0
20000632:	4603      	mov	r3, r0
20000634:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000636:	f24e 1300 	movw	r3, #57600	; 0xe100
2000063a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000063e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000642:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000646:	88f9      	ldrh	r1, [r7, #6]
20000648:	f001 011f 	and.w	r1, r1, #31
2000064c:	f04f 0001 	mov.w	r0, #1
20000650:	fa00 f101 	lsl.w	r1, r0, r1
20000654:	f102 0220 	add.w	r2, r2, #32
20000658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000065c:	f107 070c 	add.w	r7, r7, #12
20000660:	46bd      	mov	sp, r7
20000662:	bc80      	pop	{r7}
20000664:	4770      	bx	lr
20000666:	bf00      	nop

20000668 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000668:	b480      	push	{r7}
2000066a:	b083      	sub	sp, #12
2000066c:	af00      	add	r7, sp, #0
2000066e:	4603      	mov	r3, r0
20000670:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000672:	f24e 1300 	movw	r3, #57600	; 0xe100
20000676:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000067a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000067e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000682:	88f9      	ldrh	r1, [r7, #6]
20000684:	f001 011f 	and.w	r1, r1, #31
20000688:	f04f 0001 	mov.w	r0, #1
2000068c:	fa00 f101 	lsl.w	r1, r0, r1
20000690:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000698:	f107 070c 	add.w	r7, r7, #12
2000069c:	46bd      	mov	sp, r7
2000069e:	bc80      	pop	{r7}
200006a0:	4770      	bx	lr
200006a2:	bf00      	nop

200006a4 <MSS_TIM1_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE
 */
static __INLINE void MSS_TIM1_init( mss_timer_mode_t mode )
{
200006a4:	b580      	push	{r7, lr}
200006a6:	b082      	sub	sp, #8
200006a8:	af00      	add	r7, sp, #0
200006aa:	4603      	mov	r3, r0
200006ac:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer1_IRQn );             /* Disable timer 1 irq in the Cortex-M3 NVIC */  
200006ae:	f04f 0014 	mov.w	r0, #20
200006b2:	f7ff ffbb 	bl	2000062c <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
200006b6:	f242 0300 	movw	r3, #8192	; 0x2000
200006ba:	f2ce 0304 	movt	r3, #57348	; 0xe004
200006be:	f242 0200 	movw	r2, #8192	; 0x2000
200006c2:	f2ce 0204 	movt	r2, #57348	; 0xe004
200006c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
200006c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200006cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
200006ce:	f245 0300 	movw	r3, #20480	; 0x5000
200006d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
200006d6:	f04f 0200 	mov.w	r2, #0
200006da:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM1ENABLE = 0U;             /* disable timer */
200006dc:	f240 0300 	movw	r3, #0
200006e0:	f2c4 230a 	movt	r3, #16906	; 0x420a
200006e4:	f04f 0200 	mov.w	r2, #0
200006e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    TIMER_BITBAND->TIM1INTEN = 0U;              /* disable interrupt */
200006ec:	f240 0300 	movw	r3, #0
200006f0:	f2c4 230a 	movt	r3, #16906	; 0x420a
200006f4:	f04f 0200 	mov.w	r2, #0
200006f8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TIMER_BITBAND->TIM1MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
200006fc:	f240 0300 	movw	r3, #0
20000700:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000704:	79fa      	ldrb	r2, [r7, #7]
20000706:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    
    TIMER->TIM1_RIS = 1U;                       /* clear timer 1 interrupt */
2000070a:	f245 0300 	movw	r3, #20480	; 0x5000
2000070e:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000712:	f04f 0201 	mov.w	r2, #1
20000716:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );        /* clear timer 1 interrupt within NVIC */
20000718:	f04f 0014 	mov.w	r0, #20
2000071c:	f7ff ffa4 	bl	20000668 <NVIC_ClearPendingIRQ>
}
20000720:	f107 0708 	add.w	r7, r7, #8
20000724:	46bd      	mov	sp, r7
20000726:	bd80      	pop	{r7, pc}

20000728 <MSS_TIM1_start>:
  The MSS_TIM1_start() function enables Timer 1 and starts its down-counter
  decrementing from the load_value specified in previous calls to the
  MSS_TIM1_load_immediate() or MSS_TIM1_load_background() functions.
 */
static __INLINE void MSS_TIM1_start( void )
{
20000728:	b480      	push	{r7}
2000072a:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 1U;    /* enable timer */
2000072c:	f240 0300 	movw	r3, #0
20000730:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000734:	f04f 0201 	mov.w	r2, #1
20000738:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
2000073c:	46bd      	mov	sp, r7
2000073e:	bc80      	pop	{r7}
20000740:	4770      	bx	lr
20000742:	bf00      	nop

20000744 <MSS_TIM1_load_background>:
    Timer 1 down-counter the next time the down-counter reaches zero. The Timer
    1 down-counter will start decrementing from this value after the current
    count expires.
 */
static __INLINE void MSS_TIM1_load_background( uint32_t load_value )
{
20000744:	b480      	push	{r7}
20000746:	b083      	sub	sp, #12
20000748:	af00      	add	r7, sp, #0
2000074a:	6078      	str	r0, [r7, #4]
    TIMER->TIM1_BGLOADVAL = load_value;
2000074c:	f245 0300 	movw	r3, #20480	; 0x5000
20000750:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000754:	687a      	ldr	r2, [r7, #4]
20000756:	609a      	str	r2, [r3, #8]
}
20000758:	f107 070c 	add.w	r7, r7, #12
2000075c:	46bd      	mov	sp, r7
2000075e:	bc80      	pop	{r7}
20000760:	4770      	bx	lr
20000762:	bf00      	nop

20000764 <MSS_TIM1_enable_irq>:
  implementation of the Timer1_IRQHandler() function, that will override the
  default implementation, to suit your application.

 */
static __INLINE void MSS_TIM1_enable_irq( void )
{
20000764:	b580      	push	{r7, lr}
20000766:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1INTEN = 1U;
20000768:	f240 0300 	movw	r3, #0
2000076c:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000770:	f04f 0201 	mov.w	r2, #1
20000774:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC_EnableIRQ( Timer1_IRQn );
20000778:	f04f 0014 	mov.w	r0, #20
2000077c:	f7ff ff3a 	bl	200005f4 <NVIC_EnableIRQ>
}
20000780:	bd80      	pop	{r7, pc}
20000782:	bf00      	nop

20000784 <MSS_TIM1_clear_irq>:
  (ISR) in order to prevent the same interrupt event retriggering a call to the
  ISR.

 */
static __INLINE void MSS_TIM1_clear_irq( void )
{
20000784:	b580      	push	{r7, lr}
20000786:	af00      	add	r7, sp, #0
    TIMER->TIM1_RIS = 1U;
20000788:	f245 0300 	movw	r3, #20480	; 0x5000
2000078c:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000790:	f04f 0201 	mov.w	r2, #1
20000794:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );
20000796:	f04f 0014 	mov.w	r0, #20
2000079a:	f7ff ff65 	bl	20000668 <NVIC_ClearPendingIRQ>
}
2000079e:	bd80      	pop	{r7, pc}

200007a0 <MSS_TIM2_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE 
 */
static __INLINE void MSS_TIM2_init( mss_timer_mode_t mode )
{
200007a0:	b580      	push	{r7, lr}
200007a2:	b082      	sub	sp, #8
200007a4:	af00      	add	r7, sp, #0
200007a6:	4603      	mov	r3, r0
200007a8:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer2_IRQn );             /* Disable timer 2 irq in the Cortex-M3 NVIC */  
200007aa:	f04f 0015 	mov.w	r0, #21
200007ae:	f7ff ff3d 	bl	2000062c <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
200007b2:	f242 0300 	movw	r3, #8192	; 0x2000
200007b6:	f2ce 0304 	movt	r3, #57348	; 0xe004
200007ba:	f242 0200 	movw	r2, #8192	; 0x2000
200007be:	f2ce 0204 	movt	r2, #57348	; 0xe004
200007c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
200007c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200007c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
200007ca:	f245 0300 	movw	r3, #20480	; 0x5000
200007ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
200007d2:	f04f 0200 	mov.w	r2, #0
200007d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM2ENABLE = 0U;             /* disable timer */
200007d8:	f240 0300 	movw	r3, #0
200007dc:	f2c4 230a 	movt	r3, #16906	; 0x420a
200007e0:	f04f 0200 	mov.w	r2, #0
200007e4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    TIMER_BITBAND->TIM2INTEN = 0U;              /* disable interrupt */
200007e8:	f240 0300 	movw	r3, #0
200007ec:	f2c4 230a 	movt	r3, #16906	; 0x420a
200007f0:	f04f 0200 	mov.w	r2, #0
200007f4:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488
    TIMER_BITBAND->TIM2MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
200007f8:	f240 0300 	movw	r3, #0
200007fc:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000800:	79fa      	ldrb	r2, [r7, #7]
20000802:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
    
    TIMER->TIM2_RIS = 1U;                       /* clear timer 2 interrupt */
20000806:	f245 0300 	movw	r3, #20480	; 0x5000
2000080a:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000080e:	f04f 0201 	mov.w	r2, #1
20000812:	629a      	str	r2, [r3, #40]	; 0x28
    NVIC_ClearPendingIRQ( Timer2_IRQn );        /* clear timer 2 interrupt within NVIC */
20000814:	f04f 0015 	mov.w	r0, #21
20000818:	f7ff ff26 	bl	20000668 <NVIC_ClearPendingIRQ>
}
2000081c:	f107 0708 	add.w	r7, r7, #8
20000820:	46bd      	mov	sp, r7
20000822:	bd80      	pop	{r7, pc}

20000824 <MSS_TIM2_start>:
  The MSS_TIM2_start() function enables Timer 2 and  starts its down-counter
  decrementing from the load_value specified in previous calls to the
  MSS_TIM2_load_immediate() or MSS_TIM2_load_background() functions.
 */
static __INLINE void MSS_TIM2_start( void )
{
20000824:	b480      	push	{r7}
20000826:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM2ENABLE = 1U;    /* enable timer */
20000828:	f240 0300 	movw	r3, #0
2000082c:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000830:	f04f 0201 	mov.w	r2, #1
20000834:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
}
20000838:	46bd      	mov	sp, r7
2000083a:	bc80      	pop	{r7}
2000083c:	4770      	bx	lr
2000083e:	bf00      	nop

20000840 <MSS_TIM2_get_current_value>:
/*-------------------------------------------------------------------------*//**
  The MSS_TIM2_get_current_value() returns the current value of the Timer 2
  down-counter.
 */
static __INLINE uint32_t MSS_TIM2_get_current_value( void )
{
20000840:	b480      	push	{r7}
20000842:	af00      	add	r7, sp, #0
    return TIMER->TIM2_VAL;
20000844:	f245 0300 	movw	r3, #20480	; 0x5000
20000848:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000084c:	699b      	ldr	r3, [r3, #24]
}
2000084e:	4618      	mov	r0, r3
20000850:	46bd      	mov	sp, r7
20000852:	bc80      	pop	{r7}
20000854:	4770      	bx	lr
20000856:	bf00      	nop

20000858 <MSS_TIM2_load_immediate>:
  @param load_value
    The load_value parameter specifies the value from which the Timer 2
    down-counter will start decrementing. 
 */
static __INLINE void MSS_TIM2_load_immediate( uint32_t load_value )
{
20000858:	b480      	push	{r7}
2000085a:	b083      	sub	sp, #12
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
    TIMER->TIM2_LOADVAL = load_value;
20000860:	f245 0300 	movw	r3, #20480	; 0x5000
20000864:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000868:	687a      	ldr	r2, [r7, #4]
2000086a:	61da      	str	r2, [r3, #28]
}
2000086c:	f107 070c 	add.w	r7, r7, #12
20000870:	46bd      	mov	sp, r7
20000872:	bc80      	pop	{r7}
20000874:	4770      	bx	lr
20000876:	bf00      	nop

20000878 <Timer1_IRQHandler>:

int16_t X_GYRO;
uint16_t Y_ACCL;

void Timer1_IRQHandler( void )
{
20000878:	b5b0      	push	{r4, r5, r7, lr}
2000087a:	b088      	sub	sp, #32
2000087c:	af00      	add	r7, sp, #0

    //average gyro readings
    static int16_t gyro_avgs[NUMBER_SAMPLES];
    static int index_gyro = 0;

    gyro_avgs[index_gyro] = X_GYRO;
2000087e:	f642 13ac 	movw	r3, #10668	; 0x29ac
20000882:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000886:	681a      	ldr	r2, [r3, #0]
20000888:	f642 3346 	movw	r3, #11078	; 0x2b46
2000088c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000890:	8819      	ldrh	r1, [r3, #0]
20000892:	f642 13b0 	movw	r3, #10672	; 0x29b0
20000896:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000089a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    index_gyro++;
2000089e:	f642 13ac 	movw	r3, #10668	; 0x29ac
200008a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008a6:	681b      	ldr	r3, [r3, #0]
200008a8:	f103 0201 	add.w	r2, r3, #1
200008ac:	f642 13ac 	movw	r3, #10668	; 0x29ac
200008b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008b4:	601a      	str	r2, [r3, #0]
    if (index_gyro >= NUMBER_SAMPLES) index_gyro = 0;
200008b6:	f642 13ac 	movw	r3, #10668	; 0x29ac
200008ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008be:	681b      	ldr	r3, [r3, #0]
200008c0:	2b63      	cmp	r3, #99	; 0x63
200008c2:	dd06      	ble.n	200008d2 <Timer1_IRQHandler+0x5a>
200008c4:	f642 13ac 	movw	r3, #10668	; 0x29ac
200008c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008cc:	f04f 0200 	mov.w	r2, #0
200008d0:	601a      	str	r2, [r3, #0]

    int32_t total_gyro = 0;
200008d2:	f04f 0300 	mov.w	r3, #0
200008d6:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NUMBER_SAMPLES; ++i) {
200008d8:	f04f 0300 	mov.w	r3, #0
200008dc:	607b      	str	r3, [r7, #4]
200008de:	e00e      	b.n	200008fe <Timer1_IRQHandler+0x86>
        total_gyro += gyro_avgs[i];
200008e0:	687a      	ldr	r2, [r7, #4]
200008e2:	f642 13b0 	movw	r3, #10672	; 0x29b0
200008e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200008ee:	b21b      	sxth	r3, r3
200008f0:	68ba      	ldr	r2, [r7, #8]
200008f2:	4413      	add	r3, r2
200008f4:	60bb      	str	r3, [r7, #8]

    index_gyro++;
    if (index_gyro >= NUMBER_SAMPLES) index_gyro = 0;

    int32_t total_gyro = 0;
    for (i = 0; i < NUMBER_SAMPLES; ++i) {
200008f6:	687b      	ldr	r3, [r7, #4]
200008f8:	f103 0301 	add.w	r3, r3, #1
200008fc:	607b      	str	r3, [r7, #4]
200008fe:	687b      	ldr	r3, [r7, #4]
20000900:	2b63      	cmp	r3, #99	; 0x63
20000902:	dded      	ble.n	200008e0 <Timer1_IRQHandler+0x68>
        total_gyro += gyro_avgs[i];
    }
    float gyro_avg = total_gyro / NUMBER_SAMPLES;
20000904:	68ba      	ldr	r2, [r7, #8]
20000906:	f248 531f 	movw	r3, #34079	; 0x851f
2000090a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
2000090e:	fb83 1302 	smull	r1, r3, r3, r2
20000912:	ea4f 1163 	mov.w	r1, r3, asr #5
20000916:	ea4f 73e2 	mov.w	r3, r2, asr #31
2000091a:	ebc3 0301 	rsb	r3, r3, r1
2000091e:	4618      	mov	r0, r3
20000920:	f001 fe02 	bl	20002528 <__aeabi_i2f>
20000924:	4603      	mov	r3, r0
20000926:	60fb      	str	r3, [r7, #12]
    float gyro_angle = (gyro_avg ) / 131;
20000928:	68f8      	ldr	r0, [r7, #12]
2000092a:	495f      	ldr	r1, [pc, #380]	; (20000aa8 <Timer1_IRQHandler+0x230>)
2000092c:	f001 ff04 	bl	20002738 <__aeabi_fdiv>
20000930:	4603      	mov	r3, r0
20000932:	613b      	str	r3, [r7, #16]

    //average accl readings
    static int16_t accl_avgs[NUMBER_SAMPLES];
    static int index_accl = 0;

    accl_avgs[index_accl] = Y_ACCL;
20000934:	f642 2378 	movw	r3, #10872	; 0x2a78
20000938:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000093c:	681a      	ldr	r2, [r3, #0]
2000093e:	f642 3344 	movw	r3, #11076	; 0x2b44
20000942:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000946:	881b      	ldrh	r3, [r3, #0]
20000948:	4619      	mov	r1, r3
2000094a:	f642 237c 	movw	r3, #10876	; 0x2a7c
2000094e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000952:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    index_accl++;
20000956:	f642 2378 	movw	r3, #10872	; 0x2a78
2000095a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000095e:	681b      	ldr	r3, [r3, #0]
20000960:	f103 0201 	add.w	r2, r3, #1
20000964:	f642 2378 	movw	r3, #10872	; 0x2a78
20000968:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000096c:	601a      	str	r2, [r3, #0]
    if (index_accl >= NUMBER_SAMPLES) index_accl = 0;
2000096e:	f642 2378 	movw	r3, #10872	; 0x2a78
20000972:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000976:	681b      	ldr	r3, [r3, #0]
20000978:	2b63      	cmp	r3, #99	; 0x63
2000097a:	dd06      	ble.n	2000098a <Timer1_IRQHandler+0x112>
2000097c:	f642 2378 	movw	r3, #10872	; 0x2a78
20000980:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000984:	f04f 0200 	mov.w	r2, #0
20000988:	601a      	str	r2, [r3, #0]

    int32_t total_accl = 0;
2000098a:	f04f 0300 	mov.w	r3, #0
2000098e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NUMBER_SAMPLES; ++i) {
20000990:	f04f 0300 	mov.w	r3, #0
20000994:	607b      	str	r3, [r7, #4]
20000996:	e00e      	b.n	200009b6 <Timer1_IRQHandler+0x13e>
        total_accl += accl_avgs[i];
20000998:	687a      	ldr	r2, [r7, #4]
2000099a:	f642 237c 	movw	r3, #10876	; 0x2a7c
2000099e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200009a6:	b21b      	sxth	r3, r3
200009a8:	697a      	ldr	r2, [r7, #20]
200009aa:	4413      	add	r3, r2
200009ac:	617b      	str	r3, [r7, #20]

    index_accl++;
    if (index_accl >= NUMBER_SAMPLES) index_accl = 0;

    int32_t total_accl = 0;
    for (i = 0; i < NUMBER_SAMPLES; ++i) {
200009ae:	687b      	ldr	r3, [r7, #4]
200009b0:	f103 0301 	add.w	r3, r3, #1
200009b4:	607b      	str	r3, [r7, #4]
200009b6:	687b      	ldr	r3, [r7, #4]
200009b8:	2b63      	cmp	r3, #99	; 0x63
200009ba:	dded      	ble.n	20000998 <Timer1_IRQHandler+0x120>
        total_accl += accl_avgs[i];
    }
    float accl_avg = total_accl / NUMBER_SAMPLES;
200009bc:	697a      	ldr	r2, [r7, #20]
200009be:	f248 531f 	movw	r3, #34079	; 0x851f
200009c2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
200009c6:	fb83 1302 	smull	r1, r3, r3, r2
200009ca:	ea4f 1163 	mov.w	r1, r3, asr #5
200009ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
200009d2:	ebc3 0301 	rsb	r3, r3, r1
200009d6:	4618      	mov	r0, r3
200009d8:	f001 fda6 	bl	20002528 <__aeabi_i2f>
200009dc:	4603      	mov	r3, r0
200009de:	61bb      	str	r3, [r7, #24]
    float accl_angle = (accl_avg * 90) / 16384;
200009e0:	69b8      	ldr	r0, [r7, #24]
200009e2:	4932      	ldr	r1, [pc, #200]	; (20000aac <Timer1_IRQHandler+0x234>)
200009e4:	f001 fdf4 	bl	200025d0 <__aeabi_fmul>
200009e8:	4603      	mov	r3, r0
200009ea:	4618      	mov	r0, r3
200009ec:	4930      	ldr	r1, [pc, #192]	; (20000ab0 <Timer1_IRQHandler+0x238>)
200009ee:	f001 fea3 	bl	20002738 <__aeabi_fdiv>
200009f2:	4603      	mov	r3, r0
200009f4:	61fb      	str	r3, [r7, #28]

    //combine accel and gyro


    angle = (0.98) * (angle + gyro_angle * dt) + (0.02) * accl_angle;
200009f6:	f642 13a8 	movw	r3, #10664	; 0x29a8
200009fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009fe:	681b      	ldr	r3, [r3, #0]
20000a00:	4618      	mov	r0, r3
20000a02:	f001 fa01 	bl	20001e08 <__aeabi_f2d>
20000a06:	4604      	mov	r4, r0
20000a08:	460d      	mov	r5, r1
20000a0a:	6938      	ldr	r0, [r7, #16]
20000a0c:	f001 f9fc 	bl	20001e08 <__aeabi_f2d>
20000a10:	4602      	mov	r2, r0
20000a12:	460b      	mov	r3, r1
20000a14:	4610      	mov	r0, r2
20000a16:	4619      	mov	r1, r3
20000a18:	a31d      	add	r3, pc, #116	; (adr r3, 20000a90 <Timer1_IRQHandler+0x218>)
20000a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
20000a1e:	f001 fa47 	bl	20001eb0 <__aeabi_dmul>
20000a22:	4602      	mov	r2, r0
20000a24:	460b      	mov	r3, r1
20000a26:	4620      	mov	r0, r4
20000a28:	4629      	mov	r1, r5
20000a2a:	f001 f88f 	bl	20001b4c <__adddf3>
20000a2e:	4602      	mov	r2, r0
20000a30:	460b      	mov	r3, r1
20000a32:	4610      	mov	r0, r2
20000a34:	4619      	mov	r1, r3
20000a36:	a318      	add	r3, pc, #96	; (adr r3, 20000a98 <Timer1_IRQHandler+0x220>)
20000a38:	e9d3 2300 	ldrd	r2, r3, [r3]
20000a3c:	f001 fa38 	bl	20001eb0 <__aeabi_dmul>
20000a40:	4602      	mov	r2, r0
20000a42:	460b      	mov	r3, r1
20000a44:	4614      	mov	r4, r2
20000a46:	461d      	mov	r5, r3
20000a48:	69f8      	ldr	r0, [r7, #28]
20000a4a:	f001 f9dd 	bl	20001e08 <__aeabi_f2d>
20000a4e:	4602      	mov	r2, r0
20000a50:	460b      	mov	r3, r1
20000a52:	4610      	mov	r0, r2
20000a54:	4619      	mov	r1, r3
20000a56:	a312      	add	r3, pc, #72	; (adr r3, 20000aa0 <Timer1_IRQHandler+0x228>)
20000a58:	e9d3 2300 	ldrd	r2, r3, [r3]
20000a5c:	f001 fa28 	bl	20001eb0 <__aeabi_dmul>
20000a60:	4602      	mov	r2, r0
20000a62:	460b      	mov	r3, r1
20000a64:	4620      	mov	r0, r4
20000a66:	4629      	mov	r1, r5
20000a68:	f001 f870 	bl	20001b4c <__adddf3>
20000a6c:	4602      	mov	r2, r0
20000a6e:	460b      	mov	r3, r1
20000a70:	4610      	mov	r0, r2
20000a72:	4619      	mov	r1, r3
20000a74:	f001 fc4e 	bl	20002314 <__aeabi_d2f>
20000a78:	4602      	mov	r2, r0
20000a7a:	f642 13a8 	movw	r3, #10664	; 0x29a8
20000a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a82:	601a      	str	r2, [r3, #0]

    //printf("angle! : %f\r\n", angle);

    MSS_TIM1_clear_irq();
20000a84:	f7ff fe7e 	bl	20000784 <MSS_TIM1_clear_irq>
}
20000a88:	f107 0720 	add.w	r7, r7, #32
20000a8c:	46bd      	mov	sp, r7
20000a8e:	bdb0      	pop	{r4, r5, r7, pc}
20000a90:	d2f1a9fc 	.word	0xd2f1a9fc
20000a94:	3f50624d 	.word	0x3f50624d
20000a98:	f5c28f5c 	.word	0xf5c28f5c
20000a9c:	3fef5c28 	.word	0x3fef5c28
20000aa0:	47ae147b 	.word	0x47ae147b
20000aa4:	3f947ae1 	.word	0x3f947ae1
20000aa8:	43030000 	.word	0x43030000
20000aac:	42b40000 	.word	0x42b40000
20000ab0:	46800000 	.word	0x46800000
20000ab4:	f3af 8000 	nop.w

20000ab8 <main>:

int main()
{
20000ab8:	b580      	push	{r7, lr}
20000aba:	b084      	sub	sp, #16
20000abc:	af00      	add	r7, sp, #0
	//uint32_t count;

	MSS_GPIO_init();
20000abe:	f000 ffa9 	bl	20001a14 <MSS_GPIO_init>
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE);
20000ac2:	f04f 0000 	mov.w	r0, #0
20000ac6:	f04f 0105 	mov.w	r1, #5
20000aca:	f000 ffd9 	bl	20001a80 <MSS_GPIO_config>
	MSS_GPIO_config( MSS_GPIO_1, MSS_GPIO_OUTPUT_MODE);
20000ace:	f04f 0001 	mov.w	r0, #1
20000ad2:	f04f 0105 	mov.w	r1, #5
20000ad6:	f000 ffd3 	bl	20001a80 <MSS_GPIO_config>


	MSS_I2C_init(&g_mss_i2c1 , IMU_ADDRESS_WRITE, MSS_I2C_PCLK_DIV_256 );
20000ada:	f642 30dc 	movw	r0, #11228	; 0x2bdc
20000ade:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ae2:	f04f 01d0 	mov.w	r1, #208	; 0xd0
20000ae6:	f04f 0200 	mov.w	r2, #0
20000aea:	f000 f9fd 	bl	20000ee8 <MSS_I2C_init>
	imu_init();
20000aee:	f7ff fcd7 	bl	200004a0 <imu_init>

	//one timer tick is 10ns at 100Mhz
	MSS_TIM1_init( MSS_TIMER_PERIODIC_MODE);
20000af2:	f04f 0000 	mov.w	r0, #0
20000af6:	f7ff fdd5 	bl	200006a4 <MSS_TIM1_init>
	MSS_TIM1_enable_irq();
20000afa:	f7ff fe33 	bl	20000764 <MSS_TIM1_enable_irq>
	MSS_TIM1_load_background(100000);
20000afe:	f248 60a0 	movw	r0, #34464	; 0x86a0
20000b02:	f2c0 0001 	movt	r0, #1
20000b06:	f7ff fe1d 	bl	20000744 <MSS_TIM1_load_background>
	MSS_TIM1_start();
20000b0a:	f7ff fe0d 	bl	20000728 <MSS_TIM1_start>

	MSS_TIM2_init( MSS_TIMER_ONE_SHOT_MODE);
20000b0e:	f04f 0001 	mov.w	r0, #1
20000b12:	f7ff fe45 	bl	200007a0 <MSS_TIM2_init>
		//int16_t y_accl = imu_accl_y();
		//int16_t z_accl = imu_accl_z();



	    X_GYRO = imu_gyro_x();
20000b16:	f7ff fcef 	bl	200004f8 <imu_gyro_x>
20000b1a:	4603      	mov	r3, r0
20000b1c:	461a      	mov	r2, r3
20000b1e:	f642 3346 	movw	r3, #11078	; 0x2b46
20000b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b26:	801a      	strh	r2, [r3, #0]
	    Y_ACCL = imu_accl_y();
20000b28:	f7ff fcc4 	bl	200004b4 <imu_accl_y>
20000b2c:	4603      	mov	r3, r0
20000b2e:	b29b      	uxth	r3, r3
20000b30:	b29a      	uxth	r2, r3
20000b32:	f642 3344 	movw	r3, #11076	; 0x2b44
20000b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b3a:	801a      	strh	r2, [r3, #0]



		//150000 = 1.5ms pulse
		//1.49ms pulse = equilibrium point
		uint32_t pulsewidth_right = 150000 + (angle/90.0)*100000;
20000b3c:	f642 13a8 	movw	r3, #10664	; 0x29a8
20000b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b44:	681b      	ldr	r3, [r3, #0]
20000b46:	4618      	mov	r0, r3
20000b48:	f001 f95e 	bl	20001e08 <__aeabi_f2d>
20000b4c:	4602      	mov	r2, r0
20000b4e:	460b      	mov	r3, r1
20000b50:	4610      	mov	r0, r2
20000b52:	4619      	mov	r1, r3
20000b54:	a344      	add	r3, pc, #272	; (adr r3, 20000c68 <main+0x1b0>)
20000b56:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b5a:	f001 fad3 	bl	20002104 <__aeabi_ddiv>
20000b5e:	4602      	mov	r2, r0
20000b60:	460b      	mov	r3, r1
20000b62:	4610      	mov	r0, r2
20000b64:	4619      	mov	r1, r3
20000b66:	a342      	add	r3, pc, #264	; (adr r3, 20000c70 <main+0x1b8>)
20000b68:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b6c:	f001 f9a0 	bl	20001eb0 <__aeabi_dmul>
20000b70:	4602      	mov	r2, r0
20000b72:	460b      	mov	r3, r1
20000b74:	4610      	mov	r0, r2
20000b76:	4619      	mov	r1, r3
20000b78:	a33f      	add	r3, pc, #252	; (adr r3, 20000c78 <main+0x1c0>)
20000b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b7e:	f000 ffe5 	bl	20001b4c <__adddf3>
20000b82:	4602      	mov	r2, r0
20000b84:	460b      	mov	r3, r1
20000b86:	4610      	mov	r0, r2
20000b88:	4619      	mov	r1, r3
20000b8a:	f001 fba3 	bl	200022d4 <__aeabi_d2uiz>
20000b8e:	4603      	mov	r3, r0
20000b90:	607b      	str	r3, [r7, #4]
		uint32_t pulsewidth_left = 150000 - (angle/90.0)*100000;
20000b92:	f642 13a8 	movw	r3, #10664	; 0x29a8
20000b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b9a:	681b      	ldr	r3, [r3, #0]
20000b9c:	4618      	mov	r0, r3
20000b9e:	f001 f933 	bl	20001e08 <__aeabi_f2d>
20000ba2:	4602      	mov	r2, r0
20000ba4:	460b      	mov	r3, r1
20000ba6:	4610      	mov	r0, r2
20000ba8:	4619      	mov	r1, r3
20000baa:	a32f      	add	r3, pc, #188	; (adr r3, 20000c68 <main+0x1b0>)
20000bac:	e9d3 2300 	ldrd	r2, r3, [r3]
20000bb0:	f001 faa8 	bl	20002104 <__aeabi_ddiv>
20000bb4:	4602      	mov	r2, r0
20000bb6:	460b      	mov	r3, r1
20000bb8:	4610      	mov	r0, r2
20000bba:	4619      	mov	r1, r3
20000bbc:	a330      	add	r3, pc, #192	; (adr r3, 20000c80 <main+0x1c8>)
20000bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
20000bc2:	f001 f975 	bl	20001eb0 <__aeabi_dmul>
20000bc6:	4602      	mov	r2, r0
20000bc8:	460b      	mov	r3, r1
20000bca:	4610      	mov	r0, r2
20000bcc:	4619      	mov	r1, r3
20000bce:	a32a      	add	r3, pc, #168	; (adr r3, 20000c78 <main+0x1c0>)
20000bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
20000bd4:	f000 ffba 	bl	20001b4c <__adddf3>
20000bd8:	4602      	mov	r2, r0
20000bda:	460b      	mov	r3, r1
20000bdc:	4610      	mov	r0, r2
20000bde:	4619      	mov	r1, r3
20000be0:	f001 fb78 	bl	200022d4 <__aeabi_d2uiz>
20000be4:	4603      	mov	r3, r0
20000be6:	60bb      	str	r3, [r7, #8]
		uint32_t period = 2000000;
20000be8:	f248 4380 	movw	r3, #33920	; 0x8480
20000bec:	f2c0 031e 	movt	r3, #30
20000bf0:	60fb      	str	r3, [r7, #12]
		MSS_TIM2_load_immediate(period);
20000bf2:	68f8      	ldr	r0, [r7, #12]
20000bf4:	f7ff fe30 	bl	20000858 <MSS_TIM2_load_immediate>
	    MSS_TIM2_start();
20000bf8:	f7ff fe14 	bl	20000824 <MSS_TIM2_start>

	    while (MSS_TIM2_get_current_value() > 0) {
20000bfc:	e02b      	b.n	20000c56 <main+0x19e>

	    	if (MSS_TIM2_get_current_value() > (period - pulsewidth_right))
20000bfe:	f7ff fe1f 	bl	20000840 <MSS_TIM2_get_current_value>
20000c02:	4602      	mov	r2, r0
20000c04:	68f9      	ldr	r1, [r7, #12]
20000c06:	687b      	ldr	r3, [r7, #4]
20000c08:	ebc3 0301 	rsb	r3, r3, r1
20000c0c:	429a      	cmp	r2, r3
20000c0e:	d906      	bls.n	20000c1e <main+0x166>
	    		MSS_GPIO_set_output( MSS_GPIO_0, 1);
20000c10:	f04f 0000 	mov.w	r0, #0
20000c14:	f04f 0101 	mov.w	r1, #1
20000c18:	f000 ff50 	bl	20001abc <MSS_GPIO_set_output>
20000c1c:	e005      	b.n	20000c2a <main+0x172>
	    	else
	    		MSS_GPIO_set_output( MSS_GPIO_0, 0);
20000c1e:	f04f 0000 	mov.w	r0, #0
20000c22:	f04f 0100 	mov.w	r1, #0
20000c26:	f000 ff49 	bl	20001abc <MSS_GPIO_set_output>

	    	if (MSS_TIM2_get_current_value() > (period - pulsewidth_left))
20000c2a:	f7ff fe09 	bl	20000840 <MSS_TIM2_get_current_value>
20000c2e:	4602      	mov	r2, r0
20000c30:	68f9      	ldr	r1, [r7, #12]
20000c32:	68bb      	ldr	r3, [r7, #8]
20000c34:	ebc3 0301 	rsb	r3, r3, r1
20000c38:	429a      	cmp	r2, r3
20000c3a:	d906      	bls.n	20000c4a <main+0x192>
                MSS_GPIO_set_output( MSS_GPIO_1, 1);
20000c3c:	f04f 0001 	mov.w	r0, #1
20000c40:	f04f 0101 	mov.w	r1, #1
20000c44:	f000 ff3a 	bl	20001abc <MSS_GPIO_set_output>
20000c48:	e005      	b.n	20000c56 <main+0x19e>
            else
                MSS_GPIO_set_output( MSS_GPIO_1, 0);
20000c4a:	f04f 0001 	mov.w	r0, #1
20000c4e:	f04f 0100 	mov.w	r1, #0
20000c52:	f000 ff33 	bl	20001abc <MSS_GPIO_set_output>
		uint32_t pulsewidth_left = 150000 - (angle/90.0)*100000;
		uint32_t period = 2000000;
		MSS_TIM2_load_immediate(period);
	    MSS_TIM2_start();

	    while (MSS_TIM2_get_current_value() > 0) {
20000c56:	f7ff fdf3 	bl	20000840 <MSS_TIM2_get_current_value>
20000c5a:	4603      	mov	r3, r0
20000c5c:	2b00      	cmp	r3, #0
20000c5e:	d1ce      	bne.n	20000bfe <main+0x146>
	    	if (MSS_TIM2_get_current_value() > (period - pulsewidth_left))
                MSS_GPIO_set_output( MSS_GPIO_1, 1);
            else
                MSS_GPIO_set_output( MSS_GPIO_1, 0);
	    }
	}
20000c60:	e759      	b.n	20000b16 <main+0x5e>
20000c62:	bf00      	nop
20000c64:	f3af 8000 	nop.w
20000c68:	00000000 	.word	0x00000000
20000c6c:	40568000 	.word	0x40568000
20000c70:	00000000 	.word	0x00000000
20000c74:	40f86a00 	.word	0x40f86a00
20000c78:	00000000 	.word	0x00000000
20000c7c:	41024f80 	.word	0x41024f80
20000c80:	00000000 	.word	0x00000000
20000c84:	c0f86a00 	.word	0xc0f86a00

20000c88 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000c88:	b480      	push	{r7}
20000c8a:	b083      	sub	sp, #12
20000c8c:	af00      	add	r7, sp, #0
20000c8e:	4603      	mov	r3, r0
20000c90:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000c92:	f24e 1300 	movw	r3, #57600	; 0xe100
20000c96:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000c9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000c9e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000ca2:	88f9      	ldrh	r1, [r7, #6]
20000ca4:	f001 011f 	and.w	r1, r1, #31
20000ca8:	f04f 0001 	mov.w	r0, #1
20000cac:	fa00 f101 	lsl.w	r1, r0, r1
20000cb0:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000cb8:	f107 070c 	add.w	r7, r7, #12
20000cbc:	46bd      	mov	sp, r7
20000cbe:	bc80      	pop	{r7}
20000cc0:	4770      	bx	lr
20000cc2:	bf00      	nop

20000cc4 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20000cc4:	b580      	push	{r7, lr}
20000cc6:	b084      	sub	sp, #16
20000cc8:	af00      	add	r7, sp, #0
20000cca:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000ccc:	687a      	ldr	r2, [r7, #4]
20000cce:	f642 3370 	movw	r3, #11120	; 0x2b70
20000cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cd6:	429a      	cmp	r2, r3
20000cd8:	d007      	beq.n	20000cea <MSS_UART_isr+0x26>
20000cda:	687a      	ldr	r2, [r7, #4]
20000cdc:	f642 3348 	movw	r3, #11080	; 0x2b48
20000ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ce4:	429a      	cmp	r2, r3
20000ce6:	d000      	beq.n	20000cea <MSS_UART_isr+0x26>
20000ce8:	be00      	bkpt	0x0000

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
20000cea:	687a      	ldr	r2, [r7, #4]
20000cec:	f642 3370 	movw	r3, #11120	; 0x2b70
20000cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cf4:	429a      	cmp	r2, r3
20000cf6:	d006      	beq.n	20000d06 <MSS_UART_isr+0x42>
20000cf8:	687a      	ldr	r2, [r7, #4]
20000cfa:	f642 3348 	movw	r3, #11080	; 0x2b48
20000cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d02:	429a      	cmp	r2, r3
20000d04:	d167      	bne.n	20000dd6 <MSS_UART_isr+0x112>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20000d06:	687b      	ldr	r3, [r7, #4]
20000d08:	681b      	ldr	r3, [r3, #0]
20000d0a:	7a1b      	ldrb	r3, [r3, #8]
20000d0c:	b2db      	uxtb	r3, r3
20000d0e:	f003 030f 	and.w	r3, r3, #15
20000d12:	73fb      	strb	r3, [r7, #15]

        switch ( iirf )
20000d14:	7bfb      	ldrb	r3, [r7, #15]
20000d16:	2b0c      	cmp	r3, #12
20000d18:	d854      	bhi.n	20000dc4 <MSS_UART_isr+0x100>
20000d1a:	a201      	add	r2, pc, #4	; (adr r2, 20000d20 <MSS_UART_isr+0x5c>)
20000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000d20:	20000d55 	.word	0x20000d55
20000d24:	20000dc5 	.word	0x20000dc5
20000d28:	20000d71 	.word	0x20000d71
20000d2c:	20000dc5 	.word	0x20000dc5
20000d30:	20000d8d 	.word	0x20000d8d
20000d34:	20000dc5 	.word	0x20000dc5
20000d38:	20000da9 	.word	0x20000da9
20000d3c:	20000dc5 	.word	0x20000dc5
20000d40:	20000dc5 	.word	0x20000dc5
20000d44:	20000dc5 	.word	0x20000dc5
20000d48:	20000dc5 	.word	0x20000dc5
20000d4c:	20000dc5 	.word	0x20000dc5
20000d50:	20000d8d 	.word	0x20000d8d
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
20000d54:	687b      	ldr	r3, [r7, #4]
20000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000d58:	2b00      	cmp	r3, #0
20000d5a:	d100      	bne.n	20000d5e <MSS_UART_isr+0x9a>
20000d5c:	be00      	bkpt	0x0000
                if( NULL_HANDLER != this_uart->modemsts_handler )
20000d5e:	687b      	ldr	r3, [r7, #4]
20000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000d62:	2b00      	cmp	r3, #0
20000d64:	d030      	beq.n	20000dc8 <MSS_UART_isr+0x104>
                {
                   (*(this_uart->modemsts_handler))( this_uart );
20000d66:	687b      	ldr	r3, [r7, #4]
20000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000d6a:	6878      	ldr	r0, [r7, #4]
20000d6c:	4798      	blx	r3
                }
            }
            break;
20000d6e:	e032      	b.n	20000dd6 <MSS_UART_isr+0x112>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20000d70:	687b      	ldr	r3, [r7, #4]
20000d72:	6a1b      	ldr	r3, [r3, #32]
20000d74:	2b00      	cmp	r3, #0
20000d76:	d100      	bne.n	20000d7a <MSS_UART_isr+0xb6>
20000d78:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->tx_handler )
20000d7a:	687b      	ldr	r3, [r7, #4]
20000d7c:	6a1b      	ldr	r3, [r3, #32]
20000d7e:	2b00      	cmp	r3, #0
20000d80:	d024      	beq.n	20000dcc <MSS_UART_isr+0x108>
                {
                    (*(this_uart->tx_handler))( this_uart );
20000d82:	687b      	ldr	r3, [r7, #4]
20000d84:	6a1b      	ldr	r3, [r3, #32]
20000d86:	6878      	ldr	r0, [r7, #4]
20000d88:	4798      	blx	r3
                }
            }
            break;
20000d8a:	e024      	b.n	20000dd6 <MSS_UART_isr+0x112>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20000d8c:	687b      	ldr	r3, [r7, #4]
20000d8e:	69db      	ldr	r3, [r3, #28]
20000d90:	2b00      	cmp	r3, #0
20000d92:	d100      	bne.n	20000d96 <MSS_UART_isr+0xd2>
20000d94:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->rx_handler )
20000d96:	687b      	ldr	r3, [r7, #4]
20000d98:	69db      	ldr	r3, [r3, #28]
20000d9a:	2b00      	cmp	r3, #0
20000d9c:	d018      	beq.n	20000dd0 <MSS_UART_isr+0x10c>
                {
                    (*(this_uart->rx_handler))( this_uart );
20000d9e:	687b      	ldr	r3, [r7, #4]
20000da0:	69db      	ldr	r3, [r3, #28]
20000da2:	6878      	ldr	r0, [r7, #4]
20000da4:	4798      	blx	r3
                }
            }
            break;
20000da6:	e016      	b.n	20000dd6 <MSS_UART_isr+0x112>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20000da8:	687b      	ldr	r3, [r7, #4]
20000daa:	699b      	ldr	r3, [r3, #24]
20000dac:	2b00      	cmp	r3, #0
20000dae:	d100      	bne.n	20000db2 <MSS_UART_isr+0xee>
20000db0:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->linests_handler )
20000db2:	687b      	ldr	r3, [r7, #4]
20000db4:	699b      	ldr	r3, [r3, #24]
20000db6:	2b00      	cmp	r3, #0
20000db8:	d00c      	beq.n	20000dd4 <MSS_UART_isr+0x110>
                {
                   (*(this_uart->linests_handler))( this_uart );
20000dba:	687b      	ldr	r3, [r7, #4]
20000dbc:	699b      	ldr	r3, [r3, #24]
20000dbe:	6878      	ldr	r0, [r7, #4]
20000dc0:	4798      	blx	r3
                }
            }
            break;
20000dc2:	e008      	b.n	20000dd6 <MSS_UART_isr+0x112>

            default:
            {
                ASSERT( INVALID_INTERRUPT );
20000dc4:	be00      	bkpt	0x0000
20000dc6:	e006      	b.n	20000dd6 <MSS_UART_isr+0x112>
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
                }
            }
            break;
20000dc8:	bf00      	nop
20000dca:	e004      	b.n	20000dd6 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
                }
            }
            break;
20000dcc:	bf00      	nop
20000dce:	e002      	b.n	20000dd6 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
                }
            }
            break;
20000dd0:	bf00      	nop
20000dd2:	e000      	b.n	20000dd6 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
                }
            }
            break;
20000dd4:	bf00      	nop
                ASSERT( INVALID_INTERRUPT );
            }
            break;
        }
    }
}
20000dd6:	f107 0710 	add.w	r7, r7, #16
20000dda:	46bd      	mov	sp, r7
20000ddc:	bd80      	pop	{r7, pc}
20000dde:	bf00      	nop

20000de0 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20000de0:	4668      	mov	r0, sp
20000de2:	f020 0107 	bic.w	r1, r0, #7
20000de6:	468d      	mov	sp, r1
20000de8:	b589      	push	{r0, r3, r7, lr}
20000dea:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart0 );
20000dec:	f642 3070 	movw	r0, #11120	; 0x2b70
20000df0:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000df4:	f7ff ff66 	bl	20000cc4 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART0_IRQn );
20000df8:	f04f 000a 	mov.w	r0, #10
20000dfc:	f7ff ff44 	bl	20000c88 <NVIC_ClearPendingIRQ>
}
20000e00:	46bd      	mov	sp, r7
20000e02:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20000e06:	4685      	mov	sp, r0
20000e08:	4770      	bx	lr
20000e0a:	bf00      	nop

20000e0c <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20000e0c:	4668      	mov	r0, sp
20000e0e:	f020 0107 	bic.w	r1, r0, #7
20000e12:	468d      	mov	sp, r1
20000e14:	b589      	push	{r0, r3, r7, lr}
20000e16:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart1 );
20000e18:	f642 3048 	movw	r0, #11080	; 0x2b48
20000e1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e20:	f7ff ff50 	bl	20000cc4 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART1_IRQn );
20000e24:	f04f 000b 	mov.w	r0, #11
20000e28:	f7ff ff2e 	bl	20000c88 <NVIC_ClearPendingIRQ>
}
20000e2c:	46bd      	mov	sp, r7
20000e2e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20000e32:	4685      	mov	sp, r0
20000e34:	4770      	bx	lr
20000e36:	bf00      	nop

20000e38 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20000e38:	b480      	push	{r7}
20000e3a:	b083      	sub	sp, #12
20000e3c:	af00      	add	r7, sp, #0
20000e3e:	4603      	mov	r3, r0
20000e40:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000e42:	f24e 1300 	movw	r3, #57600	; 0xe100
20000e46:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000e4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000e4e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000e52:	88f9      	ldrh	r1, [r7, #6]
20000e54:	f001 011f 	and.w	r1, r1, #31
20000e58:	f04f 0001 	mov.w	r0, #1
20000e5c:	fa00 f101 	lsl.w	r1, r0, r1
20000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000e64:	f107 070c 	add.w	r7, r7, #12
20000e68:	46bd      	mov	sp, r7
20000e6a:	bc80      	pop	{r7}
20000e6c:	4770      	bx	lr
20000e6e:	bf00      	nop

20000e70 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000e70:	b480      	push	{r7}
20000e72:	b083      	sub	sp, #12
20000e74:	af00      	add	r7, sp, #0
20000e76:	4603      	mov	r3, r0
20000e78:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000e7a:	f24e 1300 	movw	r3, #57600	; 0xe100
20000e7e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000e82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000e86:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000e8a:	88f9      	ldrh	r1, [r7, #6]
20000e8c:	f001 011f 	and.w	r1, r1, #31
20000e90:	f04f 0001 	mov.w	r0, #1
20000e94:	fa00 f101 	lsl.w	r1, r0, r1
20000e98:	f102 0220 	add.w	r2, r2, #32
20000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000ea0:	f107 070c 	add.w	r7, r7, #12
20000ea4:	46bd      	mov	sp, r7
20000ea6:	bc80      	pop	{r7}
20000ea8:	4770      	bx	lr
20000eaa:	bf00      	nop

20000eac <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000eac:	b480      	push	{r7}
20000eae:	b083      	sub	sp, #12
20000eb0:	af00      	add	r7, sp, #0
20000eb2:	4603      	mov	r3, r0
20000eb4:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000eb6:	f24e 1300 	movw	r3, #57600	; 0xe100
20000eba:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000ebe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000ec2:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000ec6:	88f9      	ldrh	r1, [r7, #6]
20000ec8:	f001 011f 	and.w	r1, r1, #31
20000ecc:	f04f 0001 	mov.w	r0, #1
20000ed0:	fa00 f101 	lsl.w	r1, r0, r1
20000ed4:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000edc:	f107 070c 	add.w	r7, r7, #12
20000ee0:	46bd      	mov	sp, r7
20000ee2:	bc80      	pop	{r7}
20000ee4:	4770      	bx	lr
20000ee6:	bf00      	nop

20000ee8 <MSS_I2C_init>:
(
	mss_i2c_instance_t * this_i2c,
	uint8_t ser_address,
	mss_i2c_clock_divider_t ser_clock_speed
)
{
20000ee8:	b580      	push	{r7, lr}
20000eea:	b084      	sub	sp, #16
20000eec:	af00      	add	r7, sp, #0
20000eee:	6078      	str	r0, [r7, #4]
20000ef0:	4613      	mov	r3, r2
20000ef2:	460a      	mov	r2, r1
20000ef4:	70fa      	strb	r2, [r7, #3]
20000ef6:	70bb      	strb	r3, [r7, #2]
    uint_fast16_t clock_speed = ser_clock_speed;
20000ef8:	78bb      	ldrb	r3, [r7, #2]
20000efa:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000efc:	687a      	ldr	r2, [r7, #4]
20000efe:	f642 3398 	movw	r3, #11160	; 0x2b98
20000f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f06:	429a      	cmp	r2, r3
20000f08:	d007      	beq.n	20000f1a <MSS_I2C_init+0x32>
20000f0a:	687a      	ldr	r2, [r7, #4]
20000f0c:	f642 33dc 	movw	r3, #11228	; 0x2bdc
20000f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f14:	429a      	cmp	r2, r3
20000f16:	d000      	beq.n	20000f1a <MSS_I2C_init+0x32>
20000f18:	be00      	bkpt	0x0000
    
    if ( this_i2c == &g_mss_i2c0 )
20000f1a:	687a      	ldr	r2, [r7, #4]
20000f1c:	f642 3398 	movw	r3, #11160	; 0x2b98
20000f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f24:	429a      	cmp	r2, r3
20000f26:	d12c      	bne.n	20000f82 <MSS_I2C_init+0x9a>
    {
        this_i2c->irqn = I2C0_IRQn;
20000f28:	687b      	ldr	r3, [r7, #4]
20000f2a:	f04f 020e 	mov.w	r2, #14
20000f2e:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
20000f30:	687a      	ldr	r2, [r7, #4]
20000f32:	f242 0300 	movw	r3, #8192	; 0x2000
20000f36:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000f3a:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
20000f3c:	687a      	ldr	r2, [r7, #4]
20000f3e:	f240 0300 	movw	r3, #0
20000f42:	f2c4 2304 	movt	r3, #16900	; 0x4204
20000f46:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
20000f48:	f242 0300 	movw	r3, #8192	; 0x2000
20000f4c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000f50:	f242 0200 	movw	r2, #8192	; 0x2000
20000f54:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000f58:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20000f5e:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
20000f60:	f04f 000e 	mov.w	r0, #14
20000f64:	f7ff ffa2 	bl	20000eac <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
20000f68:	f242 0300 	movw	r3, #8192	; 0x2000
20000f6c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000f70:	f242 0200 	movw	r2, #8192	; 0x2000
20000f74:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000f78:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20000f7e:	631a      	str	r2, [r3, #48]	; 0x30
20000f80:	e02b      	b.n	20000fda <MSS_I2C_init+0xf2>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20000f82:	687b      	ldr	r3, [r7, #4]
20000f84:	f04f 0211 	mov.w	r2, #17
20000f88:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
20000f8a:	687a      	ldr	r2, [r7, #4]
20000f8c:	f242 0300 	movw	r3, #8192	; 0x2000
20000f90:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000f94:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20000f96:	687a      	ldr	r2, [r7, #4]
20000f98:	f240 0300 	movw	r3, #0
20000f9c:	f2c4 2324 	movt	r3, #16932	; 0x4224
20000fa0:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
20000fa2:	f242 0300 	movw	r3, #8192	; 0x2000
20000fa6:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000faa:	f242 0200 	movw	r2, #8192	; 0x2000
20000fae:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000fb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000fb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20000fb8:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
20000fba:	f04f 0011 	mov.w	r0, #17
20000fbe:	f7ff ff75 	bl	20000eac <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
20000fc2:	f242 0300 	movw	r3, #8192	; 0x2000
20000fc6:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000fca:	f242 0200 	movw	r2, #8192	; 0x2000
20000fce:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000fd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000fd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20000fd8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
	this_i2c->transaction = NO_TRANSACTION;
20000fda:	687b      	ldr	r3, [r7, #4]
20000fdc:	f04f 0200 	mov.w	r2, #0
20000fe0:	721a      	strb	r2, [r3, #8]
	
	this_i2c->ser_address = ser_address;
20000fe2:	78fa      	ldrb	r2, [r7, #3]
20000fe4:	687b      	ldr	r3, [r7, #4]
20000fe6:	601a      	str	r2, [r3, #0]
	
	this_i2c->tx_buffer = 0;
20000fe8:	687b      	ldr	r3, [r7, #4]
20000fea:	f04f 0200 	mov.w	r2, #0
20000fee:	61da      	str	r2, [r3, #28]
	this_i2c->tx_size = 0;
20000ff0:	687b      	ldr	r3, [r7, #4]
20000ff2:	f04f 0200 	mov.w	r2, #0
20000ff6:	621a      	str	r2, [r3, #32]
	this_i2c->tx_idx = 0;
20000ff8:	687b      	ldr	r3, [r7, #4]
20000ffa:	f04f 0200 	mov.w	r2, #0
20000ffe:	625a      	str	r2, [r3, #36]	; 0x24
	
	this_i2c->rx_buffer = 0;
20001000:	687b      	ldr	r3, [r7, #4]
20001002:	f04f 0200 	mov.w	r2, #0
20001006:	62da      	str	r2, [r3, #44]	; 0x2c
	this_i2c->rx_size = 0;
20001008:	687b      	ldr	r3, [r7, #4]
2000100a:	f04f 0200 	mov.w	r2, #0
2000100e:	631a      	str	r2, [r3, #48]	; 0x30
	this_i2c->rx_idx = 0;
20001010:	687b      	ldr	r3, [r7, #4]
20001012:	f04f 0200 	mov.w	r2, #0
20001016:	635a      	str	r2, [r3, #52]	; 0x34
	
    this_i2c->status = MSS_I2C_SUCCESS;
20001018:	687b      	ldr	r3, [r7, #4]
2000101a:	f04f 0200 	mov.w	r2, #0
2000101e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
	this_i2c->random_read_addr = 0;
20001022:	687b      	ldr	r3, [r7, #4]
20001024:	f04f 0200 	mov.w	r2, #0
20001028:	60da      	str	r2, [r3, #12]
	
	this_i2c->slave_write_handler = 0;
2000102a:	687b      	ldr	r3, [r7, #4]
2000102c:	f04f 0200 	mov.w	r2, #0
20001030:	641a      	str	r2, [r3, #64]	; 0x40
	this_i2c->slave_mem_offset_length = 0;
20001032:	687b      	ldr	r3, [r7, #4]
20001034:	f04f 0200 	mov.w	r2, #0
20001038:	63da      	str	r2, [r3, #60]	; 0x3c
    
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01; /* set enable bit */
2000103a:	687b      	ldr	r3, [r7, #4]
2000103c:	699b      	ldr	r3, [r3, #24]
2000103e:	f04f 0201 	mov.w	r2, #1
20001042:	619a      	str	r2, [r3, #24]
    this_i2c->hw_reg_bit->CTRL_CR2 = (clock_speed >> 2) & 0x01;
20001044:	687b      	ldr	r3, [r7, #4]
20001046:	699b      	ldr	r3, [r3, #24]
20001048:	68fa      	ldr	r2, [r7, #12]
2000104a:	ea4f 0292 	mov.w	r2, r2, lsr #2
2000104e:	f002 0201 	and.w	r2, r2, #1
20001052:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (clock_speed >> 1) & 0x01;
20001054:	687b      	ldr	r3, [r7, #4]
20001056:	699b      	ldr	r3, [r3, #24]
20001058:	68fa      	ldr	r2, [r7, #12]
2000105a:	ea4f 0252 	mov.w	r2, r2, lsr #1
2000105e:	f002 0201 	and.w	r2, r2, #1
20001062:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = clock_speed & 0x01;
20001064:	687b      	ldr	r3, [r7, #4]
20001066:	699b      	ldr	r3, [r3, #24]
20001068:	68fa      	ldr	r2, [r7, #12]
2000106a:	f002 0201 	and.w	r2, r2, #1
2000106e:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = this_i2c->ser_address;
20001070:	687b      	ldr	r3, [r7, #4]
20001072:	695b      	ldr	r3, [r3, #20]
20001074:	687a      	ldr	r2, [r7, #4]
20001076:	6812      	ldr	r2, [r2, #0]
20001078:	b2d2      	uxtb	r2, r2
2000107a:	731a      	strb	r2, [r3, #12]
}
2000107c:	f107 0710 	add.w	r7, r7, #16
20001080:	46bd      	mov	sp, r7
20001082:	bd80      	pop	{r7, pc}

20001084 <MSS_I2C_write>:
	uint8_t serial_addr,
	const uint8_t * write_buffer,
	uint16_t write_size,
    uint8_t options
)
{
20001084:	b580      	push	{r7, lr}
20001086:	b086      	sub	sp, #24
20001088:	af00      	add	r7, sp, #0
2000108a:	60f8      	str	r0, [r7, #12]
2000108c:	607a      	str	r2, [r7, #4]
2000108e:	460a      	mov	r2, r1
20001090:	72fa      	strb	r2, [r7, #11]
20001092:	807b      	strh	r3, [r7, #2]
    volatile uint8_t stat_ctrl;
    uint8_t serial_interrupt;
    
	uint32_t primask;

    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001094:	68fa      	ldr	r2, [r7, #12]
20001096:	f642 3398 	movw	r3, #11160	; 0x2b98
2000109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000109e:	429a      	cmp	r2, r3
200010a0:	d007      	beq.n	200010b2 <MSS_I2C_write+0x2e>
200010a2:	68fa      	ldr	r2, [r7, #12]
200010a4:	f642 33dc 	movw	r3, #11228	; 0x2bdc
200010a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010ac:	429a      	cmp	r2, r3
200010ae:	d000      	beq.n	200010b2 <MSS_I2C_write+0x2e>
200010b0:	be00      	bkpt	0x0000

	primask = disable_interrupts();
200010b2:	f000 fc4b 	bl	2000194c <disable_interrupts>
200010b6:	4603      	mov	r3, r0
200010b8:	617b      	str	r3, [r7, #20]

	this_i2c->transaction = MASTER_WRITE_TRANSACTION;
200010ba:	68fb      	ldr	r3, [r7, #12]
200010bc:	f04f 0201 	mov.w	r2, #1
200010c0:	721a      	strb	r2, [r3, #8]
	
	this_i2c->target_addr = serial_addr;
200010c2:	7afa      	ldrb	r2, [r7, #11]
200010c4:	68fb      	ldr	r3, [r7, #12]
200010c6:	605a      	str	r2, [r3, #4]
	this_i2c->dir = WRITE_DIR;
200010c8:	68fb      	ldr	r3, [r7, #12]
200010ca:	f04f 0200 	mov.w	r2, #0
200010ce:	629a      	str	r2, [r3, #40]	; 0x28
	this_i2c->tx_buffer = write_buffer;
200010d0:	68fb      	ldr	r3, [r7, #12]
200010d2:	687a      	ldr	r2, [r7, #4]
200010d4:	61da      	str	r2, [r3, #28]
	this_i2c->tx_size = write_size;
200010d6:	887a      	ldrh	r2, [r7, #2]
200010d8:	68fb      	ldr	r3, [r7, #12]
200010da:	621a      	str	r2, [r3, #32]
	this_i2c->tx_idx = 0;
200010dc:	68fb      	ldr	r3, [r7, #12]
200010de:	f04f 0200 	mov.w	r2, #0
200010e2:	625a      	str	r2, [r3, #36]	; 0x24
    
    this_i2c->status = MSS_I2C_IN_PROGRESS;
200010e4:	68fb      	ldr	r3, [r7, #12]
200010e6:	f04f 0201 	mov.w	r2, #1
200010ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    this_i2c->options = options;
200010ee:	68fb      	ldr	r3, [r7, #12]
200010f0:	f897 2020 	ldrb.w	r2, [r7, #32]
200010f4:	741a      	strb	r2, [r3, #16]

    /* Clear interrupts if required (depends on repeated starts).*/
    serial_interrupt = this_i2c->hw_reg_bit->CTRL_SI;
200010f6:	68fb      	ldr	r3, [r7, #12]
200010f8:	699b      	ldr	r3, [r3, #24]
200010fa:	68db      	ldr	r3, [r3, #12]
200010fc:	74fb      	strb	r3, [r7, #19]
    this_i2c->hw_reg_bit->CTRL_STA = 0x01;
200010fe:	68fb      	ldr	r3, [r7, #12]
20001100:	699b      	ldr	r3, [r3, #24]
20001102:	f04f 0201 	mov.w	r2, #1
20001106:	615a      	str	r2, [r3, #20]
    
    if ( serial_interrupt != 0 )
20001108:	7cfb      	ldrb	r3, [r7, #19]
2000110a:	2b00      	cmp	r3, #0
2000110c:	d00a      	beq.n	20001124 <MSS_I2C_write+0xa0>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0x00;
2000110e:	68fb      	ldr	r3, [r7, #12]
20001110:	699b      	ldr	r3, [r3, #24]
20001112:	f04f 0200 	mov.w	r2, #0
20001116:	60da      	str	r2, [r3, #12]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20001118:	68fb      	ldr	r3, [r7, #12]
2000111a:	8a5b      	ldrh	r3, [r3, #18]
2000111c:	b21b      	sxth	r3, r3
2000111e:	4618      	mov	r0, r3
20001120:	f7ff fec4 	bl	20000eac <NVIC_ClearPendingIRQ>
    }
    
    stat_ctrl = this_i2c->hw_reg->STATUS;
20001124:	68fb      	ldr	r3, [r7, #12]
20001126:	695b      	ldr	r3, [r3, #20]
20001128:	791b      	ldrb	r3, [r3, #4]
2000112a:	74bb      	strb	r3, [r7, #18]
    
    NVIC_EnableIRQ( this_i2c->irqn );
2000112c:	68fb      	ldr	r3, [r7, #12]
2000112e:	8a5b      	ldrh	r3, [r3, #18]
20001130:	b21b      	sxth	r3, r3
20001132:	4618      	mov	r0, r3
20001134:	f7ff fe80 	bl	20000e38 <NVIC_EnableIRQ>
    
    restore_interrupts( primask );
20001138:	6978      	ldr	r0, [r7, #20]
2000113a:	f000 fc15 	bl	20001968 <restore_interrupts>
}
2000113e:	f107 0718 	add.w	r7, r7, #24
20001142:	46bd      	mov	sp, r7
20001144:	bd80      	pop	{r7, pc}
20001146:	bf00      	nop

20001148 <MSS_I2C_read>:
	uint8_t serial_addr,
	uint8_t * read_buffer,
	uint16_t read_size,
    uint8_t options
)
{
20001148:	b580      	push	{r7, lr}
2000114a:	b088      	sub	sp, #32
2000114c:	af00      	add	r7, sp, #0
2000114e:	60f8      	str	r0, [r7, #12]
20001150:	607a      	str	r2, [r7, #4]
20001152:	460a      	mov	r2, r1
20001154:	72fa      	strb	r2, [r7, #11]
20001156:	807b      	strh	r3, [r7, #2]
	uint32_t primask;
	
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001158:	68fa      	ldr	r2, [r7, #12]
2000115a:	f642 3398 	movw	r3, #11160	; 0x2b98
2000115e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001162:	429a      	cmp	r2, r3
20001164:	d007      	beq.n	20001176 <MSS_I2C_read+0x2e>
20001166:	68fa      	ldr	r2, [r7, #12]
20001168:	f642 33dc 	movw	r3, #11228	; 0x2bdc
2000116c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001170:	429a      	cmp	r2, r3
20001172:	d000      	beq.n	20001176 <MSS_I2C_read+0x2e>
20001174:	be00      	bkpt	0x0000

	if ( read_size > 0 )
20001176:	887b      	ldrh	r3, [r7, #2]
20001178:	2b00      	cmp	r3, #0
2000117a:	d045      	beq.n	20001208 <MSS_I2C_read+0xc0>
	{
        volatile uint8_t stat_ctrl;
        uint8_t serial_interrupt;
        
		primask = disable_interrupts();
2000117c:	f000 fbe6 	bl	2000194c <disable_interrupts>
20001180:	4603      	mov	r3, r0
20001182:	61bb      	str	r3, [r7, #24]
		
		this_i2c->transaction = MASTER_READ_TRANSACTION;
20001184:	68fb      	ldr	r3, [r7, #12]
20001186:	f04f 0202 	mov.w	r2, #2
2000118a:	721a      	strb	r2, [r3, #8]
		
		this_i2c->target_addr = serial_addr;
2000118c:	7afa      	ldrb	r2, [r7, #11]
2000118e:	68fb      	ldr	r3, [r7, #12]
20001190:	605a      	str	r2, [r3, #4]
		this_i2c->dir = READ_DIR;
20001192:	68fb      	ldr	r3, [r7, #12]
20001194:	f04f 0201 	mov.w	r2, #1
20001198:	629a      	str	r2, [r3, #40]	; 0x28
		this_i2c->rx_buffer = read_buffer;
2000119a:	68fb      	ldr	r3, [r7, #12]
2000119c:	687a      	ldr	r2, [r7, #4]
2000119e:	62da      	str	r2, [r3, #44]	; 0x2c
		this_i2c->rx_size = read_size;
200011a0:	887a      	ldrh	r2, [r7, #2]
200011a2:	68fb      	ldr	r3, [r7, #12]
200011a4:	631a      	str	r2, [r3, #48]	; 0x30
		this_i2c->rx_idx = 0;
200011a6:	68fb      	ldr	r3, [r7, #12]
200011a8:	f04f 0200 	mov.w	r2, #0
200011ac:	635a      	str	r2, [r3, #52]	; 0x34
        
        this_i2c->status = MSS_I2C_IN_PROGRESS;
200011ae:	68fb      	ldr	r3, [r7, #12]
200011b0:	f04f 0201 	mov.w	r2, #1
200011b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        this_i2c->options = options;
200011b8:	68fb      	ldr	r3, [r7, #12]
200011ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
200011be:	741a      	strb	r2, [r3, #16]

        /* Clear interrupts if required (depends on repeated starts).*/		
        serial_interrupt = this_i2c->hw_reg_bit->CTRL_SI;
200011c0:	68fb      	ldr	r3, [r7, #12]
200011c2:	699b      	ldr	r3, [r3, #24]
200011c4:	68db      	ldr	r3, [r3, #12]
200011c6:	77fb      	strb	r3, [r7, #31]
        this_i2c->hw_reg_bit->CTRL_STA = 0x01;
200011c8:	68fb      	ldr	r3, [r7, #12]
200011ca:	699b      	ldr	r3, [r3, #24]
200011cc:	f04f 0201 	mov.w	r2, #1
200011d0:	615a      	str	r2, [r3, #20]
        
        if ( serial_interrupt != 0 )
200011d2:	7ffb      	ldrb	r3, [r7, #31]
200011d4:	2b00      	cmp	r3, #0
200011d6:	d00a      	beq.n	200011ee <MSS_I2C_read+0xa6>
        {
            this_i2c->hw_reg_bit->CTRL_SI = 0x00;
200011d8:	68fb      	ldr	r3, [r7, #12]
200011da:	699b      	ldr	r3, [r3, #24]
200011dc:	f04f 0200 	mov.w	r2, #0
200011e0:	60da      	str	r2, [r3, #12]
            NVIC_ClearPendingIRQ( this_i2c->irqn );
200011e2:	68fb      	ldr	r3, [r7, #12]
200011e4:	8a5b      	ldrh	r3, [r3, #18]
200011e6:	b21b      	sxth	r3, r3
200011e8:	4618      	mov	r0, r3
200011ea:	f7ff fe5f 	bl	20000eac <NVIC_ClearPendingIRQ>
        }
        
        stat_ctrl = this_i2c->hw_reg->STATUS;
200011ee:	68fb      	ldr	r3, [r7, #12]
200011f0:	695b      	ldr	r3, [r3, #20]
200011f2:	791b      	ldrb	r3, [r3, #4]
200011f4:	75fb      	strb	r3, [r7, #23]
        
        NVIC_EnableIRQ( this_i2c->irqn );
200011f6:	68fb      	ldr	r3, [r7, #12]
200011f8:	8a5b      	ldrh	r3, [r3, #18]
200011fa:	b21b      	sxth	r3, r3
200011fc:	4618      	mov	r0, r3
200011fe:	f7ff fe1b 	bl	20000e38 <NVIC_EnableIRQ>
        
        restore_interrupts( primask );
20001202:	69b8      	ldr	r0, [r7, #24]
20001204:	f000 fbb0 	bl	20001968 <restore_interrupts>
	}
}
20001208:	f107 0720 	add.w	r7, r7, #32
2000120c:	46bd      	mov	sp, r7
2000120e:	bd80      	pop	{r7, pc}

20001210 <MSS_I2C_wait_complete>:
 */
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c
)
{
20001210:	b480      	push	{r7}
20001212:	b083      	sub	sp, #12
20001214:	af00      	add	r7, sp, #0
20001216:	6078      	str	r0, [r7, #4]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001218:	687a      	ldr	r2, [r7, #4]
2000121a:	f642 3398 	movw	r3, #11160	; 0x2b98
2000121e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001222:	429a      	cmp	r2, r3
20001224:	d007      	beq.n	20001236 <MSS_I2C_wait_complete+0x26>
20001226:	687a      	ldr	r2, [r7, #4]
20001228:	f642 33dc 	movw	r3, #11228	; 0x2bdc
2000122c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001230:	429a      	cmp	r2, r3
20001232:	d000      	beq.n	20001236 <MSS_I2C_wait_complete+0x26>
20001234:	be00      	bkpt	0x0000

    while ( this_i2c->status == MSS_I2C_IN_PROGRESS )
20001236:	687b      	ldr	r3, [r7, #4]
20001238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2000123c:	b2db      	uxtb	r3, r3
2000123e:	2b01      	cmp	r3, #1
20001240:	d0f9      	beq.n	20001236 <MSS_I2C_wait_complete+0x26>
    {
        /* Wait for transaction to compltete.*/
        ;
    }
    return this_i2c->status;
20001242:	687b      	ldr	r3, [r7, #4]
20001244:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
20001248:	b2db      	uxtb	r3, r3
}
2000124a:	4618      	mov	r0, r3
2000124c:	f107 070c 	add.w	r7, r7, #12
20001250:	46bd      	mov	sp, r7
20001252:	bc80      	pop	{r7}
20001254:	4770      	bx	lr
20001256:	bf00      	nop

20001258 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
	mss_i2c_instance_t * this_i2c
)
{
20001258:	b580      	push	{r7, lr}
2000125a:	b084      	sub	sp, #16
2000125c:	af00      	add	r7, sp, #0
2000125e:	6078      	str	r0, [r7, #4]
	volatile uint8_t status;
	uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1;
20001260:	f04f 0301 	mov.w	r3, #1
20001264:	73bb      	strb	r3, [r7, #14]

    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001266:	687a      	ldr	r2, [r7, #4]
20001268:	f642 3398 	movw	r3, #11160	; 0x2b98
2000126c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001270:	429a      	cmp	r2, r3
20001272:	d007      	beq.n	20001284 <mss_i2c_isr+0x2c>
20001274:	687a      	ldr	r2, [r7, #4]
20001276:	f642 33dc 	movw	r3, #11228	; 0x2bdc
2000127a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000127e:	429a      	cmp	r2, r3
20001280:	d000      	beq.n	20001284 <mss_i2c_isr+0x2c>
20001282:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
20001284:	687b      	ldr	r3, [r7, #4]
20001286:	695b      	ldr	r3, [r3, #20]
20001288:	791b      	ldrb	r3, [r3, #4]
2000128a:	72fb      	strb	r3, [r7, #11]
    
	switch( status )
2000128c:	7afb      	ldrb	r3, [r7, #11]
2000128e:	b2db      	uxtb	r3, r3
20001290:	f1a3 0308 	sub.w	r3, r3, #8
20001294:	2bd0      	cmp	r3, #208	; 0xd0
20001296:	f200 8348 	bhi.w	2000192a <mss_i2c_isr+0x6d2>
2000129a:	a201      	add	r2, pc, #4	; (adr r2, 200012a0 <mss_i2c_isr+0x48>)
2000129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200012a0:	200015e5 	.word	0x200015e5
200012a4:	2000192b 	.word	0x2000192b
200012a8:	2000192b 	.word	0x2000192b
200012ac:	2000192b 	.word	0x2000192b
200012b0:	2000192b 	.word	0x2000192b
200012b4:	2000192b 	.word	0x2000192b
200012b8:	2000192b 	.word	0x2000192b
200012bc:	2000192b 	.word	0x2000192b
200012c0:	200015e5 	.word	0x200015e5
200012c4:	2000192b 	.word	0x2000192b
200012c8:	2000192b 	.word	0x2000192b
200012cc:	2000192b 	.word	0x2000192b
200012d0:	2000192b 	.word	0x2000192b
200012d4:	2000192b 	.word	0x2000192b
200012d8:	2000192b 	.word	0x2000192b
200012dc:	2000192b 	.word	0x2000192b
200012e0:	20001625 	.word	0x20001625
200012e4:	2000192b 	.word	0x2000192b
200012e8:	2000192b 	.word	0x2000192b
200012ec:	2000192b 	.word	0x2000192b
200012f0:	2000192b 	.word	0x2000192b
200012f4:	2000192b 	.word	0x2000192b
200012f8:	2000192b 	.word	0x2000192b
200012fc:	2000192b 	.word	0x2000192b
20001300:	2000165b 	.word	0x2000165b
20001304:	2000192b 	.word	0x2000192b
20001308:	2000192b 	.word	0x2000192b
2000130c:	2000192b 	.word	0x2000192b
20001310:	2000192b 	.word	0x2000192b
20001314:	2000192b 	.word	0x2000192b
20001318:	2000192b 	.word	0x2000192b
2000131c:	2000192b 	.word	0x2000192b
20001320:	20001671 	.word	0x20001671
20001324:	2000192b 	.word	0x2000192b
20001328:	2000192b 	.word	0x2000192b
2000132c:	2000192b 	.word	0x2000192b
20001330:	2000192b 	.word	0x2000192b
20001334:	2000192b 	.word	0x2000192b
20001338:	2000192b 	.word	0x2000192b
2000133c:	2000192b 	.word	0x2000192b
20001340:	200016ef 	.word	0x200016ef
20001344:	2000192b 	.word	0x2000192b
20001348:	2000192b 	.word	0x2000192b
2000134c:	2000192b 	.word	0x2000192b
20001350:	2000192b 	.word	0x2000192b
20001354:	2000192b 	.word	0x2000192b
20001358:	2000192b 	.word	0x2000192b
2000135c:	2000192b 	.word	0x2000192b
20001360:	20001619 	.word	0x20001619
20001364:	2000192b 	.word	0x2000192b
20001368:	2000192b 	.word	0x2000192b
2000136c:	2000192b 	.word	0x2000192b
20001370:	2000192b 	.word	0x2000192b
20001374:	2000192b 	.word	0x2000192b
20001378:	2000192b 	.word	0x2000192b
2000137c:	2000192b 	.word	0x2000192b
20001380:	20001705 	.word	0x20001705
20001384:	2000192b 	.word	0x2000192b
20001388:	2000192b 	.word	0x2000192b
2000138c:	2000192b 	.word	0x2000192b
20001390:	2000192b 	.word	0x2000192b
20001394:	2000192b 	.word	0x2000192b
20001398:	2000192b 	.word	0x2000192b
2000139c:	2000192b 	.word	0x2000192b
200013a0:	20001725 	.word	0x20001725
200013a4:	2000192b 	.word	0x2000192b
200013a8:	2000192b 	.word	0x2000192b
200013ac:	2000192b 	.word	0x2000192b
200013b0:	2000192b 	.word	0x2000192b
200013b4:	2000192b 	.word	0x2000192b
200013b8:	2000192b 	.word	0x2000192b
200013bc:	2000192b 	.word	0x2000192b
200013c0:	2000173b 	.word	0x2000173b
200013c4:	2000192b 	.word	0x2000192b
200013c8:	2000192b 	.word	0x2000192b
200013cc:	2000192b 	.word	0x2000192b
200013d0:	2000192b 	.word	0x2000192b
200013d4:	2000192b 	.word	0x2000192b
200013d8:	2000192b 	.word	0x2000192b
200013dc:	2000192b 	.word	0x2000192b
200013e0:	20001775 	.word	0x20001775
200013e4:	2000192b 	.word	0x2000192b
200013e8:	2000192b 	.word	0x2000192b
200013ec:	2000192b 	.word	0x2000192b
200013f0:	2000192b 	.word	0x2000192b
200013f4:	2000192b 	.word	0x2000192b
200013f8:	2000192b 	.word	0x2000192b
200013fc:	2000192b 	.word	0x2000192b
20001400:	200017f3 	.word	0x200017f3
20001404:	2000192b 	.word	0x2000192b
20001408:	2000192b 	.word	0x2000192b
2000140c:	2000192b 	.word	0x2000192b
20001410:	2000192b 	.word	0x2000192b
20001414:	2000192b 	.word	0x2000192b
20001418:	2000192b 	.word	0x2000192b
2000141c:	2000192b 	.word	0x2000192b
20001420:	2000192b 	.word	0x2000192b
20001424:	2000192b 	.word	0x2000192b
20001428:	2000192b 	.word	0x2000192b
2000142c:	2000192b 	.word	0x2000192b
20001430:	2000192b 	.word	0x2000192b
20001434:	2000192b 	.word	0x2000192b
20001438:	2000192b 	.word	0x2000192b
2000143c:	2000192b 	.word	0x2000192b
20001440:	2000192b 	.word	0x2000192b
20001444:	2000192b 	.word	0x2000192b
20001448:	2000192b 	.word	0x2000192b
2000144c:	2000192b 	.word	0x2000192b
20001450:	2000192b 	.word	0x2000192b
20001454:	2000192b 	.word	0x2000192b
20001458:	2000192b 	.word	0x2000192b
2000145c:	2000192b 	.word	0x2000192b
20001460:	2000192b 	.word	0x2000192b
20001464:	2000192b 	.word	0x2000192b
20001468:	2000192b 	.word	0x2000192b
2000146c:	2000192b 	.word	0x2000192b
20001470:	2000192b 	.word	0x2000192b
20001474:	2000192b 	.word	0x2000192b
20001478:	2000192b 	.word	0x2000192b
2000147c:	2000192b 	.word	0x2000192b
20001480:	2000180d 	.word	0x2000180d
20001484:	2000192b 	.word	0x2000192b
20001488:	2000192b 	.word	0x2000192b
2000148c:	2000192b 	.word	0x2000192b
20001490:	2000192b 	.word	0x2000192b
20001494:	2000192b 	.word	0x2000192b
20001498:	2000192b 	.word	0x2000192b
2000149c:	2000192b 	.word	0x2000192b
200014a0:	200017cb 	.word	0x200017cb
200014a4:	2000192b 	.word	0x2000192b
200014a8:	2000192b 	.word	0x2000192b
200014ac:	2000192b 	.word	0x2000192b
200014b0:	2000192b 	.word	0x2000192b
200014b4:	2000192b 	.word	0x2000192b
200014b8:	2000192b 	.word	0x2000192b
200014bc:	2000192b 	.word	0x2000192b
200014c0:	2000180d 	.word	0x2000180d
200014c4:	2000192b 	.word	0x2000192b
200014c8:	2000192b 	.word	0x2000192b
200014cc:	2000192b 	.word	0x2000192b
200014d0:	2000192b 	.word	0x2000192b
200014d4:	2000192b 	.word	0x2000192b
200014d8:	2000192b 	.word	0x2000192b
200014dc:	2000192b 	.word	0x2000192b
200014e0:	200017cb 	.word	0x200017cb
200014e4:	2000192b 	.word	0x2000192b
200014e8:	2000192b 	.word	0x2000192b
200014ec:	2000192b 	.word	0x2000192b
200014f0:	2000192b 	.word	0x2000192b
200014f4:	2000192b 	.word	0x2000192b
200014f8:	2000192b 	.word	0x2000192b
200014fc:	2000192b 	.word	0x2000192b
20001500:	20001857 	.word	0x20001857
20001504:	2000192b 	.word	0x2000192b
20001508:	2000192b 	.word	0x2000192b
2000150c:	2000192b 	.word	0x2000192b
20001510:	2000192b 	.word	0x2000192b
20001514:	2000192b 	.word	0x2000192b
20001518:	2000192b 	.word	0x2000192b
2000151c:	2000192b 	.word	0x2000192b
20001520:	200018c5 	.word	0x200018c5
20001524:	2000192b 	.word	0x2000192b
20001528:	2000192b 	.word	0x2000192b
2000152c:	2000192b 	.word	0x2000192b
20001530:	2000192b 	.word	0x2000192b
20001534:	2000192b 	.word	0x2000192b
20001538:	2000192b 	.word	0x2000192b
2000153c:	2000192b 	.word	0x2000192b
20001540:	200018c5 	.word	0x200018c5
20001544:	2000192b 	.word	0x2000192b
20001548:	2000192b 	.word	0x2000192b
2000154c:	2000192b 	.word	0x2000192b
20001550:	2000192b 	.word	0x2000192b
20001554:	2000192b 	.word	0x2000192b
20001558:	2000192b 	.word	0x2000192b
2000155c:	2000192b 	.word	0x2000192b
20001560:	200018c5 	.word	0x200018c5
20001564:	2000192b 	.word	0x2000192b
20001568:	2000192b 	.word	0x2000192b
2000156c:	2000192b 	.word	0x2000192b
20001570:	2000192b 	.word	0x2000192b
20001574:	2000192b 	.word	0x2000192b
20001578:	2000192b 	.word	0x2000192b
2000157c:	2000192b 	.word	0x2000192b
20001580:	2000191b 	.word	0x2000191b
20001584:	2000192b 	.word	0x2000192b
20001588:	2000192b 	.word	0x2000192b
2000158c:	2000192b 	.word	0x2000192b
20001590:	2000192b 	.word	0x2000192b
20001594:	2000192b 	.word	0x2000192b
20001598:	2000192b 	.word	0x2000192b
2000159c:	2000192b 	.word	0x2000192b
200015a0:	2000192b 	.word	0x2000192b
200015a4:	2000192b 	.word	0x2000192b
200015a8:	2000192b 	.word	0x2000192b
200015ac:	2000192b 	.word	0x2000192b
200015b0:	2000192b 	.word	0x2000192b
200015b4:	2000192b 	.word	0x2000192b
200015b8:	2000192b 	.word	0x2000192b
200015bc:	2000192b 	.word	0x2000192b
200015c0:	2000192b 	.word	0x2000192b
200015c4:	2000192b 	.word	0x2000192b
200015c8:	2000192b 	.word	0x2000192b
200015cc:	2000192b 	.word	0x2000192b
200015d0:	2000192b 	.word	0x2000192b
200015d4:	2000192b 	.word	0x2000192b
200015d8:	2000192b 	.word	0x2000192b
200015dc:	2000192b 	.word	0x2000192b
200015e0:	2000192b 	.word	0x2000192b
	{
	    /************** MASTER TRANSMITTER / RECEIVER *******************/
	  
	    case ST_START: /* start has been xmt'd */
	    case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0x0;
200015e4:	687b      	ldr	r3, [r7, #4]
200015e6:	699b      	ldr	r3, [r3, #24]
200015e8:	f04f 0200 	mov.w	r2, #0
200015ec:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = this_i2c->target_addr;
200015ee:	687b      	ldr	r3, [r7, #4]
200015f0:	695b      	ldr	r3, [r3, #20]
200015f2:	687a      	ldr	r2, [r7, #4]
200015f4:	6852      	ldr	r2, [r2, #4]
200015f6:	b2d2      	uxtb	r2, r2
200015f8:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
200015fa:	687b      	ldr	r3, [r7, #4]
200015fc:	699b      	ldr	r3, [r3, #24]
200015fe:	687a      	ldr	r2, [r7, #4]
20001600:	6a92      	ldr	r2, [r2, #40]	; 0x28
20001602:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            
	    	this_i2c->tx_idx = 0;
20001606:	687b      	ldr	r3, [r7, #4]
20001608:	f04f 0200 	mov.w	r2, #0
2000160c:	625a      	str	r2, [r3, #36]	; 0x24
	    	this_i2c->rx_idx = 0;		
2000160e:	687b      	ldr	r3, [r7, #4]
20001610:	f04f 0200 	mov.w	r2, #0
20001614:	635a      	str	r2, [r3, #52]	; 0x34
	    	break;
20001616:	e188      	b.n	2000192a <mss_i2c_isr+0x6d2>
	    	
	    case ST_LOST_ARB:
			/* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01;
20001618:	687b      	ldr	r3, [r7, #4]
2000161a:	699b      	ldr	r3, [r3, #24]
2000161c:	f04f 0201 	mov.w	r2, #1
20001620:	615a      	str	r2, [r3, #20]
			break;
20001622:	e182      	b.n	2000192a <mss_i2c_isr+0x6d2>
	    	
	    /******************* MASTER TRANSMITTER *************************/
	    case ST_SLAW_ACK:
	    	/* call address has been xmt'd with ACK, time to send data byte and increment index. */
            if ( this_i2c->tx_idx < this_i2c->tx_size )
20001624:	687b      	ldr	r3, [r7, #4]
20001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20001628:	687b      	ldr	r3, [r7, #4]
2000162a:	6a1b      	ldr	r3, [r3, #32]
2000162c:	429a      	cmp	r2, r3
2000162e:	d20d      	bcs.n	2000164c <mss_i2c_isr+0x3f4>
            {
                /* load data byte */
                this_i2c->hw_reg->DATA = this_i2c->tx_buffer[this_i2c->tx_idx++];
20001630:	687b      	ldr	r3, [r7, #4]
20001632:	695a      	ldr	r2, [r3, #20]
20001634:	687b      	ldr	r3, [r7, #4]
20001636:	69d9      	ldr	r1, [r3, #28]
20001638:	687b      	ldr	r3, [r7, #4]
2000163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000163c:	4419      	add	r1, r3
2000163e:	7809      	ldrb	r1, [r1, #0]
20001640:	7211      	strb	r1, [r2, #8]
20001642:	f103 0201 	add.w	r2, r3, #1
20001646:	687b      	ldr	r3, [r7, #4]
20001648:	625a      	str	r2, [r3, #36]	; 0x24
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
            }
	    	break;
2000164a:	e16e      	b.n	2000192a <mss_i2c_isr+0x6d2>
                /* load data byte */
                this_i2c->hw_reg->DATA = this_i2c->tx_buffer[this_i2c->tx_idx++];
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
2000164c:	687b      	ldr	r3, [r7, #4]
2000164e:	8a5b      	ldrh	r3, [r3, #18]
20001650:	b21b      	sxth	r3, r3
20001652:	4618      	mov	r0, r3
20001654:	f7ff fc0c 	bl	20000e70 <NVIC_DisableIRQ>
            }
	    	break;
20001658:	e167      	b.n	2000192a <mss_i2c_isr+0x6d2>
	    	
	    case ST_SLAW_NACK:
	    	/* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01;
2000165a:	687b      	ldr	r3, [r7, #4]
2000165c:	699b      	ldr	r3, [r3, #24]
2000165e:	f04f 0201 	mov.w	r2, #1
20001662:	611a      	str	r2, [r3, #16]
            this_i2c->status = MSS_I2C_FAILED;
20001664:	687b      	ldr	r3, [r7, #4]
20001666:	f04f 0202 	mov.w	r2, #2
2000166a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
2000166e:	e15c      	b.n	2000192a <mss_i2c_isr+0x6d2>
			
	    case ST_TX_DATA_ACK:
			/* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
			if (this_i2c->tx_idx < this_i2c->tx_size)
20001670:	687b      	ldr	r3, [r7, #4]
20001672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20001674:	687b      	ldr	r3, [r7, #4]
20001676:	6a1b      	ldr	r3, [r3, #32]
20001678:	429a      	cmp	r2, r3
2000167a:	d20d      	bcs.n	20001698 <mss_i2c_isr+0x440>
			{	
                this_i2c->hw_reg->DATA = this_i2c->tx_buffer[this_i2c->tx_idx++];
2000167c:	687b      	ldr	r3, [r7, #4]
2000167e:	695a      	ldr	r2, [r3, #20]
20001680:	687b      	ldr	r3, [r7, #4]
20001682:	69d9      	ldr	r1, [r3, #28]
20001684:	687b      	ldr	r3, [r7, #4]
20001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001688:	4419      	add	r1, r3
2000168a:	7809      	ldrb	r1, [r1, #0]
2000168c:	7211      	strb	r1, [r2, #8]
2000168e:	f103 0201 	add.w	r2, r3, #1
20001692:	687b      	ldr	r3, [r7, #4]
20001694:	625a      	str	r2, [r3, #36]	; 0x24
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0;
                }
                this_i2c->status = MSS_I2C_SUCCESS;
			}
			break;
20001696:	e148      	b.n	2000192a <mss_i2c_isr+0x6d2>
			/* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
			if (this_i2c->tx_idx < this_i2c->tx_size)
			{	
                this_i2c->hw_reg->DATA = this_i2c->tx_buffer[this_i2c->tx_idx++];
			}
			else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20001698:	687b      	ldr	r3, [r7, #4]
2000169a:	7a1b      	ldrb	r3, [r3, #8]
2000169c:	2b03      	cmp	r3, #3
2000169e:	d109      	bne.n	200016b4 <mss_i2c_isr+0x45c>
			{
				/* We are finished sending the address offset part of a random read transaction.
				 * It is is time to send a restart in order to change direction. */
				 this_i2c->dir = READ_DIR;
200016a0:	687b      	ldr	r3, [r7, #4]
200016a2:	f04f 0201 	mov.w	r2, #1
200016a6:	629a      	str	r2, [r3, #40]	; 0x28
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01;
200016a8:	687b      	ldr	r3, [r7, #4]
200016aa:	699b      	ldr	r3, [r3, #24]
200016ac:	f04f 0201 	mov.w	r2, #1
200016b0:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0;
                }
                this_i2c->status = MSS_I2C_SUCCESS;
			}
			break;
200016b2:	e13a      	b.n	2000192a <mss_i2c_isr+0x6d2>
				 this_i2c->dir = READ_DIR;
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01;
			}
			else /* done sending. let's stop */
			{
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS; 
200016b4:	687b      	ldr	r3, [r7, #4]
200016b6:	7c1b      	ldrb	r3, [r3, #16]
200016b8:	f003 0301 	and.w	r3, r3, #1
200016bc:	737b      	strb	r3, [r7, #13]
                if ( hold_bus == 0 )
200016be:	7b7b      	ldrb	r3, [r7, #13]
200016c0:	2b00      	cmp	r3, #0
200016c2:	d105      	bne.n	200016d0 <mss_i2c_isr+0x478>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01; /*xmt stop condition */
200016c4:	687b      	ldr	r3, [r7, #4]
200016c6:	699b      	ldr	r3, [r3, #24]
200016c8:	f04f 0201 	mov.w	r2, #1
200016cc:	611a      	str	r2, [r3, #16]
200016ce:	e008      	b.n	200016e2 <mss_i2c_isr+0x48a>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
200016d0:	687b      	ldr	r3, [r7, #4]
200016d2:	8a5b      	ldrh	r3, [r3, #18]
200016d4:	b21b      	sxth	r3, r3
200016d6:	4618      	mov	r0, r3
200016d8:	f7ff fbca 	bl	20000e70 <NVIC_DisableIRQ>
                    clear_irq = 0;
200016dc:	f04f 0300 	mov.w	r3, #0
200016e0:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->status = MSS_I2C_SUCCESS;
200016e2:	687b      	ldr	r3, [r7, #4]
200016e4:	f04f 0200 	mov.w	r2, #0
200016e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			}
			break;
200016ec:	e11d      	b.n	2000192a <mss_i2c_isr+0x6d2>
            /* data byte SENT, ACK to be received
		     * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01;  
200016ee:	687b      	ldr	r3, [r7, #4]
200016f0:	699b      	ldr	r3, [r3, #24]
200016f2:	f04f 0201 	mov.w	r2, #1
200016f6:	611a      	str	r2, [r3, #16]
            this_i2c->status = MSS_I2C_FAILED;
200016f8:	687b      	ldr	r3, [r7, #4]
200016fa:	f04f 0202 	mov.w	r2, #2
200016fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		    break;
20001702:	e112      	b.n	2000192a <mss_i2c_isr+0x6d2>
	  /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
		case ST_SLAR_ACK: /* SLA+R tx'ed. */
			/* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
			 * the next byte is the last byte of the read transaction.
             */
			if( this_i2c->rx_size > 1 )
20001704:	687b      	ldr	r3, [r7, #4]
20001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001708:	2b01      	cmp	r3, #1
2000170a:	d905      	bls.n	20001718 <mss_i2c_isr+0x4c0>
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x01;
2000170c:	687b      	ldr	r3, [r7, #4]
2000170e:	699b      	ldr	r3, [r3, #24]
20001710:	f04f 0201 	mov.w	r2, #1
20001714:	609a      	str	r2, [r3, #8]
			}
			else
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
			}
			break;
20001716:	e108      	b.n	2000192a <mss_i2c_isr+0x6d2>
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x01;
			}
			else
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
20001718:	687b      	ldr	r3, [r7, #4]
2000171a:	699b      	ldr	r3, [r3, #24]
2000171c:	f04f 0200 	mov.w	r2, #0
20001720:	609a      	str	r2, [r3, #8]
			}
			break;
20001722:	e102      	b.n	2000192a <mss_i2c_isr+0x6d2>
			
		case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01;
20001724:	687b      	ldr	r3, [r7, #4]
20001726:	699b      	ldr	r3, [r3, #24]
20001728:	f04f 0201 	mov.w	r2, #1
2000172c:	611a      	str	r2, [r3, #16]
            this_i2c->status = MSS_I2C_FAILED;
2000172e:	687b      	ldr	r3, [r7, #4]
20001730:	f04f 0202 	mov.w	r2, #2
20001734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
20001738:	e0f7      	b.n	2000192a <mss_i2c_isr+0x6d2>
	      
		case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
			/* First, get the data */
            this_i2c->rx_buffer[this_i2c->rx_idx++] = this_i2c->hw_reg->DATA;
2000173a:	687b      	ldr	r3, [r7, #4]
2000173c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000173e:	687b      	ldr	r3, [r7, #4]
20001740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001742:	441a      	add	r2, r3
20001744:	6879      	ldr	r1, [r7, #4]
20001746:	6949      	ldr	r1, [r1, #20]
20001748:	7a09      	ldrb	r1, [r1, #8]
2000174a:	b2c9      	uxtb	r1, r1
2000174c:	7011      	strb	r1, [r2, #0]
2000174e:	f103 0201 	add.w	r2, r3, #1
20001752:	687b      	ldr	r3, [r7, #4]
20001754:	635a      	str	r2, [r3, #52]	; 0x34

			if( this_i2c->rx_idx >= this_i2c->rx_size - 1)
20001756:	687b      	ldr	r3, [r7, #4]
20001758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2000175a:	687b      	ldr	r3, [r7, #4]
2000175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000175e:	f103 33ff 	add.w	r3, r3, #4294967295
20001762:	429a      	cmp	r2, r3
20001764:	f0c0 80de 	bcc.w	20001924 <mss_i2c_isr+0x6cc>
			{
				/* If we're at the second last byte, let's set AA to 0 so
				 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
20001768:	687b      	ldr	r3, [r7, #4]
2000176a:	699b      	ldr	r3, [r3, #24]
2000176c:	f04f 0200 	mov.w	r2, #0
20001770:	609a      	str	r2, [r3, #8]
			}
			break;
20001772:	e0da      	b.n	2000192a <mss_i2c_isr+0x6d2>
			
	    case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->rx_buffer[this_i2c->rx_idx++] = this_i2c->hw_reg->DATA;
20001774:	687b      	ldr	r3, [r7, #4]
20001776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001778:	687b      	ldr	r3, [r7, #4]
2000177a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000177c:	441a      	add	r2, r3
2000177e:	6879      	ldr	r1, [r7, #4]
20001780:	6949      	ldr	r1, [r1, #20]
20001782:	7a09      	ldrb	r1, [r1, #8]
20001784:	b2c9      	uxtb	r1, r1
20001786:	7011      	strb	r1, [r2, #0]
20001788:	f103 0201 	add.w	r2, r3, #1
2000178c:	687b      	ldr	r3, [r7, #4]
2000178e:	635a      	str	r2, [r3, #52]	; 0x34
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
20001790:	687b      	ldr	r3, [r7, #4]
20001792:	7c1b      	ldrb	r3, [r3, #16]
20001794:	f003 0301 	and.w	r3, r3, #1
20001798:	737b      	strb	r3, [r7, #13]
            if ( hold_bus == 0 )
2000179a:	7b7b      	ldrb	r3, [r7, #13]
2000179c:	2b00      	cmp	r3, #0
2000179e:	d105      	bne.n	200017ac <mss_i2c_isr+0x554>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01;  /*xmt stop condition */
200017a0:	687b      	ldr	r3, [r7, #4]
200017a2:	699b      	ldr	r3, [r3, #24]
200017a4:	f04f 0201 	mov.w	r2, #1
200017a8:	611a      	str	r2, [r3, #16]
200017aa:	e008      	b.n	200017be <mss_i2c_isr+0x566>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
200017ac:	687b      	ldr	r3, [r7, #4]
200017ae:	8a5b      	ldrh	r3, [r3, #18]
200017b0:	b21b      	sxth	r3, r3
200017b2:	4618      	mov	r0, r3
200017b4:	f7ff fb5c 	bl	20000e70 <NVIC_DisableIRQ>
                clear_irq = 0;
200017b8:	f04f 0300 	mov.w	r3, #0
200017bc:	73bb      	strb	r3, [r7, #14]
            }
          
            this_i2c->status = MSS_I2C_SUCCESS;
200017be:	687b      	ldr	r3, [r7, #4]
200017c0:	f04f 0200 	mov.w	r2, #0
200017c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            break;
200017c8:	e0af      	b.n	2000192a <mss_i2c_isr+0x6d2>
		
		/******************** SLAVE RECEIVER **************************/
		case ST_GCA_NACK: /* NACK after, GCA addressing */
		case ST_SLA_NACK: /* Get Data, but also re-enable AA (assert ack) bit for future transmissions */
			if ( this_i2c->rx_buffer != 0 )
200017ca:	687b      	ldr	r3, [r7, #4]
200017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200017ce:	2b00      	cmp	r3, #0
200017d0:	d009      	beq.n	200017e6 <mss_i2c_isr+0x58e>
			{
                this_i2c->rx_buffer[this_i2c->rx_idx] = this_i2c->hw_reg->DATA;
200017d2:	687b      	ldr	r3, [r7, #4]
200017d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200017d6:	687b      	ldr	r3, [r7, #4]
200017d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200017da:	4413      	add	r3, r2
200017dc:	687a      	ldr	r2, [r7, #4]
200017de:	6952      	ldr	r2, [r2, #20]
200017e0:	7a12      	ldrb	r2, [r2, #8]
200017e2:	b2d2      	uxtb	r2, r2
200017e4:	701a      	strb	r2, [r3, #0]
			}
            this_i2c->hw_reg_bit->CTRL_AA = 0x01;
200017e6:	687b      	ldr	r3, [r7, #4]
200017e8:	699b      	ldr	r3, [r3, #24]
200017ea:	f04f 0201 	mov.w	r2, #1
200017ee:	609a      	str	r2, [r3, #8]
			break;
200017f0:	e09b      	b.n	2000192a <mss_i2c_isr+0x6d2>
			
		case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */
			this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
200017f2:	687b      	ldr	r3, [r7, #4]
200017f4:	f04f 0204 	mov.w	r2, #4
200017f8:	721a      	strb	r2, [r3, #8]
			this_i2c->rx_idx = 0;
200017fa:	687b      	ldr	r3, [r7, #4]
200017fc:	f04f 0200 	mov.w	r2, #0
20001800:	635a      	str	r2, [r3, #52]	; 0x34
			this_i2c->random_read_addr = 0;
20001802:	687b      	ldr	r3, [r7, #4]
20001804:	f04f 0200 	mov.w	r2, #0
20001808:	60da      	str	r2, [r3, #12]
#ifndef INCLUDE_SLA_IN_RX_PAYLOAD
			/* Only break from this case if the slave address must NOT be included at the
			 * beginning of the received write data. */
			break;
2000180a:	e08e      	b.n	2000192a <mss_i2c_isr+0x6d2>
#endif			
		case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
		case ST_RDATA: /* DATA received; must clear DATA register */
			if (this_i2c->rx_idx >= this_i2c->rx_size - 2)
2000180c:	687b      	ldr	r3, [r7, #4]
2000180e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20001810:	687b      	ldr	r3, [r7, #4]
20001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001814:	f1a3 0302 	sub.w	r3, r3, #2
20001818:	429a      	cmp	r2, r3
2000181a:	d304      	bcc.n	20001826 <mss_i2c_isr+0x5ce>
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;   /* send a NACK when done (next reception) */
2000181c:	687b      	ldr	r3, [r7, #4]
2000181e:	699b      	ldr	r3, [r3, #24]
20001820:	f04f 0200 	mov.w	r2, #0
20001824:	609a      	str	r2, [r3, #8]
			}
            data = this_i2c->hw_reg->DATA;
20001826:	687b      	ldr	r3, [r7, #4]
20001828:	695b      	ldr	r3, [r3, #20]
2000182a:	7a1b      	ldrb	r3, [r3, #8]
2000182c:	733b      	strb	r3, [r7, #12]
			this_i2c->rx_buffer[this_i2c->rx_idx++] = data;
2000182e:	687b      	ldr	r3, [r7, #4]
20001830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001832:	687b      	ldr	r3, [r7, #4]
20001834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001836:	441a      	add	r2, r3
20001838:	7b39      	ldrb	r1, [r7, #12]
2000183a:	7011      	strb	r1, [r2, #0]
2000183c:	f103 0201 	add.w	r2, r3, #1
20001840:	687b      	ldr	r3, [r7, #4]
20001842:	635a      	str	r2, [r3, #52]	; 0x34
			this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20001844:	687b      	ldr	r3, [r7, #4]
20001846:	68db      	ldr	r3, [r3, #12]
20001848:	ea4f 2203 	mov.w	r2, r3, lsl #8
2000184c:	7b3b      	ldrb	r3, [r7, #12]
2000184e:	441a      	add	r2, r3
20001850:	687b      	ldr	r3, [r7, #4]
20001852:	60da      	str	r2, [r3, #12]

			break;
20001854:	e069      	b.n	2000192a <mss_i2c_isr+0x6d2>
			/* STOP or repeated START occured. */
			/* We cannot be sure if the transaction has actually completed as
			 * this hardware state reports that either a STOP or repeated START
			 * condition has occured. We assume that this is a repeated START
			 * if the transaction was a write from the master to this point.*/
			if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20001856:	687b      	ldr	r3, [r7, #4]
20001858:	7a1b      	ldrb	r3, [r3, #8]
2000185a:	2b04      	cmp	r3, #4
2000185c:	d12c      	bne.n	200018b8 <mss_i2c_isr+0x660>
			{
				if ( this_i2c->rx_idx == this_i2c->slave_mem_offset_length )
2000185e:	687b      	ldr	r3, [r7, #4]
20001860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20001862:	687b      	ldr	r3, [r7, #4]
20001864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001866:	429a      	cmp	r2, r3
20001868:	d108      	bne.n	2000187c <mss_i2c_isr+0x624>
				{
					this_i2c->transaction = RANDOM_READ_SLAVE_TRANSACTION;
2000186a:	687b      	ldr	r3, [r7, #4]
2000186c:	f04f 0206 	mov.w	r2, #6
20001870:	721a      	strb	r2, [r3, #8]
					this_i2c->tx_idx = this_i2c->random_read_addr;
20001872:	687b      	ldr	r3, [r7, #4]
20001874:	68da      	ldr	r2, [r3, #12]
20001876:	687b      	ldr	r3, [r7, #4]
20001878:	625a      	str	r2, [r3, #36]	; 0x24
2000187a:	e01d      	b.n	200018b8 <mss_i2c_isr+0x660>
				}
				else
				{
					/* Call the slave's write transaction handler if it exists. */
					if ( this_i2c->slave_write_handler != 0 )
2000187c:	687b      	ldr	r3, [r7, #4]
2000187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001880:	2b00      	cmp	r3, #0
20001882:	d019      	beq.n	200018b8 <mss_i2c_isr+0x660>
					{
						mss_i2c_slave_handler_ret_t h_ret;
						h_ret = this_i2c->slave_write_handler( this_i2c->rx_buffer, (uint16_t)this_i2c->rx_idx );
20001884:	687b      	ldr	r3, [r7, #4]
20001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001888:	687a      	ldr	r2, [r7, #4]
2000188a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
2000188c:	687a      	ldr	r2, [r7, #4]
2000188e:	6b52      	ldr	r2, [r2, #52]	; 0x34
20001890:	b292      	uxth	r2, r2
20001892:	4608      	mov	r0, r1
20001894:	4611      	mov	r1, r2
20001896:	4798      	blx	r3
20001898:	4603      	mov	r3, r0
2000189a:	73fb      	strb	r3, [r7, #15]
						if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
2000189c:	7bfb      	ldrb	r3, [r7, #15]
2000189e:	2b00      	cmp	r3, #0
200018a0:	d105      	bne.n	200018ae <mss_i2c_isr+0x656>
						{
                            this_i2c->hw_reg_bit->CTRL_AA = 0x01;
200018a2:	687b      	ldr	r3, [r7, #4]
200018a4:	699b      	ldr	r3, [r3, #24]
200018a6:	f04f 0201 	mov.w	r2, #1
200018aa:	609a      	str	r2, [r3, #8]
200018ac:	e004      	b.n	200018b8 <mss_i2c_isr+0x660>
						}
						else
						{
                            this_i2c->hw_reg_bit->CTRL_AA = 0x00;
200018ae:	687b      	ldr	r3, [r7, #4]
200018b0:	699b      	ldr	r3, [r3, #24]
200018b2:	f04f 0200 	mov.w	r2, #0
200018b6:	609a      	str	r2, [r3, #8]
						}
					}
				}
			}
			/* Mark any previous master write transaction as complete. */
            this_i2c->status = MSS_I2C_SUCCESS;
200018b8:	687b      	ldr	r3, [r7, #4]
200018ba:	f04f 0200 	mov.w	r2, #0
200018be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
200018c2:	e032      	b.n	2000192a <mss_i2c_isr+0x6d2>
			
		/****************** SLAVE TRANSMITTER **************************/
		case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
		case ST_SLARW_LA: /* Arbitration lost, and: */
		case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
200018c4:	7afb      	ldrb	r3, [r7, #11]
200018c6:	b2db      	uxtb	r3, r3
200018c8:	2ba8      	cmp	r3, #168	; 0xa8
200018ca:	d107      	bne.n	200018dc <mss_i2c_isr+0x684>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
200018cc:	687b      	ldr	r3, [r7, #4]
200018ce:	f04f 0205 	mov.w	r2, #5
200018d2:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0;
200018d4:	687b      	ldr	r3, [r7, #4]
200018d6:	f04f 0200 	mov.w	r2, #0
200018da:	60da      	str	r2, [r3, #12]
            }
			/* Load the data, and determine if it is the last one */
            this_i2c->hw_reg->DATA = this_i2c->tx_buffer[this_i2c->tx_idx++];
200018dc:	687b      	ldr	r3, [r7, #4]
200018de:	695a      	ldr	r2, [r3, #20]
200018e0:	687b      	ldr	r3, [r7, #4]
200018e2:	69d9      	ldr	r1, [r3, #28]
200018e4:	687b      	ldr	r3, [r7, #4]
200018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200018e8:	4419      	add	r1, r3
200018ea:	7809      	ldrb	r1, [r1, #0]
200018ec:	7211      	strb	r1, [r2, #8]
200018ee:	f103 0201 	add.w	r2, r3, #1
200018f2:	687b      	ldr	r3, [r7, #4]
200018f4:	625a      	str	r2, [r3, #36]	; 0x24
			if (this_i2c->tx_idx >= this_i2c->tx_size - 1) /* last byte? */
200018f6:	687b      	ldr	r3, [r7, #4]
200018f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
200018fa:	687b      	ldr	r3, [r7, #4]
200018fc:	6a1b      	ldr	r3, [r3, #32]
200018fe:	f103 33ff 	add.w	r3, r3, #4294967295
20001902:	429a      	cmp	r2, r3
20001904:	d310      	bcc.n	20001928 <mss_i2c_isr+0x6d0>
			{
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
20001906:	687b      	ldr	r3, [r7, #4]
20001908:	699b      	ldr	r3, [r3, #24]
2000190a:	f04f 0200 	mov.w	r2, #0
2000190e:	609a      	str	r2, [r3, #8]
				/* Next read transaction will result in slave's transmit buffer
				 * being sent from the first byte. */
				this_i2c->tx_idx = 0;
20001910:	687b      	ldr	r3, [r7, #4]
20001912:	f04f 0200 	mov.w	r2, #0
20001916:	625a      	str	r2, [r3, #36]	; 0x24
			}
			break;
20001918:	e007      	b.n	2000192a <mss_i2c_isr+0x6d2>
		
		case ST_SLAVE_RNACK:	/* Data byte has been transmitted; not-ACK has been received. */
			/* We assume that the transaction will be stopped by the master.
			 * Reset tx_idx so that a subsequent read will result in the slave's
			 * transmit buffer being sent from the first byte. */
			this_i2c->tx_idx = 0;
2000191a:	687b      	ldr	r3, [r7, #4]
2000191c:	f04f 0200 	mov.w	r2, #0
20001920:	625a      	str	r2, [r3, #36]	; 0x24
20001922:	e002      	b.n	2000192a <mss_i2c_isr+0x6d2>
			{
				/* If we're at the second last byte, let's set AA to 0 so
				 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
			}
			break;
20001924:	bf00      	nop
20001926:	e000      	b.n	2000192a <mss_i2c_isr+0x6d2>
                this_i2c->hw_reg_bit->CTRL_AA = 0x00;
				/* Next read transaction will result in slave's transmit buffer
				 * being sent from the first byte. */
				this_i2c->tx_idx = 0;
			}
			break;
20001928:	bf00      	nop
		default:
			/* do nothing */
			break;
	}
	
    if ( clear_irq )
2000192a:	7bbb      	ldrb	r3, [r7, #14]
2000192c:	2b00      	cmp	r3, #0
2000192e:	d004      	beq.n	2000193a <mss_i2c_isr+0x6e2>
    {
    	/* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0x00;
20001930:	687b      	ldr	r3, [r7, #4]
20001932:	699b      	ldr	r3, [r3, #24]
20001934:	f04f 0200 	mov.w	r2, #0
20001938:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
2000193a:	687b      	ldr	r3, [r7, #4]
2000193c:	695b      	ldr	r3, [r3, #20]
2000193e:	791b      	ldrb	r3, [r3, #4]
20001940:	72fb      	strb	r3, [r7, #11]
}
20001942:	f107 0710 	add.w	r7, r7, #16
20001946:	46bd      	mov	sp, r7
20001948:	bd80      	pop	{r7, pc}
2000194a:	bf00      	nop

2000194c <disable_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
uint32_t disable_interrupts( void )
{
2000194c:	b580      	push	{r7, lr}
2000194e:	b082      	sub	sp, #8
20001950:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
20001952:	f000 f8d3 	bl	20001afc <__get_PRIMASK>
20001956:	4603      	mov	r3, r0
20001958:	607b      	str	r3, [r7, #4]
    return primask;
2000195a:	687b      	ldr	r3, [r7, #4]
}
2000195c:	4618      	mov	r0, r3
2000195e:	f107 0708 	add.w	r7, r7, #8
20001962:	46bd      	mov	sp, r7
20001964:	bd80      	pop	{r7, pc}
20001966:	bf00      	nop

20001968 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
void restore_interrupts( uint32_t primask )
{
20001968:	b580      	push	{r7, lr}
2000196a:	b082      	sub	sp, #8
2000196c:	af00      	add	r7, sp, #0
2000196e:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
20001970:	6878      	ldr	r0, [r7, #4]
20001972:	f000 f8d3 	bl	20001b1c <__set_PRIMASK>
}
20001976:	f107 0708 	add.w	r7, r7, #8
2000197a:	46bd      	mov	sp, r7
2000197c:	bd80      	pop	{r7, pc}
2000197e:	bf00      	nop

20001980 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
20001980:	4668      	mov	r0, sp
20001982:	f020 0107 	bic.w	r1, r0, #7
20001986:	468d      	mov	sp, r1
20001988:	b589      	push	{r0, r3, r7, lr}
2000198a:	af00      	add	r7, sp, #0
	mss_i2c_isr( &g_mss_i2c0 );
2000198c:	f642 3098 	movw	r0, #11160	; 0x2b98
20001990:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001994:	f7ff fc60 	bl	20001258 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
20001998:	f04f 000e 	mov.w	r0, #14
2000199c:	f7ff fa86 	bl	20000eac <NVIC_ClearPendingIRQ>
}
200019a0:	46bd      	mov	sp, r7
200019a2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200019a6:	4685      	mov	sp, r0
200019a8:	4770      	bx	lr
200019aa:	bf00      	nop

200019ac <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
200019ac:	4668      	mov	r0, sp
200019ae:	f020 0107 	bic.w	r1, r0, #7
200019b2:	468d      	mov	sp, r1
200019b4:	b589      	push	{r0, r3, r7, lr}
200019b6:	af00      	add	r7, sp, #0
	mss_i2c_isr( &g_mss_i2c1 );
200019b8:	f642 30dc 	movw	r0, #11228	; 0x2bdc
200019bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200019c0:	f7ff fc4a 	bl	20001258 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
200019c4:	f04f 0011 	mov.w	r0, #17
200019c8:	f7ff fa70 	bl	20000eac <NVIC_ClearPendingIRQ>
}
200019cc:	46bd      	mov	sp, r7
200019ce:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200019d2:	4685      	mov	sp, r0
200019d4:	4770      	bx	lr
200019d6:	bf00      	nop

200019d8 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200019d8:	b480      	push	{r7}
200019da:	b083      	sub	sp, #12
200019dc:	af00      	add	r7, sp, #0
200019de:	4603      	mov	r3, r0
200019e0:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200019e2:	f24e 1300 	movw	r3, #57600	; 0xe100
200019e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200019ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200019ee:	ea4f 1252 	mov.w	r2, r2, lsr #5
200019f2:	88f9      	ldrh	r1, [r7, #6]
200019f4:	f001 011f 	and.w	r1, r1, #31
200019f8:	f04f 0001 	mov.w	r0, #1
200019fc:	fa00 f101 	lsl.w	r1, r0, r1
20001a00:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001a08:	f107 070c 	add.w	r7, r7, #12
20001a0c:	46bd      	mov	sp, r7
20001a0e:	bc80      	pop	{r7}
20001a10:	4770      	bx	lr
20001a12:	bf00      	nop

20001a14 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20001a14:	b580      	push	{r7, lr}
20001a16:	b082      	sub	sp, #8
20001a18:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20001a1a:	f242 0300 	movw	r3, #8192	; 0x2000
20001a1e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001a22:	f242 0200 	movw	r2, #8192	; 0x2000
20001a26:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001a2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001a2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20001a30:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001a32:	f04f 0300 	mov.w	r3, #0
20001a36:	607b      	str	r3, [r7, #4]
20001a38:	e00e      	b.n	20001a58 <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
20001a3a:	687a      	ldr	r2, [r7, #4]
20001a3c:	f642 1340 	movw	r3, #10560	; 0x2940
20001a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
20001a48:	b21b      	sxth	r3, r3
20001a4a:	4618      	mov	r0, r3
20001a4c:	f7ff ffc4 	bl	200019d8 <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001a50:	687b      	ldr	r3, [r7, #4]
20001a52:	f103 0301 	add.w	r3, r3, #1
20001a56:	607b      	str	r3, [r7, #4]
20001a58:	687b      	ldr	r3, [r7, #4]
20001a5a:	2b1f      	cmp	r3, #31
20001a5c:	d9ed      	bls.n	20001a3a <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
20001a5e:	f242 0300 	movw	r3, #8192	; 0x2000
20001a62:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001a66:	f242 0200 	movw	r2, #8192	; 0x2000
20001a6a:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001a6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001a70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20001a74:	631a      	str	r2, [r3, #48]	; 0x30
}
20001a76:	f107 0708 	add.w	r7, r7, #8
20001a7a:	46bd      	mov	sp, r7
20001a7c:	bd80      	pop	{r7, pc}
20001a7e:	bf00      	nop

20001a80 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20001a80:	b480      	push	{r7}
20001a82:	b085      	sub	sp, #20
20001a84:	af00      	add	r7, sp, #0
20001a86:	4603      	mov	r3, r0
20001a88:	6039      	str	r1, [r7, #0]
20001a8a:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20001a8c:	79fb      	ldrb	r3, [r7, #7]
20001a8e:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001a90:	68fb      	ldr	r3, [r7, #12]
20001a92:	2b1f      	cmp	r3, #31
20001a94:	d900      	bls.n	20001a98 <MSS_GPIO_config+0x18>
20001a96:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
20001a98:	68fb      	ldr	r3, [r7, #12]
20001a9a:	2b1f      	cmp	r3, #31
20001a9c:	d808      	bhi.n	20001ab0 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20001a9e:	68fa      	ldr	r2, [r7, #12]
20001aa0:	f642 03c0 	movw	r3, #10432	; 0x28c0
20001aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001aac:	683a      	ldr	r2, [r7, #0]
20001aae:	601a      	str	r2, [r3, #0]
    }
}
20001ab0:	f107 0714 	add.w	r7, r7, #20
20001ab4:	46bd      	mov	sp, r7
20001ab6:	bc80      	pop	{r7}
20001ab8:	4770      	bx	lr
20001aba:	bf00      	nop

20001abc <MSS_GPIO_set_output>:
void MSS_GPIO_set_output
(
    mss_gpio_id_t       port_id,
    uint8_t             value
)
{
20001abc:	b480      	push	{r7}
20001abe:	b085      	sub	sp, #20
20001ac0:	af00      	add	r7, sp, #0
20001ac2:	4602      	mov	r2, r0
20001ac4:	460b      	mov	r3, r1
20001ac6:	71fa      	strb	r2, [r7, #7]
20001ac8:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_idx = (uint32_t)port_id;
20001aca:	79fb      	ldrb	r3, [r7, #7]
20001acc:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001ace:	68fb      	ldr	r3, [r7, #12]
20001ad0:	2b1f      	cmp	r3, #31
20001ad2:	d900      	bls.n	20001ad6 <MSS_GPIO_set_output+0x1a>
20001ad4:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20001ad6:	68fb      	ldr	r3, [r7, #12]
20001ad8:	2b1f      	cmp	r3, #31
20001ada:	d809      	bhi.n	20001af0 <MSS_GPIO_set_output+0x34>
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
20001adc:	f240 0300 	movw	r3, #0
20001ae0:	f2c4 2326 	movt	r3, #16934	; 0x4226
20001ae4:	68fa      	ldr	r2, [r7, #12]
20001ae6:	79b9      	ldrb	r1, [r7, #6]
20001ae8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
20001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
20001af0:	f107 0714 	add.w	r7, r7, #20
20001af4:	46bd      	mov	sp, r7
20001af6:	bc80      	pop	{r7}
20001af8:	4770      	bx	lr
20001afa:	bf00      	nop

20001afc <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
20001afc:	b480      	push	{r7}
20001afe:	b083      	sub	sp, #12
20001b00:	af00      	add	r7, sp, #0
  uint32_t result=0;
20001b02:	f04f 0300 	mov.w	r3, #0
20001b06:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20001b08:	f3ef 8310 	mrs	r3, PRIMASK
20001b0c:	607b      	str	r3, [r7, #4]
  return(result);
20001b0e:	687b      	ldr	r3, [r7, #4]
}
20001b10:	4618      	mov	r0, r3
20001b12:	f107 070c 	add.w	r7, r7, #12
20001b16:	46bd      	mov	sp, r7
20001b18:	bc80      	pop	{r7}
20001b1a:	4770      	bx	lr

20001b1c <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
20001b1c:	b480      	push	{r7}
20001b1e:	b083      	sub	sp, #12
20001b20:	af00      	add	r7, sp, #0
20001b22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
20001b24:	687b      	ldr	r3, [r7, #4]
20001b26:	f383 8810 	msr	PRIMASK, r3
}
20001b2a:	f107 070c 	add.w	r7, r7, #12
20001b2e:	46bd      	mov	sp, r7
20001b30:	bc80      	pop	{r7}
20001b32:	4770      	bx	lr

20001b34 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20001b34:	b480      	push	{r7}
20001b36:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20001b38:	46bd      	mov	sp, r7
20001b3a:	bc80      	pop	{r7}
20001b3c:	4770      	bx	lr
20001b3e:	bf00      	nop

20001b40 <__aeabi_drsub>:
20001b40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20001b44:	e002      	b.n	20001b4c <__adddf3>
20001b46:	bf00      	nop

20001b48 <__aeabi_dsub>:
20001b48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20001b4c <__adddf3>:
20001b4c:	b530      	push	{r4, r5, lr}
20001b4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
20001b52:	ea4f 0543 	mov.w	r5, r3, lsl #1
20001b56:	ea94 0f05 	teq	r4, r5
20001b5a:	bf08      	it	eq
20001b5c:	ea90 0f02 	teqeq	r0, r2
20001b60:	bf1f      	itttt	ne
20001b62:	ea54 0c00 	orrsne.w	ip, r4, r0
20001b66:	ea55 0c02 	orrsne.w	ip, r5, r2
20001b6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
20001b6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20001b72:	f000 80e2 	beq.w	20001d3a <__adddf3+0x1ee>
20001b76:	ea4f 5454 	mov.w	r4, r4, lsr #21
20001b7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
20001b7e:	bfb8      	it	lt
20001b80:	426d      	neglt	r5, r5
20001b82:	dd0c      	ble.n	20001b9e <__adddf3+0x52>
20001b84:	442c      	add	r4, r5
20001b86:	ea80 0202 	eor.w	r2, r0, r2
20001b8a:	ea81 0303 	eor.w	r3, r1, r3
20001b8e:	ea82 0000 	eor.w	r0, r2, r0
20001b92:	ea83 0101 	eor.w	r1, r3, r1
20001b96:	ea80 0202 	eor.w	r2, r0, r2
20001b9a:	ea81 0303 	eor.w	r3, r1, r3
20001b9e:	2d36      	cmp	r5, #54	; 0x36
20001ba0:	bf88      	it	hi
20001ba2:	bd30      	pophi	{r4, r5, pc}
20001ba4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20001ba8:	ea4f 3101 	mov.w	r1, r1, lsl #12
20001bac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20001bb0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20001bb4:	d002      	beq.n	20001bbc <__adddf3+0x70>
20001bb6:	4240      	negs	r0, r0
20001bb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20001bbc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20001bc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
20001bc4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
20001bc8:	d002      	beq.n	20001bd0 <__adddf3+0x84>
20001bca:	4252      	negs	r2, r2
20001bcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20001bd0:	ea94 0f05 	teq	r4, r5
20001bd4:	f000 80a7 	beq.w	20001d26 <__adddf3+0x1da>
20001bd8:	f1a4 0401 	sub.w	r4, r4, #1
20001bdc:	f1d5 0e20 	rsbs	lr, r5, #32
20001be0:	db0d      	blt.n	20001bfe <__adddf3+0xb2>
20001be2:	fa02 fc0e 	lsl.w	ip, r2, lr
20001be6:	fa22 f205 	lsr.w	r2, r2, r5
20001bea:	1880      	adds	r0, r0, r2
20001bec:	f141 0100 	adc.w	r1, r1, #0
20001bf0:	fa03 f20e 	lsl.w	r2, r3, lr
20001bf4:	1880      	adds	r0, r0, r2
20001bf6:	fa43 f305 	asr.w	r3, r3, r5
20001bfa:	4159      	adcs	r1, r3
20001bfc:	e00e      	b.n	20001c1c <__adddf3+0xd0>
20001bfe:	f1a5 0520 	sub.w	r5, r5, #32
20001c02:	f10e 0e20 	add.w	lr, lr, #32
20001c06:	2a01      	cmp	r2, #1
20001c08:	fa03 fc0e 	lsl.w	ip, r3, lr
20001c0c:	bf28      	it	cs
20001c0e:	f04c 0c02 	orrcs.w	ip, ip, #2
20001c12:	fa43 f305 	asr.w	r3, r3, r5
20001c16:	18c0      	adds	r0, r0, r3
20001c18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
20001c1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001c20:	d507      	bpl.n	20001c32 <__adddf3+0xe6>
20001c22:	f04f 0e00 	mov.w	lr, #0
20001c26:	f1dc 0c00 	rsbs	ip, ip, #0
20001c2a:	eb7e 0000 	sbcs.w	r0, lr, r0
20001c2e:	eb6e 0101 	sbc.w	r1, lr, r1
20001c32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20001c36:	d31b      	bcc.n	20001c70 <__adddf3+0x124>
20001c38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20001c3c:	d30c      	bcc.n	20001c58 <__adddf3+0x10c>
20001c3e:	0849      	lsrs	r1, r1, #1
20001c40:	ea5f 0030 	movs.w	r0, r0, rrx
20001c44:	ea4f 0c3c 	mov.w	ip, ip, rrx
20001c48:	f104 0401 	add.w	r4, r4, #1
20001c4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
20001c50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20001c54:	f080 809a 	bcs.w	20001d8c <__adddf3+0x240>
20001c58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20001c5c:	bf08      	it	eq
20001c5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20001c62:	f150 0000 	adcs.w	r0, r0, #0
20001c66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20001c6a:	ea41 0105 	orr.w	r1, r1, r5
20001c6e:	bd30      	pop	{r4, r5, pc}
20001c70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20001c74:	4140      	adcs	r0, r0
20001c76:	eb41 0101 	adc.w	r1, r1, r1
20001c7a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20001c7e:	f1a4 0401 	sub.w	r4, r4, #1
20001c82:	d1e9      	bne.n	20001c58 <__adddf3+0x10c>
20001c84:	f091 0f00 	teq	r1, #0
20001c88:	bf04      	itt	eq
20001c8a:	4601      	moveq	r1, r0
20001c8c:	2000      	moveq	r0, #0
20001c8e:	fab1 f381 	clz	r3, r1
20001c92:	bf08      	it	eq
20001c94:	3320      	addeq	r3, #32
20001c96:	f1a3 030b 	sub.w	r3, r3, #11
20001c9a:	f1b3 0220 	subs.w	r2, r3, #32
20001c9e:	da0c      	bge.n	20001cba <__adddf3+0x16e>
20001ca0:	320c      	adds	r2, #12
20001ca2:	dd08      	ble.n	20001cb6 <__adddf3+0x16a>
20001ca4:	f102 0c14 	add.w	ip, r2, #20
20001ca8:	f1c2 020c 	rsb	r2, r2, #12
20001cac:	fa01 f00c 	lsl.w	r0, r1, ip
20001cb0:	fa21 f102 	lsr.w	r1, r1, r2
20001cb4:	e00c      	b.n	20001cd0 <__adddf3+0x184>
20001cb6:	f102 0214 	add.w	r2, r2, #20
20001cba:	bfd8      	it	le
20001cbc:	f1c2 0c20 	rsble	ip, r2, #32
20001cc0:	fa01 f102 	lsl.w	r1, r1, r2
20001cc4:	fa20 fc0c 	lsr.w	ip, r0, ip
20001cc8:	bfdc      	itt	le
20001cca:	ea41 010c 	orrle.w	r1, r1, ip
20001cce:	4090      	lslle	r0, r2
20001cd0:	1ae4      	subs	r4, r4, r3
20001cd2:	bfa2      	ittt	ge
20001cd4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
20001cd8:	4329      	orrge	r1, r5
20001cda:	bd30      	popge	{r4, r5, pc}
20001cdc:	ea6f 0404 	mvn.w	r4, r4
20001ce0:	3c1f      	subs	r4, #31
20001ce2:	da1c      	bge.n	20001d1e <__adddf3+0x1d2>
20001ce4:	340c      	adds	r4, #12
20001ce6:	dc0e      	bgt.n	20001d06 <__adddf3+0x1ba>
20001ce8:	f104 0414 	add.w	r4, r4, #20
20001cec:	f1c4 0220 	rsb	r2, r4, #32
20001cf0:	fa20 f004 	lsr.w	r0, r0, r4
20001cf4:	fa01 f302 	lsl.w	r3, r1, r2
20001cf8:	ea40 0003 	orr.w	r0, r0, r3
20001cfc:	fa21 f304 	lsr.w	r3, r1, r4
20001d00:	ea45 0103 	orr.w	r1, r5, r3
20001d04:	bd30      	pop	{r4, r5, pc}
20001d06:	f1c4 040c 	rsb	r4, r4, #12
20001d0a:	f1c4 0220 	rsb	r2, r4, #32
20001d0e:	fa20 f002 	lsr.w	r0, r0, r2
20001d12:	fa01 f304 	lsl.w	r3, r1, r4
20001d16:	ea40 0003 	orr.w	r0, r0, r3
20001d1a:	4629      	mov	r1, r5
20001d1c:	bd30      	pop	{r4, r5, pc}
20001d1e:	fa21 f004 	lsr.w	r0, r1, r4
20001d22:	4629      	mov	r1, r5
20001d24:	bd30      	pop	{r4, r5, pc}
20001d26:	f094 0f00 	teq	r4, #0
20001d2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
20001d2e:	bf06      	itte	eq
20001d30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20001d34:	3401      	addeq	r4, #1
20001d36:	3d01      	subne	r5, #1
20001d38:	e74e      	b.n	20001bd8 <__adddf3+0x8c>
20001d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20001d3e:	bf18      	it	ne
20001d40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20001d44:	d029      	beq.n	20001d9a <__adddf3+0x24e>
20001d46:	ea94 0f05 	teq	r4, r5
20001d4a:	bf08      	it	eq
20001d4c:	ea90 0f02 	teqeq	r0, r2
20001d50:	d005      	beq.n	20001d5e <__adddf3+0x212>
20001d52:	ea54 0c00 	orrs.w	ip, r4, r0
20001d56:	bf04      	itt	eq
20001d58:	4619      	moveq	r1, r3
20001d5a:	4610      	moveq	r0, r2
20001d5c:	bd30      	pop	{r4, r5, pc}
20001d5e:	ea91 0f03 	teq	r1, r3
20001d62:	bf1e      	ittt	ne
20001d64:	2100      	movne	r1, #0
20001d66:	2000      	movne	r0, #0
20001d68:	bd30      	popne	{r4, r5, pc}
20001d6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
20001d6e:	d105      	bne.n	20001d7c <__adddf3+0x230>
20001d70:	0040      	lsls	r0, r0, #1
20001d72:	4149      	adcs	r1, r1
20001d74:	bf28      	it	cs
20001d76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
20001d7a:	bd30      	pop	{r4, r5, pc}
20001d7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20001d80:	bf3c      	itt	cc
20001d82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
20001d86:	bd30      	popcc	{r4, r5, pc}
20001d88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001d8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20001d90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20001d94:	f04f 0000 	mov.w	r0, #0
20001d98:	bd30      	pop	{r4, r5, pc}
20001d9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20001d9e:	bf1a      	itte	ne
20001da0:	4619      	movne	r1, r3
20001da2:	4610      	movne	r0, r2
20001da4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
20001da8:	bf1c      	itt	ne
20001daa:	460b      	movne	r3, r1
20001dac:	4602      	movne	r2, r0
20001dae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20001db2:	bf06      	itte	eq
20001db4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
20001db8:	ea91 0f03 	teqeq	r1, r3
20001dbc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20001dc0:	bd30      	pop	{r4, r5, pc}
20001dc2:	bf00      	nop

20001dc4 <__aeabi_ui2d>:
20001dc4:	f090 0f00 	teq	r0, #0
20001dc8:	bf04      	itt	eq
20001dca:	2100      	moveq	r1, #0
20001dcc:	4770      	bxeq	lr
20001dce:	b530      	push	{r4, r5, lr}
20001dd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001dd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001dd8:	f04f 0500 	mov.w	r5, #0
20001ddc:	f04f 0100 	mov.w	r1, #0
20001de0:	e750      	b.n	20001c84 <__adddf3+0x138>
20001de2:	bf00      	nop

20001de4 <__aeabi_i2d>:
20001de4:	f090 0f00 	teq	r0, #0
20001de8:	bf04      	itt	eq
20001dea:	2100      	moveq	r1, #0
20001dec:	4770      	bxeq	lr
20001dee:	b530      	push	{r4, r5, lr}
20001df0:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001df4:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001df8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
20001dfc:	bf48      	it	mi
20001dfe:	4240      	negmi	r0, r0
20001e00:	f04f 0100 	mov.w	r1, #0
20001e04:	e73e      	b.n	20001c84 <__adddf3+0x138>
20001e06:	bf00      	nop

20001e08 <__aeabi_f2d>:
20001e08:	0042      	lsls	r2, r0, #1
20001e0a:	ea4f 01e2 	mov.w	r1, r2, asr #3
20001e0e:	ea4f 0131 	mov.w	r1, r1, rrx
20001e12:	ea4f 7002 	mov.w	r0, r2, lsl #28
20001e16:	bf1f      	itttt	ne
20001e18:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
20001e1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20001e20:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
20001e24:	4770      	bxne	lr
20001e26:	f092 0f00 	teq	r2, #0
20001e2a:	bf14      	ite	ne
20001e2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20001e30:	4770      	bxeq	lr
20001e32:	b530      	push	{r4, r5, lr}
20001e34:	f44f 7460 	mov.w	r4, #896	; 0x380
20001e38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001e3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20001e40:	e720      	b.n	20001c84 <__adddf3+0x138>
20001e42:	bf00      	nop

20001e44 <__aeabi_ul2d>:
20001e44:	ea50 0201 	orrs.w	r2, r0, r1
20001e48:	bf08      	it	eq
20001e4a:	4770      	bxeq	lr
20001e4c:	b530      	push	{r4, r5, lr}
20001e4e:	f04f 0500 	mov.w	r5, #0
20001e52:	e00a      	b.n	20001e6a <__aeabi_l2d+0x16>

20001e54 <__aeabi_l2d>:
20001e54:	ea50 0201 	orrs.w	r2, r0, r1
20001e58:	bf08      	it	eq
20001e5a:	4770      	bxeq	lr
20001e5c:	b530      	push	{r4, r5, lr}
20001e5e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
20001e62:	d502      	bpl.n	20001e6a <__aeabi_l2d+0x16>
20001e64:	4240      	negs	r0, r0
20001e66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20001e6a:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001e6e:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001e72:	ea5f 5c91 	movs.w	ip, r1, lsr #22
20001e76:	f43f aedc 	beq.w	20001c32 <__adddf3+0xe6>
20001e7a:	f04f 0203 	mov.w	r2, #3
20001e7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20001e82:	bf18      	it	ne
20001e84:	3203      	addne	r2, #3
20001e86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20001e8a:	bf18      	it	ne
20001e8c:	3203      	addne	r2, #3
20001e8e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
20001e92:	f1c2 0320 	rsb	r3, r2, #32
20001e96:	fa00 fc03 	lsl.w	ip, r0, r3
20001e9a:	fa20 f002 	lsr.w	r0, r0, r2
20001e9e:	fa01 fe03 	lsl.w	lr, r1, r3
20001ea2:	ea40 000e 	orr.w	r0, r0, lr
20001ea6:	fa21 f102 	lsr.w	r1, r1, r2
20001eaa:	4414      	add	r4, r2
20001eac:	e6c1      	b.n	20001c32 <__adddf3+0xe6>
20001eae:	bf00      	nop

20001eb0 <__aeabi_dmul>:
20001eb0:	b570      	push	{r4, r5, r6, lr}
20001eb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
20001eb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20001eba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20001ebe:	bf1d      	ittte	ne
20001ec0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20001ec4:	ea94 0f0c 	teqne	r4, ip
20001ec8:	ea95 0f0c 	teqne	r5, ip
20001ecc:	f000 f8de 	bleq	2000208c <__aeabi_dmul+0x1dc>
20001ed0:	442c      	add	r4, r5
20001ed2:	ea81 0603 	eor.w	r6, r1, r3
20001ed6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
20001eda:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
20001ede:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
20001ee2:	bf18      	it	ne
20001ee4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
20001ee8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20001eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20001ef0:	d038      	beq.n	20001f64 <__aeabi_dmul+0xb4>
20001ef2:	fba0 ce02 	umull	ip, lr, r0, r2
20001ef6:	f04f 0500 	mov.w	r5, #0
20001efa:	fbe1 e502 	umlal	lr, r5, r1, r2
20001efe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
20001f02:	fbe0 e503 	umlal	lr, r5, r0, r3
20001f06:	f04f 0600 	mov.w	r6, #0
20001f0a:	fbe1 5603 	umlal	r5, r6, r1, r3
20001f0e:	f09c 0f00 	teq	ip, #0
20001f12:	bf18      	it	ne
20001f14:	f04e 0e01 	orrne.w	lr, lr, #1
20001f18:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
20001f1c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
20001f20:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
20001f24:	d204      	bcs.n	20001f30 <__aeabi_dmul+0x80>
20001f26:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
20001f2a:	416d      	adcs	r5, r5
20001f2c:	eb46 0606 	adc.w	r6, r6, r6
20001f30:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
20001f34:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
20001f38:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20001f3c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20001f40:	ea4f 2ece 	mov.w	lr, lr, lsl #11
20001f44:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20001f48:	bf88      	it	hi
20001f4a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20001f4e:	d81e      	bhi.n	20001f8e <__aeabi_dmul+0xde>
20001f50:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
20001f54:	bf08      	it	eq
20001f56:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
20001f5a:	f150 0000 	adcs.w	r0, r0, #0
20001f5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20001f62:	bd70      	pop	{r4, r5, r6, pc}
20001f64:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
20001f68:	ea46 0101 	orr.w	r1, r6, r1
20001f6c:	ea40 0002 	orr.w	r0, r0, r2
20001f70:	ea81 0103 	eor.w	r1, r1, r3
20001f74:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
20001f78:	bfc2      	ittt	gt
20001f7a:	ebd4 050c 	rsbsgt	r5, r4, ip
20001f7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20001f82:	bd70      	popgt	{r4, r5, r6, pc}
20001f84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20001f88:	f04f 0e00 	mov.w	lr, #0
20001f8c:	3c01      	subs	r4, #1
20001f8e:	f300 80ab 	bgt.w	200020e8 <__aeabi_dmul+0x238>
20001f92:	f114 0f36 	cmn.w	r4, #54	; 0x36
20001f96:	bfde      	ittt	le
20001f98:	2000      	movle	r0, #0
20001f9a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
20001f9e:	bd70      	pople	{r4, r5, r6, pc}
20001fa0:	f1c4 0400 	rsb	r4, r4, #0
20001fa4:	3c20      	subs	r4, #32
20001fa6:	da35      	bge.n	20002014 <__aeabi_dmul+0x164>
20001fa8:	340c      	adds	r4, #12
20001faa:	dc1b      	bgt.n	20001fe4 <__aeabi_dmul+0x134>
20001fac:	f104 0414 	add.w	r4, r4, #20
20001fb0:	f1c4 0520 	rsb	r5, r4, #32
20001fb4:	fa00 f305 	lsl.w	r3, r0, r5
20001fb8:	fa20 f004 	lsr.w	r0, r0, r4
20001fbc:	fa01 f205 	lsl.w	r2, r1, r5
20001fc0:	ea40 0002 	orr.w	r0, r0, r2
20001fc4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
20001fc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20001fcc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20001fd0:	fa21 f604 	lsr.w	r6, r1, r4
20001fd4:	eb42 0106 	adc.w	r1, r2, r6
20001fd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20001fdc:	bf08      	it	eq
20001fde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20001fe2:	bd70      	pop	{r4, r5, r6, pc}
20001fe4:	f1c4 040c 	rsb	r4, r4, #12
20001fe8:	f1c4 0520 	rsb	r5, r4, #32
20001fec:	fa00 f304 	lsl.w	r3, r0, r4
20001ff0:	fa20 f005 	lsr.w	r0, r0, r5
20001ff4:	fa01 f204 	lsl.w	r2, r1, r4
20001ff8:	ea40 0002 	orr.w	r0, r0, r2
20001ffc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002000:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20002004:	f141 0100 	adc.w	r1, r1, #0
20002008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
2000200c:	bf08      	it	eq
2000200e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20002012:	bd70      	pop	{r4, r5, r6, pc}
20002014:	f1c4 0520 	rsb	r5, r4, #32
20002018:	fa00 f205 	lsl.w	r2, r0, r5
2000201c:	ea4e 0e02 	orr.w	lr, lr, r2
20002020:	fa20 f304 	lsr.w	r3, r0, r4
20002024:	fa01 f205 	lsl.w	r2, r1, r5
20002028:	ea43 0302 	orr.w	r3, r3, r2
2000202c:	fa21 f004 	lsr.w	r0, r1, r4
20002030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002034:	fa21 f204 	lsr.w	r2, r1, r4
20002038:	ea20 0002 	bic.w	r0, r0, r2
2000203c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
20002040:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20002044:	bf08      	it	eq
20002046:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
2000204a:	bd70      	pop	{r4, r5, r6, pc}
2000204c:	f094 0f00 	teq	r4, #0
20002050:	d10f      	bne.n	20002072 <__aeabi_dmul+0x1c2>
20002052:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
20002056:	0040      	lsls	r0, r0, #1
20002058:	eb41 0101 	adc.w	r1, r1, r1
2000205c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002060:	bf08      	it	eq
20002062:	3c01      	subeq	r4, #1
20002064:	d0f7      	beq.n	20002056 <__aeabi_dmul+0x1a6>
20002066:	ea41 0106 	orr.w	r1, r1, r6
2000206a:	f095 0f00 	teq	r5, #0
2000206e:	bf18      	it	ne
20002070:	4770      	bxne	lr
20002072:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
20002076:	0052      	lsls	r2, r2, #1
20002078:	eb43 0303 	adc.w	r3, r3, r3
2000207c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20002080:	bf08      	it	eq
20002082:	3d01      	subeq	r5, #1
20002084:	d0f7      	beq.n	20002076 <__aeabi_dmul+0x1c6>
20002086:	ea43 0306 	orr.w	r3, r3, r6
2000208a:	4770      	bx	lr
2000208c:	ea94 0f0c 	teq	r4, ip
20002090:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20002094:	bf18      	it	ne
20002096:	ea95 0f0c 	teqne	r5, ip
2000209a:	d00c      	beq.n	200020b6 <__aeabi_dmul+0x206>
2000209c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200020a0:	bf18      	it	ne
200020a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200020a6:	d1d1      	bne.n	2000204c <__aeabi_dmul+0x19c>
200020a8:	ea81 0103 	eor.w	r1, r1, r3
200020ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200020b0:	f04f 0000 	mov.w	r0, #0
200020b4:	bd70      	pop	{r4, r5, r6, pc}
200020b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200020ba:	bf06      	itte	eq
200020bc:	4610      	moveq	r0, r2
200020be:	4619      	moveq	r1, r3
200020c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200020c4:	d019      	beq.n	200020fa <__aeabi_dmul+0x24a>
200020c6:	ea94 0f0c 	teq	r4, ip
200020ca:	d102      	bne.n	200020d2 <__aeabi_dmul+0x222>
200020cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
200020d0:	d113      	bne.n	200020fa <__aeabi_dmul+0x24a>
200020d2:	ea95 0f0c 	teq	r5, ip
200020d6:	d105      	bne.n	200020e4 <__aeabi_dmul+0x234>
200020d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
200020dc:	bf1c      	itt	ne
200020de:	4610      	movne	r0, r2
200020e0:	4619      	movne	r1, r3
200020e2:	d10a      	bne.n	200020fa <__aeabi_dmul+0x24a>
200020e4:	ea81 0103 	eor.w	r1, r1, r3
200020e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200020ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200020f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
200020f4:	f04f 0000 	mov.w	r0, #0
200020f8:	bd70      	pop	{r4, r5, r6, pc}
200020fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200020fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
20002102:	bd70      	pop	{r4, r5, r6, pc}

20002104 <__aeabi_ddiv>:
20002104:	b570      	push	{r4, r5, r6, lr}
20002106:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000210a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
2000210e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20002112:	bf1d      	ittte	ne
20002114:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20002118:	ea94 0f0c 	teqne	r4, ip
2000211c:	ea95 0f0c 	teqne	r5, ip
20002120:	f000 f8a7 	bleq	20002272 <__aeabi_ddiv+0x16e>
20002124:	eba4 0405 	sub.w	r4, r4, r5
20002128:	ea81 0e03 	eor.w	lr, r1, r3
2000212c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002130:	ea4f 3101 	mov.w	r1, r1, lsl #12
20002134:	f000 8088 	beq.w	20002248 <__aeabi_ddiv+0x144>
20002138:	ea4f 3303 	mov.w	r3, r3, lsl #12
2000213c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
20002140:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
20002144:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
20002148:	ea4f 2202 	mov.w	r2, r2, lsl #8
2000214c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
20002150:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
20002154:	ea4f 2600 	mov.w	r6, r0, lsl #8
20002158:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
2000215c:	429d      	cmp	r5, r3
2000215e:	bf08      	it	eq
20002160:	4296      	cmpeq	r6, r2
20002162:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
20002166:	f504 7440 	add.w	r4, r4, #768	; 0x300
2000216a:	d202      	bcs.n	20002172 <__aeabi_ddiv+0x6e>
2000216c:	085b      	lsrs	r3, r3, #1
2000216e:	ea4f 0232 	mov.w	r2, r2, rrx
20002172:	1ab6      	subs	r6, r6, r2
20002174:	eb65 0503 	sbc.w	r5, r5, r3
20002178:	085b      	lsrs	r3, r3, #1
2000217a:	ea4f 0232 	mov.w	r2, r2, rrx
2000217e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
20002182:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
20002186:	ebb6 0e02 	subs.w	lr, r6, r2
2000218a:	eb75 0e03 	sbcs.w	lr, r5, r3
2000218e:	bf22      	ittt	cs
20002190:	1ab6      	subcs	r6, r6, r2
20002192:	4675      	movcs	r5, lr
20002194:	ea40 000c 	orrcs.w	r0, r0, ip
20002198:	085b      	lsrs	r3, r3, #1
2000219a:	ea4f 0232 	mov.w	r2, r2, rrx
2000219e:	ebb6 0e02 	subs.w	lr, r6, r2
200021a2:	eb75 0e03 	sbcs.w	lr, r5, r3
200021a6:	bf22      	ittt	cs
200021a8:	1ab6      	subcs	r6, r6, r2
200021aa:	4675      	movcs	r5, lr
200021ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
200021b0:	085b      	lsrs	r3, r3, #1
200021b2:	ea4f 0232 	mov.w	r2, r2, rrx
200021b6:	ebb6 0e02 	subs.w	lr, r6, r2
200021ba:	eb75 0e03 	sbcs.w	lr, r5, r3
200021be:	bf22      	ittt	cs
200021c0:	1ab6      	subcs	r6, r6, r2
200021c2:	4675      	movcs	r5, lr
200021c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
200021c8:	085b      	lsrs	r3, r3, #1
200021ca:	ea4f 0232 	mov.w	r2, r2, rrx
200021ce:	ebb6 0e02 	subs.w	lr, r6, r2
200021d2:	eb75 0e03 	sbcs.w	lr, r5, r3
200021d6:	bf22      	ittt	cs
200021d8:	1ab6      	subcs	r6, r6, r2
200021da:	4675      	movcs	r5, lr
200021dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
200021e0:	ea55 0e06 	orrs.w	lr, r5, r6
200021e4:	d018      	beq.n	20002218 <__aeabi_ddiv+0x114>
200021e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
200021ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
200021ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
200021f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200021f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
200021fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
200021fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
20002202:	d1c0      	bne.n	20002186 <__aeabi_ddiv+0x82>
20002204:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002208:	d10b      	bne.n	20002222 <__aeabi_ddiv+0x11e>
2000220a:	ea41 0100 	orr.w	r1, r1, r0
2000220e:	f04f 0000 	mov.w	r0, #0
20002212:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
20002216:	e7b6      	b.n	20002186 <__aeabi_ddiv+0x82>
20002218:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
2000221c:	bf04      	itt	eq
2000221e:	4301      	orreq	r1, r0
20002220:	2000      	moveq	r0, #0
20002222:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20002226:	bf88      	it	hi
20002228:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
2000222c:	f63f aeaf 	bhi.w	20001f8e <__aeabi_dmul+0xde>
20002230:	ebb5 0c03 	subs.w	ip, r5, r3
20002234:	bf04      	itt	eq
20002236:	ebb6 0c02 	subseq.w	ip, r6, r2
2000223a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2000223e:	f150 0000 	adcs.w	r0, r0, #0
20002242:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20002246:	bd70      	pop	{r4, r5, r6, pc}
20002248:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
2000224c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
20002250:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
20002254:	bfc2      	ittt	gt
20002256:	ebd4 050c 	rsbsgt	r5, r4, ip
2000225a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
2000225e:	bd70      	popgt	{r4, r5, r6, pc}
20002260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002264:	f04f 0e00 	mov.w	lr, #0
20002268:	3c01      	subs	r4, #1
2000226a:	e690      	b.n	20001f8e <__aeabi_dmul+0xde>
2000226c:	ea45 0e06 	orr.w	lr, r5, r6
20002270:	e68d      	b.n	20001f8e <__aeabi_dmul+0xde>
20002272:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20002276:	ea94 0f0c 	teq	r4, ip
2000227a:	bf08      	it	eq
2000227c:	ea95 0f0c 	teqeq	r5, ip
20002280:	f43f af3b 	beq.w	200020fa <__aeabi_dmul+0x24a>
20002284:	ea94 0f0c 	teq	r4, ip
20002288:	d10a      	bne.n	200022a0 <__aeabi_ddiv+0x19c>
2000228a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2000228e:	f47f af34 	bne.w	200020fa <__aeabi_dmul+0x24a>
20002292:	ea95 0f0c 	teq	r5, ip
20002296:	f47f af25 	bne.w	200020e4 <__aeabi_dmul+0x234>
2000229a:	4610      	mov	r0, r2
2000229c:	4619      	mov	r1, r3
2000229e:	e72c      	b.n	200020fa <__aeabi_dmul+0x24a>
200022a0:	ea95 0f0c 	teq	r5, ip
200022a4:	d106      	bne.n	200022b4 <__aeabi_ddiv+0x1b0>
200022a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
200022aa:	f43f aefd 	beq.w	200020a8 <__aeabi_dmul+0x1f8>
200022ae:	4610      	mov	r0, r2
200022b0:	4619      	mov	r1, r3
200022b2:	e722      	b.n	200020fa <__aeabi_dmul+0x24a>
200022b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200022b8:	bf18      	it	ne
200022ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200022be:	f47f aec5 	bne.w	2000204c <__aeabi_dmul+0x19c>
200022c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
200022c6:	f47f af0d 	bne.w	200020e4 <__aeabi_dmul+0x234>
200022ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
200022ce:	f47f aeeb 	bne.w	200020a8 <__aeabi_dmul+0x1f8>
200022d2:	e712      	b.n	200020fa <__aeabi_dmul+0x24a>

200022d4 <__aeabi_d2uiz>:
200022d4:	004a      	lsls	r2, r1, #1
200022d6:	d211      	bcs.n	200022fc <__aeabi_d2uiz+0x28>
200022d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
200022dc:	d211      	bcs.n	20002302 <__aeabi_d2uiz+0x2e>
200022de:	d50d      	bpl.n	200022fc <__aeabi_d2uiz+0x28>
200022e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
200022e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
200022e8:	d40e      	bmi.n	20002308 <__aeabi_d2uiz+0x34>
200022ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
200022ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
200022f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
200022f6:	fa23 f002 	lsr.w	r0, r3, r2
200022fa:	4770      	bx	lr
200022fc:	f04f 0000 	mov.w	r0, #0
20002300:	4770      	bx	lr
20002302:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
20002306:	d102      	bne.n	2000230e <__aeabi_d2uiz+0x3a>
20002308:	f04f 30ff 	mov.w	r0, #4294967295
2000230c:	4770      	bx	lr
2000230e:	f04f 0000 	mov.w	r0, #0
20002312:	4770      	bx	lr

20002314 <__aeabi_d2f>:
20002314:	ea4f 0241 	mov.w	r2, r1, lsl #1
20002318:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
2000231c:	bf24      	itt	cs
2000231e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
20002322:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
20002326:	d90d      	bls.n	20002344 <__aeabi_d2f+0x30>
20002328:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
2000232c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
20002330:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
20002334:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
20002338:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
2000233c:	bf08      	it	eq
2000233e:	f020 0001 	biceq.w	r0, r0, #1
20002342:	4770      	bx	lr
20002344:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
20002348:	d121      	bne.n	2000238e <__aeabi_d2f+0x7a>
2000234a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
2000234e:	bfbc      	itt	lt
20002350:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
20002354:	4770      	bxlt	lr
20002356:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
2000235a:	ea4f 5252 	mov.w	r2, r2, lsr #21
2000235e:	f1c2 0218 	rsb	r2, r2, #24
20002362:	f1c2 0c20 	rsb	ip, r2, #32
20002366:	fa10 f30c 	lsls.w	r3, r0, ip
2000236a:	fa20 f002 	lsr.w	r0, r0, r2
2000236e:	bf18      	it	ne
20002370:	f040 0001 	orrne.w	r0, r0, #1
20002374:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20002378:	ea4f 23d3 	mov.w	r3, r3, lsr #11
2000237c:	fa03 fc0c 	lsl.w	ip, r3, ip
20002380:	ea40 000c 	orr.w	r0, r0, ip
20002384:	fa23 f302 	lsr.w	r3, r3, r2
20002388:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000238c:	e7cc      	b.n	20002328 <__aeabi_d2f+0x14>
2000238e:	ea7f 5362 	mvns.w	r3, r2, asr #21
20002392:	d107      	bne.n	200023a4 <__aeabi_d2f+0x90>
20002394:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
20002398:	bf1e      	ittt	ne
2000239a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
2000239e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
200023a2:	4770      	bxne	lr
200023a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
200023a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
200023ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200023b0:	4770      	bx	lr
200023b2:	bf00      	nop

200023b4 <__aeabi_frsub>:
200023b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
200023b8:	e002      	b.n	200023c0 <__addsf3>
200023ba:	bf00      	nop

200023bc <__aeabi_fsub>:
200023bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

200023c0 <__addsf3>:
200023c0:	0042      	lsls	r2, r0, #1
200023c2:	bf1f      	itttt	ne
200023c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
200023c8:	ea92 0f03 	teqne	r2, r3
200023cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
200023d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
200023d4:	d06a      	beq.n	200024ac <__addsf3+0xec>
200023d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
200023da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
200023de:	bfc1      	itttt	gt
200023e0:	18d2      	addgt	r2, r2, r3
200023e2:	4041      	eorgt	r1, r0
200023e4:	4048      	eorgt	r0, r1
200023e6:	4041      	eorgt	r1, r0
200023e8:	bfb8      	it	lt
200023ea:	425b      	neglt	r3, r3
200023ec:	2b19      	cmp	r3, #25
200023ee:	bf88      	it	hi
200023f0:	4770      	bxhi	lr
200023f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
200023f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200023fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
200023fe:	bf18      	it	ne
20002400:	4240      	negne	r0, r0
20002402:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20002406:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
2000240a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
2000240e:	bf18      	it	ne
20002410:	4249      	negne	r1, r1
20002412:	ea92 0f03 	teq	r2, r3
20002416:	d03f      	beq.n	20002498 <__addsf3+0xd8>
20002418:	f1a2 0201 	sub.w	r2, r2, #1
2000241c:	fa41 fc03 	asr.w	ip, r1, r3
20002420:	eb10 000c 	adds.w	r0, r0, ip
20002424:	f1c3 0320 	rsb	r3, r3, #32
20002428:	fa01 f103 	lsl.w	r1, r1, r3
2000242c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
20002430:	d502      	bpl.n	20002438 <__addsf3+0x78>
20002432:	4249      	negs	r1, r1
20002434:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
20002438:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
2000243c:	d313      	bcc.n	20002466 <__addsf3+0xa6>
2000243e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
20002442:	d306      	bcc.n	20002452 <__addsf3+0x92>
20002444:	0840      	lsrs	r0, r0, #1
20002446:	ea4f 0131 	mov.w	r1, r1, rrx
2000244a:	f102 0201 	add.w	r2, r2, #1
2000244e:	2afe      	cmp	r2, #254	; 0xfe
20002450:	d251      	bcs.n	200024f6 <__addsf3+0x136>
20002452:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
20002456:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
2000245a:	bf08      	it	eq
2000245c:	f020 0001 	biceq.w	r0, r0, #1
20002460:	ea40 0003 	orr.w	r0, r0, r3
20002464:	4770      	bx	lr
20002466:	0049      	lsls	r1, r1, #1
20002468:	eb40 0000 	adc.w	r0, r0, r0
2000246c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
20002470:	f1a2 0201 	sub.w	r2, r2, #1
20002474:	d1ed      	bne.n	20002452 <__addsf3+0x92>
20002476:	fab0 fc80 	clz	ip, r0
2000247a:	f1ac 0c08 	sub.w	ip, ip, #8
2000247e:	ebb2 020c 	subs.w	r2, r2, ip
20002482:	fa00 f00c 	lsl.w	r0, r0, ip
20002486:	bfaa      	itet	ge
20002488:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
2000248c:	4252      	neglt	r2, r2
2000248e:	4318      	orrge	r0, r3
20002490:	bfbc      	itt	lt
20002492:	40d0      	lsrlt	r0, r2
20002494:	4318      	orrlt	r0, r3
20002496:	4770      	bx	lr
20002498:	f092 0f00 	teq	r2, #0
2000249c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
200024a0:	bf06      	itte	eq
200024a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
200024a6:	3201      	addeq	r2, #1
200024a8:	3b01      	subne	r3, #1
200024aa:	e7b5      	b.n	20002418 <__addsf3+0x58>
200024ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
200024b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
200024b4:	bf18      	it	ne
200024b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
200024ba:	d021      	beq.n	20002500 <__addsf3+0x140>
200024bc:	ea92 0f03 	teq	r2, r3
200024c0:	d004      	beq.n	200024cc <__addsf3+0x10c>
200024c2:	f092 0f00 	teq	r2, #0
200024c6:	bf08      	it	eq
200024c8:	4608      	moveq	r0, r1
200024ca:	4770      	bx	lr
200024cc:	ea90 0f01 	teq	r0, r1
200024d0:	bf1c      	itt	ne
200024d2:	2000      	movne	r0, #0
200024d4:	4770      	bxne	lr
200024d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
200024da:	d104      	bne.n	200024e6 <__addsf3+0x126>
200024dc:	0040      	lsls	r0, r0, #1
200024de:	bf28      	it	cs
200024e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
200024e4:	4770      	bx	lr
200024e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
200024ea:	bf3c      	itt	cc
200024ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
200024f0:	4770      	bxcc	lr
200024f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
200024f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
200024fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200024fe:	4770      	bx	lr
20002500:	ea7f 6222 	mvns.w	r2, r2, asr #24
20002504:	bf16      	itet	ne
20002506:	4608      	movne	r0, r1
20002508:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
2000250c:	4601      	movne	r1, r0
2000250e:	0242      	lsls	r2, r0, #9
20002510:	bf06      	itte	eq
20002512:	ea5f 2341 	movseq.w	r3, r1, lsl #9
20002516:	ea90 0f01 	teqeq	r0, r1
2000251a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
2000251e:	4770      	bx	lr

20002520 <__aeabi_ui2f>:
20002520:	f04f 0300 	mov.w	r3, #0
20002524:	e004      	b.n	20002530 <__aeabi_i2f+0x8>
20002526:	bf00      	nop

20002528 <__aeabi_i2f>:
20002528:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
2000252c:	bf48      	it	mi
2000252e:	4240      	negmi	r0, r0
20002530:	ea5f 0c00 	movs.w	ip, r0
20002534:	bf08      	it	eq
20002536:	4770      	bxeq	lr
20002538:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
2000253c:	4601      	mov	r1, r0
2000253e:	f04f 0000 	mov.w	r0, #0
20002542:	e01c      	b.n	2000257e <__aeabi_l2f+0x2a>

20002544 <__aeabi_ul2f>:
20002544:	ea50 0201 	orrs.w	r2, r0, r1
20002548:	bf08      	it	eq
2000254a:	4770      	bxeq	lr
2000254c:	f04f 0300 	mov.w	r3, #0
20002550:	e00a      	b.n	20002568 <__aeabi_l2f+0x14>
20002552:	bf00      	nop

20002554 <__aeabi_l2f>:
20002554:	ea50 0201 	orrs.w	r2, r0, r1
20002558:	bf08      	it	eq
2000255a:	4770      	bxeq	lr
2000255c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
20002560:	d502      	bpl.n	20002568 <__aeabi_l2f+0x14>
20002562:	4240      	negs	r0, r0
20002564:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20002568:	ea5f 0c01 	movs.w	ip, r1
2000256c:	bf02      	ittt	eq
2000256e:	4684      	moveq	ip, r0
20002570:	4601      	moveq	r1, r0
20002572:	2000      	moveq	r0, #0
20002574:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
20002578:	bf08      	it	eq
2000257a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
2000257e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
20002582:	fabc f28c 	clz	r2, ip
20002586:	3a08      	subs	r2, #8
20002588:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
2000258c:	db10      	blt.n	200025b0 <__aeabi_l2f+0x5c>
2000258e:	fa01 fc02 	lsl.w	ip, r1, r2
20002592:	4463      	add	r3, ip
20002594:	fa00 fc02 	lsl.w	ip, r0, r2
20002598:	f1c2 0220 	rsb	r2, r2, #32
2000259c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
200025a0:	fa20 f202 	lsr.w	r2, r0, r2
200025a4:	eb43 0002 	adc.w	r0, r3, r2
200025a8:	bf08      	it	eq
200025aa:	f020 0001 	biceq.w	r0, r0, #1
200025ae:	4770      	bx	lr
200025b0:	f102 0220 	add.w	r2, r2, #32
200025b4:	fa01 fc02 	lsl.w	ip, r1, r2
200025b8:	f1c2 0220 	rsb	r2, r2, #32
200025bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
200025c0:	fa21 f202 	lsr.w	r2, r1, r2
200025c4:	eb43 0002 	adc.w	r0, r3, r2
200025c8:	bf08      	it	eq
200025ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
200025ce:	4770      	bx	lr

200025d0 <__aeabi_fmul>:
200025d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
200025d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
200025d8:	bf1e      	ittt	ne
200025da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
200025de:	ea92 0f0c 	teqne	r2, ip
200025e2:	ea93 0f0c 	teqne	r3, ip
200025e6:	d06f      	beq.n	200026c8 <__aeabi_fmul+0xf8>
200025e8:	441a      	add	r2, r3
200025ea:	ea80 0c01 	eor.w	ip, r0, r1
200025ee:	0240      	lsls	r0, r0, #9
200025f0:	bf18      	it	ne
200025f2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
200025f6:	d01e      	beq.n	20002636 <__aeabi_fmul+0x66>
200025f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200025fc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
20002600:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
20002604:	fba0 3101 	umull	r3, r1, r0, r1
20002608:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
2000260c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
20002610:	bf3e      	ittt	cc
20002612:	0049      	lslcc	r1, r1, #1
20002614:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
20002618:	005b      	lslcc	r3, r3, #1
2000261a:	ea40 0001 	orr.w	r0, r0, r1
2000261e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
20002622:	2afd      	cmp	r2, #253	; 0xfd
20002624:	d81d      	bhi.n	20002662 <__aeabi_fmul+0x92>
20002626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
2000262a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
2000262e:	bf08      	it	eq
20002630:	f020 0001 	biceq.w	r0, r0, #1
20002634:	4770      	bx	lr
20002636:	f090 0f00 	teq	r0, #0
2000263a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
2000263e:	bf08      	it	eq
20002640:	0249      	lsleq	r1, r1, #9
20002642:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20002646:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
2000264a:	3a7f      	subs	r2, #127	; 0x7f
2000264c:	bfc2      	ittt	gt
2000264e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20002652:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20002656:	4770      	bxgt	lr
20002658:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
2000265c:	f04f 0300 	mov.w	r3, #0
20002660:	3a01      	subs	r2, #1
20002662:	dc5d      	bgt.n	20002720 <__aeabi_fmul+0x150>
20002664:	f112 0f19 	cmn.w	r2, #25
20002668:	bfdc      	itt	le
2000266a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
2000266e:	4770      	bxle	lr
20002670:	f1c2 0200 	rsb	r2, r2, #0
20002674:	0041      	lsls	r1, r0, #1
20002676:	fa21 f102 	lsr.w	r1, r1, r2
2000267a:	f1c2 0220 	rsb	r2, r2, #32
2000267e:	fa00 fc02 	lsl.w	ip, r0, r2
20002682:	ea5f 0031 	movs.w	r0, r1, rrx
20002686:	f140 0000 	adc.w	r0, r0, #0
2000268a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
2000268e:	bf08      	it	eq
20002690:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20002694:	4770      	bx	lr
20002696:	f092 0f00 	teq	r2, #0
2000269a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
2000269e:	bf02      	ittt	eq
200026a0:	0040      	lsleq	r0, r0, #1
200026a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
200026a6:	3a01      	subeq	r2, #1
200026a8:	d0f9      	beq.n	2000269e <__aeabi_fmul+0xce>
200026aa:	ea40 000c 	orr.w	r0, r0, ip
200026ae:	f093 0f00 	teq	r3, #0
200026b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
200026b6:	bf02      	ittt	eq
200026b8:	0049      	lsleq	r1, r1, #1
200026ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
200026be:	3b01      	subeq	r3, #1
200026c0:	d0f9      	beq.n	200026b6 <__aeabi_fmul+0xe6>
200026c2:	ea41 010c 	orr.w	r1, r1, ip
200026c6:	e78f      	b.n	200025e8 <__aeabi_fmul+0x18>
200026c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
200026cc:	ea92 0f0c 	teq	r2, ip
200026d0:	bf18      	it	ne
200026d2:	ea93 0f0c 	teqne	r3, ip
200026d6:	d00a      	beq.n	200026ee <__aeabi_fmul+0x11e>
200026d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
200026dc:	bf18      	it	ne
200026de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
200026e2:	d1d8      	bne.n	20002696 <__aeabi_fmul+0xc6>
200026e4:	ea80 0001 	eor.w	r0, r0, r1
200026e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
200026ec:	4770      	bx	lr
200026ee:	f090 0f00 	teq	r0, #0
200026f2:	bf17      	itett	ne
200026f4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
200026f8:	4608      	moveq	r0, r1
200026fa:	f091 0f00 	teqne	r1, #0
200026fe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
20002702:	d014      	beq.n	2000272e <__aeabi_fmul+0x15e>
20002704:	ea92 0f0c 	teq	r2, ip
20002708:	d101      	bne.n	2000270e <__aeabi_fmul+0x13e>
2000270a:	0242      	lsls	r2, r0, #9
2000270c:	d10f      	bne.n	2000272e <__aeabi_fmul+0x15e>
2000270e:	ea93 0f0c 	teq	r3, ip
20002712:	d103      	bne.n	2000271c <__aeabi_fmul+0x14c>
20002714:	024b      	lsls	r3, r1, #9
20002716:	bf18      	it	ne
20002718:	4608      	movne	r0, r1
2000271a:	d108      	bne.n	2000272e <__aeabi_fmul+0x15e>
2000271c:	ea80 0001 	eor.w	r0, r0, r1
20002720:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20002724:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20002728:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
2000272c:	4770      	bx	lr
2000272e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20002732:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
20002736:	4770      	bx	lr

20002738 <__aeabi_fdiv>:
20002738:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000273c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20002740:	bf1e      	ittt	ne
20002742:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20002746:	ea92 0f0c 	teqne	r2, ip
2000274a:	ea93 0f0c 	teqne	r3, ip
2000274e:	d069      	beq.n	20002824 <__aeabi_fdiv+0xec>
20002750:	eba2 0203 	sub.w	r2, r2, r3
20002754:	ea80 0c01 	eor.w	ip, r0, r1
20002758:	0249      	lsls	r1, r1, #9
2000275a:	ea4f 2040 	mov.w	r0, r0, lsl #9
2000275e:	d037      	beq.n	200027d0 <__aeabi_fdiv+0x98>
20002760:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
20002764:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
20002768:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
2000276c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20002770:	428b      	cmp	r3, r1
20002772:	bf38      	it	cc
20002774:	005b      	lslcc	r3, r3, #1
20002776:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
2000277a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
2000277e:	428b      	cmp	r3, r1
20002780:	bf24      	itt	cs
20002782:	1a5b      	subcs	r3, r3, r1
20002784:	ea40 000c 	orrcs.w	r0, r0, ip
20002788:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
2000278c:	bf24      	itt	cs
2000278e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
20002792:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20002796:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
2000279a:	bf24      	itt	cs
2000279c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
200027a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
200027a4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
200027a8:	bf24      	itt	cs
200027aa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
200027ae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
200027b2:	011b      	lsls	r3, r3, #4
200027b4:	bf18      	it	ne
200027b6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
200027ba:	d1e0      	bne.n	2000277e <__aeabi_fdiv+0x46>
200027bc:	2afd      	cmp	r2, #253	; 0xfd
200027be:	f63f af50 	bhi.w	20002662 <__aeabi_fmul+0x92>
200027c2:	428b      	cmp	r3, r1
200027c4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
200027c8:	bf08      	it	eq
200027ca:	f020 0001 	biceq.w	r0, r0, #1
200027ce:	4770      	bx	lr
200027d0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
200027d4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
200027d8:	327f      	adds	r2, #127	; 0x7f
200027da:	bfc2      	ittt	gt
200027dc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
200027e0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
200027e4:	4770      	bxgt	lr
200027e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200027ea:	f04f 0300 	mov.w	r3, #0
200027ee:	3a01      	subs	r2, #1
200027f0:	e737      	b.n	20002662 <__aeabi_fmul+0x92>
200027f2:	f092 0f00 	teq	r2, #0
200027f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
200027fa:	bf02      	ittt	eq
200027fc:	0040      	lsleq	r0, r0, #1
200027fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20002802:	3a01      	subeq	r2, #1
20002804:	d0f9      	beq.n	200027fa <__aeabi_fdiv+0xc2>
20002806:	ea40 000c 	orr.w	r0, r0, ip
2000280a:	f093 0f00 	teq	r3, #0
2000280e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20002812:	bf02      	ittt	eq
20002814:	0049      	lsleq	r1, r1, #1
20002816:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
2000281a:	3b01      	subeq	r3, #1
2000281c:	d0f9      	beq.n	20002812 <__aeabi_fdiv+0xda>
2000281e:	ea41 010c 	orr.w	r1, r1, ip
20002822:	e795      	b.n	20002750 <__aeabi_fdiv+0x18>
20002824:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20002828:	ea92 0f0c 	teq	r2, ip
2000282c:	d108      	bne.n	20002840 <__aeabi_fdiv+0x108>
2000282e:	0242      	lsls	r2, r0, #9
20002830:	f47f af7d 	bne.w	2000272e <__aeabi_fmul+0x15e>
20002834:	ea93 0f0c 	teq	r3, ip
20002838:	f47f af70 	bne.w	2000271c <__aeabi_fmul+0x14c>
2000283c:	4608      	mov	r0, r1
2000283e:	e776      	b.n	2000272e <__aeabi_fmul+0x15e>
20002840:	ea93 0f0c 	teq	r3, ip
20002844:	d104      	bne.n	20002850 <__aeabi_fdiv+0x118>
20002846:	024b      	lsls	r3, r1, #9
20002848:	f43f af4c 	beq.w	200026e4 <__aeabi_fmul+0x114>
2000284c:	4608      	mov	r0, r1
2000284e:	e76e      	b.n	2000272e <__aeabi_fmul+0x15e>
20002850:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20002854:	bf18      	it	ne
20002856:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
2000285a:	d1ca      	bne.n	200027f2 <__aeabi_fdiv+0xba>
2000285c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
20002860:	f47f af5c 	bne.w	2000271c <__aeabi_fmul+0x14c>
20002864:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
20002868:	f47f af3c 	bne.w	200026e4 <__aeabi_fmul+0x114>
2000286c:	e75f      	b.n	2000272e <__aeabi_fmul+0x15e>
2000286e:	bf00      	nop

20002870 <__libc_init_array>:
20002870:	b570      	push	{r4, r5, r6, lr}
20002872:	f642 1698 	movw	r6, #10648	; 0x2998
20002876:	f642 1598 	movw	r5, #10648	; 0x2998
2000287a:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000287e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20002882:	1b76      	subs	r6, r6, r5
20002884:	10b6      	asrs	r6, r6, #2
20002886:	d006      	beq.n	20002896 <__libc_init_array+0x26>
20002888:	2400      	movs	r4, #0
2000288a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000288e:	3401      	adds	r4, #1
20002890:	4798      	blx	r3
20002892:	42a6      	cmp	r6, r4
20002894:	d8f9      	bhi.n	2000288a <__libc_init_array+0x1a>
20002896:	f642 1598 	movw	r5, #10648	; 0x2998
2000289a:	f642 169c 	movw	r6, #10652	; 0x299c
2000289e:	f2c2 0500 	movt	r5, #8192	; 0x2000
200028a2:	f2c2 0600 	movt	r6, #8192	; 0x2000
200028a6:	1b76      	subs	r6, r6, r5
200028a8:	f000 f86a 	bl	20002980 <_init>
200028ac:	10b6      	asrs	r6, r6, #2
200028ae:	d006      	beq.n	200028be <__libc_init_array+0x4e>
200028b0:	2400      	movs	r4, #0
200028b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200028b6:	3401      	adds	r4, #1
200028b8:	4798      	blx	r3
200028ba:	42a6      	cmp	r6, r4
200028bc:	d8f9      	bhi.n	200028b2 <__libc_init_array+0x42>
200028be:	bd70      	pop	{r4, r5, r6, pc}

200028c0 <g_config_reg_lut>:
200028c0:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
200028d0:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
200028e0:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
200028f0:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20002900:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20002910:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20002920:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20002930:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20002940 <g_gpio_irqn_lut>:
20002940:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
20002950:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
20002960:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
20002970:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

20002980 <_init>:
20002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002982:	bf00      	nop
20002984:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002986:	bc08      	pop	{r3}
20002988:	469e      	mov	lr, r3
2000298a:	4770      	bx	lr

2000298c <_fini>:
2000298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000298e:	bf00      	nop
20002990:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002992:	bc08      	pop	{r3}
20002994:	469e      	mov	lr, r3
20002996:	4770      	bx	lr

20002998 <__frame_dummy_init_array_entry>:
20002998:	0485 2000                                   ... 

2000299c <__do_global_dtors_aux_fini_array_entry>:
2000299c:	0471 2000                                   q.. 
